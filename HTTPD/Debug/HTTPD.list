
HTTPD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012054  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000032b0  08012254  08012254  00013254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015504  08015504  000171c8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08015504  08015504  00016504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801550c  0801550c  000171c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801550c  0801550c  0001650c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015510  08015510  00016510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08015514  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  0801559c  00017088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  0801563c  00017128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00008688  200001c8  080156dc  000171c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20008850  080156dc  00017850  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000171c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00024127  00000000  00000000  000171f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005fd0  00000000  00000000  0003b31d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000019a0  00000000  00000000  000412f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000144d  00000000  00000000  00042c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000358e7  00000000  00000000  000440dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002b1a1  00000000  00000000  000799c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010d8d9  00000000  00000000  000a4b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001b243e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000716c  00000000  00000000  001b2484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004f  00000000  00000000  001b95f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001c8 	.word	0x200001c8
 800021c:	00000000 	.word	0x00000000
 8000220:	0801223c 	.word	0x0801223c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001cc 	.word	0x200001cc
 800023c:	0801223c 	.word	0x0801223c

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b988 	b.w	8000638 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	468e      	mov	lr, r1
 8000348:	4604      	mov	r4, r0
 800034a:	4688      	mov	r8, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d962      	bls.n	800041c <__udivmoddi4+0xdc>
 8000356:	fab2 f682 	clz	r6, r2
 800035a:	b14e      	cbz	r6, 8000370 <__udivmoddi4+0x30>
 800035c:	f1c6 0320 	rsb	r3, r6, #32
 8000360:	fa01 f806 	lsl.w	r8, r1, r6
 8000364:	fa20 f303 	lsr.w	r3, r0, r3
 8000368:	40b7      	lsls	r7, r6
 800036a:	ea43 0808 	orr.w	r8, r3, r8
 800036e:	40b4      	lsls	r4, r6
 8000370:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fbb8 f1fe 	udiv	r1, r8, lr
 800037c:	0c23      	lsrs	r3, r4, #16
 800037e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000382:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000386:	fb01 f20c 	mul.w	r2, r1, ip
 800038a:	429a      	cmp	r2, r3
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038e:	18fb      	adds	r3, r7, r3
 8000390:	f101 30ff 	add.w	r0, r1, #4294967295
 8000394:	f080 80ea 	bcs.w	800056c <__udivmoddi4+0x22c>
 8000398:	429a      	cmp	r2, r3
 800039a:	f240 80e7 	bls.w	800056c <__udivmoddi4+0x22c>
 800039e:	3902      	subs	r1, #2
 80003a0:	443b      	add	r3, r7
 80003a2:	1a9a      	subs	r2, r3, r2
 80003a4:	b2a3      	uxth	r3, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b6:	459c      	cmp	ip, r3
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x8e>
 80003ba:	18fb      	adds	r3, r7, r3
 80003bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c0:	f080 80d6 	bcs.w	8000570 <__udivmoddi4+0x230>
 80003c4:	459c      	cmp	ip, r3
 80003c6:	f240 80d3 	bls.w	8000570 <__udivmoddi4+0x230>
 80003ca:	443b      	add	r3, r7
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d2:	eba3 030c 	sub.w	r3, r3, ip
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40f3      	lsrs	r3, r6
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xb6>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb0>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa2>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x14c>
 80003fe:	4573      	cmp	r3, lr
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xc8>
 8000402:	4282      	cmp	r2, r0
 8000404:	f200 8105 	bhi.w	8000612 <__udivmoddi4+0x2d2>
 8000408:	1a84      	subs	r4, r0, r2
 800040a:	eb6e 0203 	sbc.w	r2, lr, r3
 800040e:	2001      	movs	r0, #1
 8000410:	4690      	mov	r8, r2
 8000412:	2d00      	cmp	r5, #0
 8000414:	d0e5      	beq.n	80003e2 <__udivmoddi4+0xa2>
 8000416:	e9c5 4800 	strd	r4, r8, [r5]
 800041a:	e7e2      	b.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	2a00      	cmp	r2, #0
 800041e:	f000 8090 	beq.w	8000542 <__udivmoddi4+0x202>
 8000422:	fab2 f682 	clz	r6, r2
 8000426:	2e00      	cmp	r6, #0
 8000428:	f040 80a4 	bne.w	8000574 <__udivmoddi4+0x234>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	0c03      	lsrs	r3, r0, #16
 8000430:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000434:	b280      	uxth	r0, r0
 8000436:	b2bc      	uxth	r4, r7
 8000438:	2101      	movs	r1, #1
 800043a:	fbb2 fcfe 	udiv	ip, r2, lr
 800043e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000446:	fb04 f20c 	mul.w	r2, r4, ip
 800044a:	429a      	cmp	r2, r3
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x11e>
 800044e:	18fb      	adds	r3, r7, r3
 8000450:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x11c>
 8000456:	429a      	cmp	r2, r3
 8000458:	f200 80e0 	bhi.w	800061c <__udivmoddi4+0x2dc>
 800045c:	46c4      	mov	ip, r8
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	fbb3 f2fe 	udiv	r2, r3, lr
 8000464:	fb0e 3312 	mls	r3, lr, r2, r3
 8000468:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800046c:	fb02 f404 	mul.w	r4, r2, r4
 8000470:	429c      	cmp	r4, r3
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x144>
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	f102 30ff 	add.w	r0, r2, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x142>
 800047c:	429c      	cmp	r4, r3
 800047e:	f200 80ca 	bhi.w	8000616 <__udivmoddi4+0x2d6>
 8000482:	4602      	mov	r2, r0
 8000484:	1b1b      	subs	r3, r3, r4
 8000486:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x98>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa0e f401 	lsl.w	r4, lr, r1
 800049c:	fa20 f306 	lsr.w	r3, r0, r6
 80004a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004a8:	4323      	orrs	r3, r4
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	fa1f fc87 	uxth.w	ip, r7
 80004b2:	fbbe f0f9 	udiv	r0, lr, r9
 80004b6:	0c1c      	lsrs	r4, r3, #16
 80004b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x1a0>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80004d2:	f080 809c 	bcs.w	800060e <__udivmoddi4+0x2ce>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f240 8099 	bls.w	800060e <__udivmoddi4+0x2ce>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	eba4 040e 	sub.w	r4, r4, lr
 80004e4:	fa1f fe83 	uxth.w	lr, r3
 80004e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ec:	fb09 4413 	mls	r4, r9, r3, r4
 80004f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f8:	45a4      	cmp	ip, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x1ce>
 80004fc:	193c      	adds	r4, r7, r4
 80004fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000502:	f080 8082 	bcs.w	800060a <__udivmoddi4+0x2ca>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d97f      	bls.n	800060a <__udivmoddi4+0x2ca>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000512:	eba4 040c 	sub.w	r4, r4, ip
 8000516:	fba0 ec02 	umull	lr, ip, r0, r2
 800051a:	4564      	cmp	r4, ip
 800051c:	4673      	mov	r3, lr
 800051e:	46e1      	mov	r9, ip
 8000520:	d362      	bcc.n	80005e8 <__udivmoddi4+0x2a8>
 8000522:	d05f      	beq.n	80005e4 <__udivmoddi4+0x2a4>
 8000524:	b15d      	cbz	r5, 800053e <__udivmoddi4+0x1fe>
 8000526:	ebb8 0203 	subs.w	r2, r8, r3
 800052a:	eb64 0409 	sbc.w	r4, r4, r9
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	fa22 f301 	lsr.w	r3, r2, r1
 8000536:	431e      	orrs	r6, r3
 8000538:	40cc      	lsrs	r4, r1
 800053a:	e9c5 6400 	strd	r6, r4, [r5]
 800053e:	2100      	movs	r1, #0
 8000540:	e74f      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000542:	fbb1 fcf2 	udiv	ip, r1, r2
 8000546:	0c01      	lsrs	r1, r0, #16
 8000548:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800054c:	b280      	uxth	r0, r0
 800054e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000552:	463b      	mov	r3, r7
 8000554:	4638      	mov	r0, r7
 8000556:	463c      	mov	r4, r7
 8000558:	46b8      	mov	r8, r7
 800055a:	46be      	mov	lr, r7
 800055c:	2620      	movs	r6, #32
 800055e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000562:	eba2 0208 	sub.w	r2, r2, r8
 8000566:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800056a:	e766      	b.n	800043a <__udivmoddi4+0xfa>
 800056c:	4601      	mov	r1, r0
 800056e:	e718      	b.n	80003a2 <__udivmoddi4+0x62>
 8000570:	4610      	mov	r0, r2
 8000572:	e72c      	b.n	80003ce <__udivmoddi4+0x8e>
 8000574:	f1c6 0220 	rsb	r2, r6, #32
 8000578:	fa2e f302 	lsr.w	r3, lr, r2
 800057c:	40b7      	lsls	r7, r6
 800057e:	40b1      	lsls	r1, r6
 8000580:	fa20 f202 	lsr.w	r2, r0, r2
 8000584:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000588:	430a      	orrs	r2, r1
 800058a:	fbb3 f8fe 	udiv	r8, r3, lr
 800058e:	b2bc      	uxth	r4, r7
 8000590:	fb0e 3318 	mls	r3, lr, r8, r3
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059a:	fb08 f904 	mul.w	r9, r8, r4
 800059e:	40b0      	lsls	r0, r6
 80005a0:	4589      	cmp	r9, r1
 80005a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005a6:	b280      	uxth	r0, r0
 80005a8:	d93e      	bls.n	8000628 <__udivmoddi4+0x2e8>
 80005aa:	1879      	adds	r1, r7, r1
 80005ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80005b0:	d201      	bcs.n	80005b6 <__udivmoddi4+0x276>
 80005b2:	4589      	cmp	r9, r1
 80005b4:	d81f      	bhi.n	80005f6 <__udivmoddi4+0x2b6>
 80005b6:	eba1 0109 	sub.w	r1, r1, r9
 80005ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80005be:	fb09 f804 	mul.w	r8, r9, r4
 80005c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005c6:	b292      	uxth	r2, r2
 80005c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005cc:	4542      	cmp	r2, r8
 80005ce:	d229      	bcs.n	8000624 <__udivmoddi4+0x2e4>
 80005d0:	18ba      	adds	r2, r7, r2
 80005d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005d6:	d2c4      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005d8:	4542      	cmp	r2, r8
 80005da:	d2c2      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005dc:	f1a9 0102 	sub.w	r1, r9, #2
 80005e0:	443a      	add	r2, r7
 80005e2:	e7be      	b.n	8000562 <__udivmoddi4+0x222>
 80005e4:	45f0      	cmp	r8, lr
 80005e6:	d29d      	bcs.n	8000524 <__udivmoddi4+0x1e4>
 80005e8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005f0:	3801      	subs	r0, #1
 80005f2:	46e1      	mov	r9, ip
 80005f4:	e796      	b.n	8000524 <__udivmoddi4+0x1e4>
 80005f6:	eba7 0909 	sub.w	r9, r7, r9
 80005fa:	4449      	add	r1, r9
 80005fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	e7db      	b.n	80005c2 <__udivmoddi4+0x282>
 800060a:	4673      	mov	r3, lr
 800060c:	e77f      	b.n	800050e <__udivmoddi4+0x1ce>
 800060e:	4650      	mov	r0, sl
 8000610:	e766      	b.n	80004e0 <__udivmoddi4+0x1a0>
 8000612:	4608      	mov	r0, r1
 8000614:	e6fd      	b.n	8000412 <__udivmoddi4+0xd2>
 8000616:	443b      	add	r3, r7
 8000618:	3a02      	subs	r2, #2
 800061a:	e733      	b.n	8000484 <__udivmoddi4+0x144>
 800061c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000620:	443b      	add	r3, r7
 8000622:	e71c      	b.n	800045e <__udivmoddi4+0x11e>
 8000624:	4649      	mov	r1, r9
 8000626:	e79c      	b.n	8000562 <__udivmoddi4+0x222>
 8000628:	eba1 0109 	sub.w	r1, r1, r9
 800062c:	46c4      	mov	ip, r8
 800062e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000632:	fb09 f804 	mul.w	r8, r9, r4
 8000636:	e7c4      	b.n	80005c2 <__udivmoddi4+0x282>

08000638 <__aeabi_idiv0>:
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <LedCGIhandler>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// the actual function for handling CGI [= CGI #5 =]
const char* LedCGIhandler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
 8000648:	603b      	str	r3, [r7, #0]
	int i = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
	led1_off
 800064e:	2200      	movs	r2, #0
 8000650:	2101      	movs	r1, #1
 8000652:	4828      	ldr	r0, [pc, #160]	@ (80006f4 <LedCGIhandler+0xb8>)
 8000654:	f002 faee 	bl	8002c34 <HAL_GPIO_WritePin>
	;
	led2_off
 8000658:	2200      	movs	r2, #0
 800065a:	2180      	movs	r1, #128	@ 0x80
 800065c:	4825      	ldr	r0, [pc, #148]	@ (80006f4 <LedCGIhandler+0xb8>)
 800065e:	f002 fae9 	bl	8002c34 <HAL_GPIO_WritePin>
	;
	led3_off
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000668:	4822      	ldr	r0, [pc, #136]	@ (80006f4 <LedCGIhandler+0xb8>)
 800066a:	f002 fae3 	bl	8002c34 <HAL_GPIO_WritePin>
	;
	for (i = 0; i < iNumParams; i++) {
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
 8000672:	e036      	b.n	80006e2 <LedCGIhandler+0xa6>

		if (strcmp(pcParam[i], "led1") == 0) {
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	4413      	add	r3, r2
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	491e      	ldr	r1, [pc, #120]	@ (80006f8 <LedCGIhandler+0xbc>)
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff fddd 	bl	8000240 <strcmp>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d104      	bne.n	8000696 <LedCGIhandler+0x5a>

			led1_on
 800068c:	2201      	movs	r2, #1
 800068e:	2101      	movs	r1, #1
 8000690:	4818      	ldr	r0, [pc, #96]	@ (80006f4 <LedCGIhandler+0xb8>)
 8000692:	f002 facf 	bl	8002c34 <HAL_GPIO_WritePin>
			;
		}
		if (strcmp(pcParam[i], "led2") == 0) {
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4916      	ldr	r1, [pc, #88]	@ (80006fc <LedCGIhandler+0xc0>)
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff fdcc 	bl	8000240 <strcmp>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d104      	bne.n	80006b8 <LedCGIhandler+0x7c>

			led2_on
 80006ae:	2201      	movs	r2, #1
 80006b0:	2180      	movs	r1, #128	@ 0x80
 80006b2:	4810      	ldr	r0, [pc, #64]	@ (80006f4 <LedCGIhandler+0xb8>)
 80006b4:	f002 fabe 	bl	8002c34 <HAL_GPIO_WritePin>
			;
		}
		if (strcmp(pcParam[i], "led3") == 0) {
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	4413      	add	r3, r2
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	490f      	ldr	r1, [pc, #60]	@ (8000700 <LedCGIhandler+0xc4>)
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff fdbb 	bl	8000240 <strcmp>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d105      	bne.n	80006dc <LedCGIhandler+0xa0>

			led3_on
 80006d0:	2201      	movs	r2, #1
 80006d2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006d6:	4807      	ldr	r0, [pc, #28]	@ (80006f4 <LedCGIhandler+0xb8>)
 80006d8:	f002 faac 	bl	8002c34 <HAL_GPIO_WritePin>
	for (i = 0; i < iNumParams; i++) {
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	3301      	adds	r3, #1
 80006e0:	617b      	str	r3, [r7, #20]
 80006e2:	697a      	ldr	r2, [r7, #20]
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	429a      	cmp	r2, r3
 80006e8:	dbc4      	blt.n	8000674 <LedCGIhandler+0x38>
			;
		}
	}

	// the extension .shtml for SSI to work
	return "/index2.html";
 80006ea:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <LedCGIhandler+0xc8>)

} // END [= CGI #5 =]
 80006ec:	4618      	mov	r0, r3
 80006ee:	3718      	adds	r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40020400 	.word	0x40020400
 80006f8:	08012260 	.word	0x08012260
 80006fc:	08012268 	.word	0x08012268
 8000700:	08012270 	.word	0x08012270
 8000704:	08012278 	.word	0x08012278

08000708 <myCGIinit>:

// function to initialize CGI [= CGI #6 =]
void myCGIinit(void) {
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	//add LED control CGI to the table
	theCGItable[0] = LedCGI;
 800070c:	4b05      	ldr	r3, [pc, #20]	@ (8000724 <myCGIinit+0x1c>)
 800070e:	4a06      	ldr	r2, [pc, #24]	@ (8000728 <myCGIinit+0x20>)
 8000710:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000714:	e883 0003 	stmia.w	r3, {r0, r1}
	//give the table to the HTTP server
	http_set_cgi_handlers(theCGItable, 1);
 8000718:	2101      	movs	r1, #1
 800071a:	4802      	ldr	r0, [pc, #8]	@ (8000724 <myCGIinit+0x1c>)
 800071c:	f006 f8fa 	bl	8006914 <http_set_cgi_handlers>
} // END [= CGI #6 =]
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	200001e4 	.word	0x200001e4
 8000728:	08014eb4 	.word	0x08014eb4

0800072c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000730:	f000 fcf3 	bl	800111a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000734:	f000 f810 	bl	8000758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000738:	f000 f902 	bl	8000940 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800073c:	f000 f8a2 	bl	8000884 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000740:	f000 f8d0 	bl	80008e4 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 8000744:	f004 fcea 	bl	800511c <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  httpd_init();
 8000748:	f006 f8c4 	bl	80068d4 <httpd_init>
  myCGIinit();
 800074c:	f7ff ffdc 	bl	8000708 <myCGIinit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_LWIP_Process();
 8000750:	f004 fe24 	bl	800539c <MX_LWIP_Process>
 8000754:	e7fc      	b.n	8000750 <main+0x24>
	...

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b0b8      	sub	sp, #224	@ 0xe0
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000762:	2234      	movs	r2, #52	@ 0x34
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f010 fea7 	bl	80114ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800077c:	f107 0308 	add.w	r3, r7, #8
 8000780:	2290      	movs	r2, #144	@ 0x90
 8000782:	2100      	movs	r1, #0
 8000784:	4618      	mov	r0, r3
 8000786:	f010 fe98 	bl	80114ba <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800078a:	f002 fba7 	bl	8002edc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	4b3a      	ldr	r3, [pc, #232]	@ (8000878 <SystemClock_Config+0x120>)
 8000790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000792:	4a39      	ldr	r2, [pc, #228]	@ (8000878 <SystemClock_Config+0x120>)
 8000794:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000798:	6413      	str	r3, [r2, #64]	@ 0x40
 800079a:	4b37      	ldr	r3, [pc, #220]	@ (8000878 <SystemClock_Config+0x120>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a6:	4b35      	ldr	r3, [pc, #212]	@ (800087c <SystemClock_Config+0x124>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a34      	ldr	r2, [pc, #208]	@ (800087c <SystemClock_Config+0x124>)
 80007ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007b0:	6013      	str	r3, [r2, #0]
 80007b2:	4b32      	ldr	r3, [pc, #200]	@ (800087c <SystemClock_Config+0x124>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007be:	2301      	movs	r3, #1
 80007c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007c4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007cc:	2302      	movs	r3, #2
 80007ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007da:	2304      	movs	r3, #4
 80007dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80007e0:	23d8      	movs	r3, #216	@ 0xd8
 80007e2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80007ec:	2309      	movs	r3, #9
 80007ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 fbd0 	bl	8002f9c <HAL_RCC_OscConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000802:	f000 f93f 	bl	8000a84 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000806:	f002 fb79 	bl	8002efc <HAL_PWREx_EnableOverDrive>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000810:	f000 f938 	bl	8000a84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000814:	230f      	movs	r3, #15
 8000816:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081a:	2302      	movs	r3, #2
 800081c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000826:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800082a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800082e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000832:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000836:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800083a:	2107      	movs	r1, #7
 800083c:	4618      	mov	r0, r3
 800083e:	f002 fe5b 	bl	80034f8 <HAL_RCC_ClockConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000848:	f000 f91c 	bl	8000a84 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800084c:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <SystemClock_Config+0x128>)
 800084e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000850:	2300      	movs	r3, #0
 8000852:	657b      	str	r3, [r7, #84]	@ 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000854:	2300      	movs	r3, #0
 8000856:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800085a:	f107 0308 	add.w	r3, r7, #8
 800085e:	4618      	mov	r0, r3
 8000860:	f003 f870 	bl	8003944 <HAL_RCCEx_PeriphCLKConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0x116>
  {
    Error_Handler();
 800086a:	f000 f90b 	bl	8000a84 <Error_Handler>
  }
}
 800086e:	bf00      	nop
 8000870:	37e0      	adds	r7, #224	@ 0xe0
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800
 800087c:	40007000 	.word	0x40007000
 8000880:	00200100 	.word	0x00200100

08000884 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000888:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <MX_USART3_UART_Init+0x58>)
 800088a:	4a15      	ldr	r2, [pc, #84]	@ (80008e0 <MX_USART3_UART_Init+0x5c>)
 800088c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800088e:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <MX_USART3_UART_Init+0x58>)
 8000890:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000894:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <MX_USART3_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <MX_USART3_UART_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <MX_USART3_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <MX_USART3_UART_Init+0x58>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <MX_USART3_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <MX_USART3_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <MX_USART3_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c0:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <MX_USART3_UART_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	@ (80008dc <MX_USART3_UART_Init+0x58>)
 80008c8:	f003 fc64 	bl	8004194 <HAL_UART_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008d2:	f000 f8d7 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200001ec 	.word	0x200001ec
 80008e0:	40004800 	.word	0x40004800

080008e4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008e8:	4b14      	ldr	r3, [pc, #80]	@ (800093c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80008ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008f0:	4b12      	ldr	r3, [pc, #72]	@ (800093c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f2:	2206      	movs	r2, #6
 80008f4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008f6:	4b11      	ldr	r3, [pc, #68]	@ (800093c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f8:	2202      	movs	r2, #2
 80008fa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000902:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000904:	2202      	movs	r2, #2
 8000906:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000908:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090a:	2201      	movs	r2, #1
 800090c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	@ (800093c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000914:	4b09      	ldr	r3, [pc, #36]	@ (800093c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800091a:	4b08      	ldr	r3, [pc, #32]	@ (800093c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091c:	2201      	movs	r2, #1
 800091e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000920:	4b06      	ldr	r3, [pc, #24]	@ (800093c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	@ (800093c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000928:	f002 f99d 	bl	8002c66 <HAL_PCD_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000932:	f000 f8a7 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000274 	.word	0x20000274

08000940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08c      	sub	sp, #48	@ 0x30
 8000944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000956:	4b47      	ldr	r3, [pc, #284]	@ (8000a74 <MX_GPIO_Init+0x134>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a46      	ldr	r2, [pc, #280]	@ (8000a74 <MX_GPIO_Init+0x134>)
 800095c:	f043 0304 	orr.w	r3, r3, #4
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b44      	ldr	r3, [pc, #272]	@ (8000a74 <MX_GPIO_Init+0x134>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0304 	and.w	r3, r3, #4
 800096a:	61bb      	str	r3, [r7, #24]
 800096c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096e:	4b41      	ldr	r3, [pc, #260]	@ (8000a74 <MX_GPIO_Init+0x134>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a40      	ldr	r2, [pc, #256]	@ (8000a74 <MX_GPIO_Init+0x134>)
 8000974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b3e      	ldr	r3, [pc, #248]	@ (8000a74 <MX_GPIO_Init+0x134>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	4b3b      	ldr	r3, [pc, #236]	@ (8000a74 <MX_GPIO_Init+0x134>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a3a      	ldr	r2, [pc, #232]	@ (8000a74 <MX_GPIO_Init+0x134>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b38      	ldr	r3, [pc, #224]	@ (8000a74 <MX_GPIO_Init+0x134>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099e:	4b35      	ldr	r3, [pc, #212]	@ (8000a74 <MX_GPIO_Init+0x134>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a34      	ldr	r2, [pc, #208]	@ (8000a74 <MX_GPIO_Init+0x134>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b32      	ldr	r3, [pc, #200]	@ (8000a74 <MX_GPIO_Init+0x134>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b6:	4b2f      	ldr	r3, [pc, #188]	@ (8000a74 <MX_GPIO_Init+0x134>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	4a2e      	ldr	r2, [pc, #184]	@ (8000a74 <MX_GPIO_Init+0x134>)
 80009bc:	f043 0308 	orr.w	r3, r3, #8
 80009c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000a74 <MX_GPIO_Init+0x134>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	f003 0308 	and.w	r3, r3, #8
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ce:	4b29      	ldr	r3, [pc, #164]	@ (8000a74 <MX_GPIO_Init+0x134>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	4a28      	ldr	r2, [pc, #160]	@ (8000a74 <MX_GPIO_Init+0x134>)
 80009d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009da:	4b26      	ldr	r3, [pc, #152]	@ (8000a74 <MX_GPIO_Init+0x134>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80009ec:	4822      	ldr	r0, [pc, #136]	@ (8000a78 <MX_GPIO_Init+0x138>)
 80009ee:	f002 f921 	bl	8002c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2140      	movs	r1, #64	@ 0x40
 80009f6:	4821      	ldr	r0, [pc, #132]	@ (8000a7c <MX_GPIO_Init+0x13c>)
 80009f8:	f002 f91c 	bl	8002c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a02:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	481b      	ldr	r0, [pc, #108]	@ (8000a80 <MX_GPIO_Init+0x140>)
 8000a14:	f001 ff62 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a18:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4811      	ldr	r0, [pc, #68]	@ (8000a78 <MX_GPIO_Init+0x138>)
 8000a32:	f001 ff53 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a36:	2340      	movs	r3, #64	@ 0x40
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	480b      	ldr	r0, [pc, #44]	@ (8000a7c <MX_GPIO_Init+0x13c>)
 8000a4e:	f001 ff45 	bl	80028dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a52:	2380      	movs	r3, #128	@ 0x80
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	4805      	ldr	r0, [pc, #20]	@ (8000a7c <MX_GPIO_Init+0x13c>)
 8000a66:	f001 ff39 	bl	80028dc <HAL_GPIO_Init>

}
 8000a6a:	bf00      	nop
 8000a6c:	3730      	adds	r7, #48	@ 0x30
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020400 	.word	0x40020400
 8000a7c:	40021800 	.word	0x40021800
 8000a80:	40020800 	.word	0x40020800

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
	...

08000a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <HAL_MspInit+0x44>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ad8 <HAL_MspInit+0x44>)
 8000aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <HAL_MspInit+0x44>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <HAL_MspInit+0x44>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab6:	4a08      	ldr	r2, [pc, #32]	@ (8000ad8 <HAL_MspInit+0x44>)
 8000ab8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000abc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000abe:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <HAL_MspInit+0x44>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aca:	bf00      	nop
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800

08000adc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b0ae      	sub	sp, #184	@ 0xb8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	2290      	movs	r2, #144	@ 0x90
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f010 fcdc 	bl	80114ba <memset>
  if(huart->Instance==USART3)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a22      	ldr	r2, [pc, #136]	@ (8000b90 <HAL_UART_MspInit+0xb4>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d13c      	bne.n	8000b86 <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b10:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f002 ff12 	bl	8003944 <HAL_RCCEx_PeriphCLKConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b26:	f7ff ffad 	bl	8000a84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b94 <HAL_UART_MspInit+0xb8>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2e:	4a19      	ldr	r2, [pc, #100]	@ (8000b94 <HAL_UART_MspInit+0xb8>)
 8000b30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b36:	4b17      	ldr	r3, [pc, #92]	@ (8000b94 <HAL_UART_MspInit+0xb8>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b42:	4b14      	ldr	r3, [pc, #80]	@ (8000b94 <HAL_UART_MspInit+0xb8>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	4a13      	ldr	r2, [pc, #76]	@ (8000b94 <HAL_UART_MspInit+0xb8>)
 8000b48:	f043 0308 	orr.w	r3, r3, #8
 8000b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4e:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <HAL_UART_MspInit+0xb8>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	f003 0308 	and.w	r3, r3, #8
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b5a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b74:	2307      	movs	r3, #7
 8000b76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b7a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	@ (8000b98 <HAL_UART_MspInit+0xbc>)
 8000b82:	f001 feab 	bl	80028dc <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000b86:	bf00      	nop
 8000b88:	37b8      	adds	r7, #184	@ 0xb8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40004800 	.word	0x40004800
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020c00 	.word	0x40020c00

08000b9c <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b0ae      	sub	sp, #184	@ 0xb8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	2290      	movs	r2, #144	@ 0x90
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f010 fc7c 	bl	80114ba <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000bca:	d159      	bne.n	8000c80 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000bcc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000bd0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f002 feb1 	bl	8003944 <HAL_RCCEx_PeriphCLKConfig>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000be8:	f7ff ff4c 	bl	8000a84 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bec:	4b26      	ldr	r3, [pc, #152]	@ (8000c88 <HAL_PCD_MspInit+0xec>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf0:	4a25      	ldr	r2, [pc, #148]	@ (8000c88 <HAL_PCD_MspInit+0xec>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf8:	4b23      	ldr	r3, [pc, #140]	@ (8000c88 <HAL_PCD_MspInit+0xec>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfc:	f003 0301 	and.w	r3, r3, #1
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c04:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000c08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c1e:	230a      	movs	r3, #10
 8000c20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4818      	ldr	r0, [pc, #96]	@ (8000c8c <HAL_PCD_MspInit+0xf0>)
 8000c2c:	f001 fe56 	bl	80028dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c44:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4810      	ldr	r0, [pc, #64]	@ (8000c8c <HAL_PCD_MspInit+0xf0>)
 8000c4c:	f001 fe46 	bl	80028dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c50:	4b0d      	ldr	r3, [pc, #52]	@ (8000c88 <HAL_PCD_MspInit+0xec>)
 8000c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c54:	4a0c      	ldr	r2, [pc, #48]	@ (8000c88 <HAL_PCD_MspInit+0xec>)
 8000c56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c5a:	6353      	str	r3, [r2, #52]	@ 0x34
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c88 <HAL_PCD_MspInit+0xec>)
 8000c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	4b07      	ldr	r3, [pc, #28]	@ (8000c88 <HAL_PCD_MspInit+0xec>)
 8000c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6c:	4a06      	ldr	r2, [pc, #24]	@ (8000c88 <HAL_PCD_MspInit+0xec>)
 8000c6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c72:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c74:	4b04      	ldr	r3, [pc, #16]	@ (8000c88 <HAL_PCD_MspInit+0xec>)
 8000c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000c80:	bf00      	nop
 8000c82:	37b8      	adds	r7, #184	@ 0xb8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020000 	.word	0x40020000

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <NMI_Handler+0x4>

08000c98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <HardFault_Handler+0x4>

08000ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <MemManage_Handler+0x4>

08000ca8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cac:	bf00      	nop
 8000cae:	e7fd      	b.n	8000cac <BusFault_Handler+0x4>

08000cb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <UsageFault_Handler+0x4>

08000cb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce6:	f000 fa55 	bl	8001194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000cf4:	4802      	ldr	r0, [pc, #8]	@ (8000d00 <ETH_IRQHandler+0x10>)
 8000cf6:	f000 ff05 	bl	8001b04 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20005138 	.word	0x20005138

08000d04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return 1;
 8000d08:	2301      	movs	r3, #1
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <_kill>:

int _kill(int pid, int sig)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d1e:	4b05      	ldr	r3, [pc, #20]	@ (8000d34 <_kill+0x20>)
 8000d20:	2216      	movs	r2, #22
 8000d22:	601a      	str	r2, [r3, #0]
  return -1;
 8000d24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	20008840 	.word	0x20008840

08000d38 <_exit>:

void _exit (int status)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d40:	f04f 31ff 	mov.w	r1, #4294967295
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff ffe5 	bl	8000d14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d4a:	bf00      	nop
 8000d4c:	e7fd      	b.n	8000d4a <_exit+0x12>

08000d4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b086      	sub	sp, #24
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	60f8      	str	r0, [r7, #12]
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
 8000d5e:	e00a      	b.n	8000d76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d60:	f3af 8000 	nop.w
 8000d64:	4601      	mov	r1, r0
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	1c5a      	adds	r2, r3, #1
 8000d6a:	60ba      	str	r2, [r7, #8]
 8000d6c:	b2ca      	uxtb	r2, r1
 8000d6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	3301      	adds	r3, #1
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	697a      	ldr	r2, [r7, #20]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	dbf0      	blt.n	8000d60 <_read+0x12>
  }

  return len;
 8000d7e:	687b      	ldr	r3, [r7, #4]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3718      	adds	r7, #24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	e009      	b.n	8000dae <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	1c5a      	adds	r2, r3, #1
 8000d9e:	60ba      	str	r2, [r7, #8]
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	4618      	mov	r0, r3
 8000da4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	3301      	adds	r3, #1
 8000dac:	617b      	str	r3, [r7, #20]
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	dbf1      	blt.n	8000d9a <_write+0x12>
  }
  return len;
 8000db6:	687b      	ldr	r3, [r7, #4]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3718      	adds	r7, #24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <_close>:

int _close(int file)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000de8:	605a      	str	r2, [r3, #4]
  return 0;
 8000dea:	2300      	movs	r3, #0
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <_isatty>:

int _isatty(int file)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e00:	2301      	movs	r3, #1
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b085      	sub	sp, #20
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	60f8      	str	r0, [r7, #12]
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e1a:	2300      	movs	r3, #0
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b087      	sub	sp, #28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e30:	4a14      	ldr	r2, [pc, #80]	@ (8000e84 <_sbrk+0x5c>)
 8000e32:	4b15      	ldr	r3, [pc, #84]	@ (8000e88 <_sbrk+0x60>)
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e3c:	4b13      	ldr	r3, [pc, #76]	@ (8000e8c <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d102      	bne.n	8000e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e44:	4b11      	ldr	r3, [pc, #68]	@ (8000e8c <_sbrk+0x64>)
 8000e46:	4a12      	ldr	r2, [pc, #72]	@ (8000e90 <_sbrk+0x68>)
 8000e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4a:	4b10      	ldr	r3, [pc, #64]	@ (8000e8c <_sbrk+0x64>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d205      	bcs.n	8000e64 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000e58:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <_sbrk+0x6c>)
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e62:	e009      	b.n	8000e78 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e64:	4b09      	ldr	r3, [pc, #36]	@ (8000e8c <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6a:	4b08      	ldr	r3, [pc, #32]	@ (8000e8c <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	4a06      	ldr	r2, [pc, #24]	@ (8000e8c <_sbrk+0x64>)
 8000e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e76:	68fb      	ldr	r3, [r7, #12]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	371c      	adds	r7, #28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	20080000 	.word	0x20080000
 8000e88:	00000400 	.word	0x00000400
 8000e8c:	20000754 	.word	0x20000754
 8000e90:	20008850 	.word	0x20008850
 8000e94:	20008840 	.word	0x20008840

08000e98 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <SystemInit+0x20>)
 8000e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ea2:	4a05      	ldr	r2, [pc, #20]	@ (8000eb8 <SystemInit+0x20>)
 8000ea4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ea8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ebc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ef4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ec0:	f7ff ffea 	bl	8000e98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ec4:	480c      	ldr	r0, [pc, #48]	@ (8000ef8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ec6:	490d      	ldr	r1, [pc, #52]	@ (8000efc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ecc:	e002      	b.n	8000ed4 <LoopCopyDataInit>

08000ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed2:	3304      	adds	r3, #4

08000ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed8:	d3f9      	bcc.n	8000ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eda:	4a0a      	ldr	r2, [pc, #40]	@ (8000f04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000edc:	4c0a      	ldr	r4, [pc, #40]	@ (8000f08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee0:	e001      	b.n	8000ee6 <LoopFillZerobss>

08000ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee4:	3204      	adds	r2, #4

08000ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee8:	d3fb      	bcc.n	8000ee2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000eea:	f010 fb53 	bl	8011594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eee:	f7ff fc1d 	bl	800072c <main>
  bx  lr    
 8000ef2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ef4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000efc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000f00:	08015514 	.word	0x08015514
  ldr r2, =_sbss
 8000f04:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8000f08:	20008850 	.word	0x20008850

08000f0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f0c:	e7fe      	b.n	8000f0c <ADC_IRQHandler>

08000f0e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b083      	sub	sp, #12
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d00b      	beq.n	8000f36 <LAN8742_RegisterBusIO+0x28>
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d007      	beq.n	8000f36 <LAN8742_RegisterBusIO+0x28>
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <LAN8742_RegisterBusIO+0x28>
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	691b      	ldr	r3, [r3, #16]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d102      	bne.n	8000f3c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000f36:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3a:	e014      	b.n	8000f66 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685a      	ldr	r2, [r3, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	68da      	ldr	r2, [r3, #12]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	691a      	ldr	r2, [r3, #16]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d139      	bne.n	8001002 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d002      	beq.n	8000f9c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2220      	movs	r2, #32
 8000fa0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
 8000fa6:	e01c      	b.n	8000fe2 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	f107 020c 	add.w	r2, r7, #12
 8000fb0:	2112      	movs	r1, #18
 8000fb2:	6978      	ldr	r0, [r7, #20]
 8000fb4:	4798      	blx	r3
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	da03      	bge.n	8000fc4 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000fbc:	f06f 0304 	mvn.w	r3, #4
 8000fc0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000fc2:	e00b      	b.n	8000fdc <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f003 031f 	and.w	r3, r3, #31
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d105      	bne.n	8000fdc <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
         break;
 8000fda:	e005      	b.n	8000fe8 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	2b1f      	cmp	r3, #31
 8000fe6:	d9df      	bls.n	8000fa8 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b1f      	cmp	r3, #31
 8000fee:	d902      	bls.n	8000ff6 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000ff0:	f06f 0302 	mvn.w	r3, #2
 8000ff4:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d102      	bne.n	8001002 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2201      	movs	r2, #1
 8001000:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001002:	693b      	ldr	r3, [r7, #16]
 }
 8001004:	4618      	mov	r0, r3
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	6810      	ldr	r0, [r2, #0]
 8001020:	f107 020c 	add.w	r2, r7, #12
 8001024:	2101      	movs	r1, #1
 8001026:	4798      	blx	r3
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	da02      	bge.n	8001034 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800102e:	f06f 0304 	mvn.w	r3, #4
 8001032:	e06e      	b.n	8001112 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	6810      	ldr	r0, [r2, #0]
 800103c:	f107 020c 	add.w	r2, r7, #12
 8001040:	2101      	movs	r1, #1
 8001042:	4798      	blx	r3
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	da02      	bge.n	8001050 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800104a:	f06f 0304 	mvn.w	r3, #4
 800104e:	e060      	b.n	8001112 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800105a:	2301      	movs	r3, #1
 800105c:	e059      	b.n	8001112 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	6810      	ldr	r0, [r2, #0]
 8001066:	f107 020c 	add.w	r2, r7, #12
 800106a:	2100      	movs	r1, #0
 800106c:	4798      	blx	r3
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	da02      	bge.n	800107a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001074:	f06f 0304 	mvn.w	r3, #4
 8001078:	e04b      	b.n	8001112 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d11b      	bne.n	80010bc <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d006      	beq.n	800109c <LAN8742_GetLinkState+0x90>
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001098:	2302      	movs	r3, #2
 800109a:	e03a      	b.n	8001112 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e033      	b.n	8001112 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80010b4:	2304      	movs	r3, #4
 80010b6:	e02c      	b.n	8001112 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80010b8:	2305      	movs	r3, #5
 80010ba:	e02a      	b.n	8001112 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	6810      	ldr	r0, [r2, #0]
 80010c4:	f107 020c 	add.w	r2, r7, #12
 80010c8:	211f      	movs	r1, #31
 80010ca:	4798      	blx	r3
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	da02      	bge.n	80010d8 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80010d2:	f06f 0304 	mvn.w	r3, #4
 80010d6:	e01c      	b.n	8001112 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80010e2:	2306      	movs	r3, #6
 80010e4:	e015      	b.n	8001112 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f003 031c 	and.w	r3, r3, #28
 80010ec:	2b18      	cmp	r3, #24
 80010ee:	d101      	bne.n	80010f4 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80010f0:	2302      	movs	r3, #2
 80010f2:	e00e      	b.n	8001112 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f003 031c 	and.w	r3, r3, #28
 80010fa:	2b08      	cmp	r3, #8
 80010fc:	d101      	bne.n	8001102 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80010fe:	2303      	movs	r3, #3
 8001100:	e007      	b.n	8001112 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f003 031c 	and.w	r3, r3, #28
 8001108:	2b14      	cmp	r3, #20
 800110a:	d101      	bne.n	8001110 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800110c:	2304      	movs	r3, #4
 800110e:	e000      	b.n	8001112 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001110:	2305      	movs	r3, #5
    }
  }
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800111e:	2003      	movs	r0, #3
 8001120:	f000 f94c 	bl	80013bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001124:	2000      	movs	r0, #0
 8001126:	f000 f805 	bl	8001134 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800112a:	f7ff fcb3 	bl	8000a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	bd80      	pop	{r7, pc}

08001134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800113c:	4b12      	ldr	r3, [pc, #72]	@ (8001188 <HAL_InitTick+0x54>)
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <HAL_InitTick+0x58>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	4619      	mov	r1, r3
 8001146:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800114a:	fbb3 f3f1 	udiv	r3, r3, r1
 800114e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001152:	4618      	mov	r0, r3
 8001154:	f000 f967 	bl	8001426 <HAL_SYSTICK_Config>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e00e      	b.n	8001180 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b0f      	cmp	r3, #15
 8001166:	d80a      	bhi.n	800117e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001168:	2200      	movs	r2, #0
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	f000 f92f 	bl	80013d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001174:	4a06      	ldr	r2, [pc, #24]	@ (8001190 <HAL_InitTick+0x5c>)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800117a:	2300      	movs	r3, #0
 800117c:	e000      	b.n	8001180 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
}
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000000 	.word	0x20000000
 800118c:	20000008 	.word	0x20000008
 8001190:	20000004 	.word	0x20000004

08001194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001198:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <HAL_IncTick+0x20>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <HAL_IncTick+0x24>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4413      	add	r3, r2
 80011a4:	4a04      	ldr	r2, [pc, #16]	@ (80011b8 <HAL_IncTick+0x24>)
 80011a6:	6013      	str	r3, [r2, #0]
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000008 	.word	0x20000008
 80011b8:	20000758 	.word	0x20000758

080011bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return uwTick;
 80011c0:	4b03      	ldr	r3, [pc, #12]	@ (80011d0 <HAL_GetTick+0x14>)
 80011c2:	681b      	ldr	r3, [r3, #0]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	20000758 	.word	0x20000758

080011d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011dc:	f7ff ffee 	bl	80011bc <HAL_GetTick>
 80011e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ec:	d005      	beq.n	80011fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <HAL_Delay+0x44>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4413      	add	r3, r2
 80011f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011fa:	bf00      	nop
 80011fc:	f7ff ffde 	bl	80011bc <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	429a      	cmp	r2, r3
 800120a:	d8f7      	bhi.n	80011fc <HAL_Delay+0x28>
  {
  }
}
 800120c:	bf00      	nop
 800120e:	bf00      	nop
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000008 	.word	0x20000008

0800121c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800122c:	4b0b      	ldr	r3, [pc, #44]	@ (800125c <__NVIC_SetPriorityGrouping+0x40>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001238:	4013      	ands	r3, r2
 800123a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001244:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 8001246:	4313      	orrs	r3, r2
 8001248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124a:	4a04      	ldr	r2, [pc, #16]	@ (800125c <__NVIC_SetPriorityGrouping+0x40>)
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	60d3      	str	r3, [r2, #12]
}
 8001250:	bf00      	nop
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00
 8001260:	05fa0000 	.word	0x05fa0000

08001264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001268:	4b04      	ldr	r3, [pc, #16]	@ (800127c <__NVIC_GetPriorityGrouping+0x18>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	f003 0307 	and.w	r3, r3, #7
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	2b00      	cmp	r3, #0
 8001290:	db0b      	blt.n	80012aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	f003 021f 	and.w	r2, r3, #31
 8001298:	4907      	ldr	r1, [pc, #28]	@ (80012b8 <__NVIC_EnableIRQ+0x38>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	095b      	lsrs	r3, r3, #5
 80012a0:	2001      	movs	r0, #1
 80012a2:	fa00 f202 	lsl.w	r2, r0, r2
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000e100 	.word	0xe000e100

080012bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	6039      	str	r1, [r7, #0]
 80012c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	db0a      	blt.n	80012e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	490c      	ldr	r1, [pc, #48]	@ (8001308 <__NVIC_SetPriority+0x4c>)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	0112      	lsls	r2, r2, #4
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	440b      	add	r3, r1
 80012e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e4:	e00a      	b.n	80012fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4908      	ldr	r1, [pc, #32]	@ (800130c <__NVIC_SetPriority+0x50>)
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	3b04      	subs	r3, #4
 80012f4:	0112      	lsls	r2, r2, #4
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	440b      	add	r3, r1
 80012fa:	761a      	strb	r2, [r3, #24]
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000e100 	.word	0xe000e100
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001310:	b480      	push	{r7}
 8001312:	b089      	sub	sp, #36	@ 0x24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f1c3 0307 	rsb	r3, r3, #7
 800132a:	2b04      	cmp	r3, #4
 800132c:	bf28      	it	cs
 800132e:	2304      	movcs	r3, #4
 8001330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3304      	adds	r3, #4
 8001336:	2b06      	cmp	r3, #6
 8001338:	d902      	bls.n	8001340 <NVIC_EncodePriority+0x30>
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3b03      	subs	r3, #3
 800133e:	e000      	b.n	8001342 <NVIC_EncodePriority+0x32>
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	f04f 32ff 	mov.w	r2, #4294967295
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43da      	mvns	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	401a      	ands	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001358:	f04f 31ff 	mov.w	r1, #4294967295
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fa01 f303 	lsl.w	r3, r1, r3
 8001362:	43d9      	mvns	r1, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	4313      	orrs	r3, r2
         );
}
 800136a:	4618      	mov	r0, r3
 800136c:	3724      	adds	r7, #36	@ 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001388:	d301      	bcc.n	800138e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138a:	2301      	movs	r3, #1
 800138c:	e00f      	b.n	80013ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800138e:	4a0a      	ldr	r2, [pc, #40]	@ (80013b8 <SysTick_Config+0x40>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001396:	210f      	movs	r1, #15
 8001398:	f04f 30ff 	mov.w	r0, #4294967295
 800139c:	f7ff ff8e 	bl	80012bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a0:	4b05      	ldr	r3, [pc, #20]	@ (80013b8 <SysTick_Config+0x40>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a6:	4b04      	ldr	r3, [pc, #16]	@ (80013b8 <SysTick_Config+0x40>)
 80013a8:	2207      	movs	r2, #7
 80013aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	e000e010 	.word	0xe000e010

080013bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ff29 	bl	800121c <__NVIC_SetPriorityGrouping>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b086      	sub	sp, #24
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
 80013de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e4:	f7ff ff3e 	bl	8001264 <__NVIC_GetPriorityGrouping>
 80013e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	68b9      	ldr	r1, [r7, #8]
 80013ee:	6978      	ldr	r0, [r7, #20]
 80013f0:	f7ff ff8e 	bl	8001310 <NVIC_EncodePriority>
 80013f4:	4602      	mov	r2, r0
 80013f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fa:	4611      	mov	r1, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff5d 	bl	80012bc <__NVIC_SetPriority>
}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	4603      	mov	r3, r0
 8001412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff31 	bl	8001280 <__NVIC_EnableIRQ>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ffa2 	bl	8001378 <SysTick_Config>
 8001434:	4603      	mov	r3, r0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e086      	b.n	8001560 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001458:	2b00      	cmp	r3, #0
 800145a:	d106      	bne.n	800146a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2220      	movs	r2, #32
 8001460:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f004 f989 	bl	800577c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800146a:	4b3f      	ldr	r3, [pc, #252]	@ (8001568 <HAL_ETH_Init+0x128>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146e:	4a3e      	ldr	r2, [pc, #248]	@ (8001568 <HAL_ETH_Init+0x128>)
 8001470:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001474:	6453      	str	r3, [r2, #68]	@ 0x44
 8001476:	4b3c      	ldr	r3, [pc, #240]	@ (8001568 <HAL_ETH_Init+0x128>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001482:	4b3a      	ldr	r3, [pc, #232]	@ (800156c <HAL_ETH_Init+0x12c>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	4a39      	ldr	r2, [pc, #228]	@ (800156c <HAL_ETH_Init+0x12c>)
 8001488:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800148c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800148e:	4b37      	ldr	r3, [pc, #220]	@ (800156c <HAL_ETH_Init+0x12c>)
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	4935      	ldr	r1, [pc, #212]	@ (800156c <HAL_ETH_Init+0x12c>)
 8001498:	4313      	orrs	r3, r2
 800149a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800149c:	4b33      	ldr	r3, [pc, #204]	@ (800156c <HAL_ETH_Init+0x12c>)
 800149e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6812      	ldr	r2, [r2, #0]
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014b8:	f7ff fe80 	bl	80011bc <HAL_GetTick>
 80014bc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014be:	e011      	b.n	80014e4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80014c0:	f7ff fe7c 	bl	80011bc <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014ce:	d909      	bls.n	80014e4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2204      	movs	r2, #4
 80014d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	22e0      	movs	r2, #224	@ 0xe0
 80014dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e03d      	b.n	8001560 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1e4      	bne.n	80014c0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 ff34 	bl	8002364 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 ffdf 	bl	80024c0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f001 f835 	bl	8002572 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	461a      	mov	r2, r3
 800150e:	2100      	movs	r1, #0
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 ff9d 	bl	8002450 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001524:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	4b0f      	ldr	r3, [pc, #60]	@ (8001570 <HAL_ETH_Init+0x130>)
 8001534:	430b      	orrs	r3, r1
 8001536:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800154a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2210      	movs	r2, #16
 800155a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40023800 	.word	0x40023800
 800156c:	40013800 	.word	0x40013800
 8001570:	00020060 	.word	0x00020060

08001574 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001582:	2b10      	cmp	r3, #16
 8001584:	d15f      	bne.n	8001646 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2220      	movs	r2, #32
 800158a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2204      	movs	r2, #4
 8001598:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 fa2e 	bl	80019fc <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015a8:	2001      	movs	r0, #1
 80015aa:	f7ff fe13 	bl	80011d4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6812      	ldr	r2, [r2, #0]
 80015c4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015cc:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	6812      	ldr	r2, [r2, #0]
 80015dc:	f043 0302 	orr.w	r3, r3, #2
 80015e0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015e4:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 fd58 	bl	800209c <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 0208 	orr.w	r2, r2, #8
 80015fa:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001604:	2001      	movs	r0, #1
 8001606:	f7ff fde5 	bl	80011d4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f042 0204 	orr.w	r2, r2, #4
 8001620:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800162a:	69d9      	ldr	r1, [r3, #28]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b07      	ldr	r3, [pc, #28]	@ (8001650 <HAL_ETH_Start_IT+0xdc>)
 8001632:	430b      	orrs	r3, r1
 8001634:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001638:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2240      	movs	r2, #64	@ 0x40
 800163e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	e000      	b.n	8001648 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
  }
}
 8001648:	4618      	mov	r0, r3
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	0001a0c1 	.word	0x0001a0c1

08001654 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001662:	2b40      	cmp	r3, #64	@ 0x40
 8001664:	d16e      	bne.n	8001744 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2220      	movs	r2, #32
 800166a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001676:	69d9      	ldr	r1, [r3, #28]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b34      	ldr	r3, [pc, #208]	@ (8001750 <HAL_ETH_Stop_IT+0xfc>)
 800167e:	400b      	ands	r3, r1
 8001680:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001684:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001698:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800169c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	6812      	ldr	r2, [r2, #0]
 80016ac:	f023 0302 	bic.w	r3, r3, #2
 80016b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016b4:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0204 	bic.w	r2, r2, #4
 80016c4:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016ce:	2001      	movs	r0, #1
 80016d0:	f7ff fd80 	bl	80011d4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 fcdd 	bl	800209c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0208 	bic.w	r2, r2, #8
 80016f0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016fa:	2001      	movs	r0, #1
 80016fc:	f7ff fd6a 	bl	80011d4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	e00e      	b.n	800172c <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	3212      	adds	r2, #18
 8001714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001718:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	3301      	adds	r3, #1
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	2b03      	cmp	r3, #3
 8001730:	d9ed      	bls.n	800170e <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2210      	movs	r2, #16
 800173c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	e000      	b.n	8001746 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
  }
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	fffe5f3e 	.word	0xfffe5f3e

08001754 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d109      	bne.n	800177a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800176c:	f043 0201 	orr.w	r2, r3, #1
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e07c      	b.n	8001874 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001780:	2b40      	cmp	r3, #64	@ 0x40
 8001782:	d176      	bne.n	8001872 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001784:	2200      	movs	r2, #0
 8001786:	68b9      	ldr	r1, [r7, #8]
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f000 ff61 	bl	8002650 <ETH_Prepare_Tx_Descriptors>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d009      	beq.n	80017a8 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800179a:	f043 0202 	orr.w	r2, r3, #2
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e065      	b.n	8001874 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017a8:	f3bf 8f4f 	dsb	sy
}
 80017ac:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	3206      	adds	r2, #6
 80017b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ba:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c0:	1c5a      	adds	r2, r3, #1
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d904      	bls.n	80017d8 <HAL_ETH_Transmit+0x84>
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d2:	1f1a      	subs	r2, r3, #4
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	3106      	adds	r1, #6
 80017e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80017e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017ec:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80017ee:	f7ff fce5 	bl	80011bc <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80017f4:	e037      	b.n	8001866 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d011      	beq.n	800182c <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800180e:	f043 0208 	orr.w	r2, r3, #8
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001820:	695a      	ldr	r2, [r3, #20]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e023      	b.n	8001874 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001832:	d018      	beq.n	8001866 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001834:	f7ff fcc2 	bl	80011bc <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	429a      	cmp	r2, r3
 8001842:	d302      	bcc.n	800184a <HAL_ETH_Transmit+0xf6>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10d      	bne.n	8001866 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001850:	f043 0204 	orr.w	r2, r3, #4
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001860:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e006      	b.n	8001874 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	dbc3      	blt.n	80017f6 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800186e:	2300      	movs	r3, #0
 8001870:	e000      	b.n	8001874 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
  }
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b088      	sub	sp, #32
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800188a:	2300      	movs	r3, #0
 800188c:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d109      	bne.n	80018a8 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800189a:	f043 0201 	orr.w	r2, r3, #1
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0a4      	b.n	80019f2 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80018ae:	2b40      	cmp	r3, #64	@ 0x40
 80018b0:	d001      	beq.n	80018b6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e09d      	b.n	80019f2 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ba:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	3212      	adds	r2, #18
 80018c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80018cc:	f1c3 0304 	rsb	r3, r3, #4
 80018d0:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80018d2:	e066      	b.n	80019a2 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d007      	beq.n	80018f0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	69da      	ldr	r2, [r3, #28]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	699a      	ldr	r2, [r3, #24]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d103      	bne.n	8001904 <HAL_ETH_ReadData+0x88>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001900:	2b00      	cmp	r3, #0
 8001902:	d03c      	beq.n	800197e <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	0c1b      	lsrs	r3, r3, #16
 8001922:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001926:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001930:	2b00      	cmp	r3, #0
 8001932:	d005      	beq.n	8001940 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 800193c:	2301      	movs	r3, #1
 800193e:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001958:	461a      	mov	r2, r3
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	b29b      	uxth	r3, r3
 800195e:	f004 f8d7 	bl	8005b10 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	441a      	add	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	2200      	movs	r2, #0
 800197c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3301      	adds	r3, #1
 8001982:	61fb      	str	r3, [r7, #28]
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	2b03      	cmp	r3, #3
 8001988:	d902      	bls.n	8001990 <HAL_ETH_ReadData+0x114>
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3b04      	subs	r3, #4
 800198e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69fa      	ldr	r2, [r7, #28]
 8001994:	3212      	adds	r2, #18
 8001996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800199a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	3301      	adds	r3, #1
 80019a0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	db06      	blt.n	80019b8 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d202      	bcs.n	80019b8 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80019b2:	7cfb      	ldrb	r3, [r7, #19]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d08d      	beq.n	80018d4 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	441a      	add	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d002      	beq.n	80019d2 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 f815 	bl	80019fc <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69fa      	ldr	r2, [r7, #28]
 80019d6:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80019d8:	7cfb      	ldrb	r3, [r7, #19]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d108      	bne.n	80019f0 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80019ec:	2300      	movs	r3, #0
 80019ee:	e000      	b.n	80019f2 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3720      	adds	r7, #32
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b088      	sub	sp, #32
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001a10:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69fa      	ldr	r2, [r7, #28]
 8001a16:	3212      	adds	r2, #18
 8001a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a1c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a22:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001a24:	e042      	b.n	8001aac <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d112      	bne.n	8001a54 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001a2e:	f107 0308 	add.w	r3, r7, #8
 8001a32:	4618      	mov	r0, r3
 8001a34:	f004 f83c 	bl	8005ab0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d102      	bne.n	8001a44 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	74fb      	strb	r3, [r7, #19]
 8001a42:	e007      	b.n	8001a54 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	461a      	mov	r2, r3
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001a54:	7cfb      	ldrb	r3, [r7, #19]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d028      	beq.n	8001aac <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d106      	bne.n	8001a70 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	695a      	ldr	r2, [r3, #20]
 8001a66:	4b26      	ldr	r3, [pc, #152]	@ (8001b00 <ETH_UpdateDescriptor+0x104>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	6053      	str	r3, [r2, #4]
 8001a6e:	e005      	b.n	8001a7c <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	61fb      	str	r3, [r7, #28]
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	2b03      	cmp	r3, #3
 8001a92:	d902      	bls.n	8001a9a <ETH_UpdateDescriptor+0x9e>
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	3b04      	subs	r3, #4
 8001a98:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69fa      	ldr	r2, [r7, #28]
 8001a9e:	3212      	adds	r2, #18
 8001aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa4:	617b      	str	r3, [r7, #20]
      desccount--;
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d002      	beq.n	8001ab8 <ETH_UpdateDescriptor+0xbc>
 8001ab2:	7cfb      	ldrb	r3, [r7, #19]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1b6      	bne.n	8001a26 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d01a      	beq.n	8001af8 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3303      	adds	r3, #3
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001acc:	f3bf 8f5f 	dmb	sy
}
 8001ad0:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6919      	ldr	r1, [r3, #16]
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	18ca      	adds	r2, r1, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aea:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	69fa      	ldr	r2, [r7, #28]
 8001af0:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001af8:	bf00      	nop
 8001afa:	3720      	adds	r7, #32
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	80004000 	.word	0x80004000

08001b04 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b12:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8001b2c:	4b4b      	ldr	r3, [pc, #300]	@ (8001c5c <HAL_ETH_IRQHandler+0x158>)
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00e      	beq.n	8001b5a <HAL_ETH_IRQHandler+0x56>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d009      	beq.n	8001b5a <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4b43      	ldr	r3, [pc, #268]	@ (8001c60 <HAL_ETH_IRQHandler+0x15c>)
 8001b52:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f891 	bl	8001c7c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d00f      	beq.n	8001b84 <HAL_ETH_IRQHandler+0x80>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d00a      	beq.n	8001b84 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b76:	461a      	mov	r2, r3
 8001b78:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001b7c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 f872 	bl	8001c68 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d042      	beq.n	8001c14 <HAL_ETH_IRQHandler+0x110>
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d03d      	beq.n	8001c14 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b9e:	f043 0208 	orr.w	r2, r3, #8
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d01a      	beq.n	8001be8 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bba:	695a      	ldr	r2, [r3, #20]
 8001bbc:	4b29      	ldr	r3, [pc, #164]	@ (8001c64 <HAL_ETH_IRQHandler+0x160>)
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bce:	69db      	ldr	r3, [r3, #28]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8001bd8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001bdc:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	22e0      	movs	r2, #224	@ 0xe0
 8001be2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001be6:	e012      	b.n	8001c0e <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bf0:	695a      	ldr	r2, [r3, #20]
 8001bf2:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c06:	461a      	mov	r2, r3
 8001c08:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001c0c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f83e 	bl	8001c90 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00e      	beq.n	8001c3c <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c24:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f838 	bl	8001ca4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d006      	beq.n	8001c54 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001c46:	4b05      	ldr	r3, [pc, #20]	@ (8001c5c <HAL_ETH_IRQHandler+0x158>)
 8001c48:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001c4c:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f832 	bl	8001cb8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001c54:	bf00      	nop
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40013c00 	.word	0x40013c00
 8001c60:	00010040 	.word	0x00010040
 8001c64:	007e2000 	.word	0x007e2000

08001c68 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
 8001cd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f003 031c 	and.w	r3, r3, #28
 8001ce8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	02db      	lsls	r3, r3, #11
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	019b      	lsls	r3, r3, #6
 8001cfa:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f023 0302 	bic.w	r3, r3, #2
 8001d0a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001d1c:	f7ff fa4e 	bl	80011bc <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d22:	e00d      	b.n	8001d40 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001d24:	f7ff fa4a 	bl	80011bc <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d32:	d301      	bcc.n	8001d38 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e010      	b.n	8001d5a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1ec      	bne.n	8001d24 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	461a      	mov	r2, r3
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b086      	sub	sp, #24
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	60f8      	str	r0, [r7, #12]
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
 8001d6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f003 031c 	and.w	r3, r3, #28
 8001d7e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	02db      	lsls	r3, r3, #11
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	019b      	lsls	r3, r3, #6
 8001d90:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f043 0302 	orr.w	r3, r3, #2
 8001da0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dbc:	f7ff f9fe 	bl	80011bc <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dc2:	e00d      	b.n	8001de0 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001dc4:	f7ff f9fa 	bl	80011bc <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dd2:	d301      	bcc.n	8001dd8 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e009      	b.n	8001dec <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1ec      	bne.n	8001dc4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e0e6      	b.n	8001fd6 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0310 	and.w	r3, r3, #16
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	bf14      	ite	ne
 8001e16:	2301      	movne	r3, #1
 8001e18:	2300      	moveq	r3, #0
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	bf0c      	ite	eq
 8001e40:	2301      	moveq	r3, #1
 8001e42:	2300      	movne	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	461a      	mov	r2, r3
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	bf14      	ite	ne
 8001e5c:	2301      	movne	r3, #1
 8001e5e:	2300      	moveq	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	bf0c      	ite	eq
 8001e76:	2301      	moveq	r3, #1
 8001e78:	2300      	movne	r3, #0
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	bf14      	ite	ne
 8001e90:	2301      	movne	r3, #1
 8001e92:	2300      	moveq	r3, #0
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	461a      	mov	r2, r3
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	bf0c      	ite	eq
 8001ec6:	2301      	moveq	r3, #1
 8001ec8:	2300      	movne	r3, #0
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	461a      	mov	r2, r3
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	bf0c      	ite	eq
 8001ee0:	2301      	moveq	r3, #1
 8001ee2:	2300      	movne	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	bf14      	ite	ne
 8001efa:	2301      	movne	r3, #1
 8001efc:	2300      	moveq	r3, #0
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	461a      	mov	r2, r3
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	bf14      	ite	ne
 8001f22:	2301      	movne	r3, #1
 8001f24:	2300      	moveq	r3, #0
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	461a      	mov	r2, r3
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	bf14      	ite	ne
 8001f3c:	2301      	movne	r3, #1
 8001f3e:	2300      	moveq	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	461a      	mov	r2, r3
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	bf14      	ite	ne
 8001f56:	2301      	movne	r3, #1
 8001f58:	2300      	moveq	r3, #0
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	bf0c      	ite	eq
 8001f72:	2301      	moveq	r3, #1
 8001f74:	2300      	movne	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	0c1b      	lsrs	r3, r3, #16
 8001f96:	b29a      	uxth	r2, r3
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	bf14      	ite	ne
 8001faa:	2301      	movne	r3, #1
 8001fac:	2300      	moveq	r3, #0
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	bf14      	ite	ne
 8001fc6:	2301      	movne	r3, #1
 8001fc8:	2300      	moveq	r3, #0
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e00b      	b.n	800200e <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ffc:	2b10      	cmp	r3, #16
 8001ffe:	d105      	bne.n	800200c <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002000:	6839      	ldr	r1, [r7, #0]
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f870 	bl	80020e8 <ETH_SetMACConfig>

    return HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	e000      	b.n	800200e <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
  }
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
	...

08002018 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f023 031c 	bic.w	r3, r3, #28
 800202e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002030:	f001 fc54 	bl	80038dc <HAL_RCC_GetHCLKFreq>
 8002034:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	4a14      	ldr	r2, [pc, #80]	@ (800208c <HAL_ETH_SetMDIOClockRange+0x74>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d804      	bhi.n	8002048 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f043 0308 	orr.w	r3, r3, #8
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	e019      	b.n	800207c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	4a11      	ldr	r2, [pc, #68]	@ (8002090 <HAL_ETH_SetMDIOClockRange+0x78>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d204      	bcs.n	800205a <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f043 030c 	orr.w	r3, r3, #12
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	e010      	b.n	800207c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	4a0d      	ldr	r2, [pc, #52]	@ (8002094 <HAL_ETH_SetMDIOClockRange+0x7c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d90c      	bls.n	800207c <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	4a0c      	ldr	r2, [pc, #48]	@ (8002098 <HAL_ETH_SetMDIOClockRange+0x80>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d804      	bhi.n	8002074 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f043 0304 	orr.w	r3, r3, #4
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	e003      	b.n	800207c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f043 0310 	orr.w	r3, r3, #16
 800207a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	611a      	str	r2, [r3, #16]
}
 8002084:	bf00      	nop
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	02160ebf 	.word	0x02160ebf
 8002090:	03938700 	.word	0x03938700
 8002094:	05f5e0ff 	.word	0x05f5e0ff
 8002098:	08f0d17f 	.word	0x08f0d17f

0800209c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6812      	ldr	r2, [r2, #0]
 80020b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020be:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020cc:	2001      	movs	r0, #1
 80020ce:	f7ff f881 	bl	80011d4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020dc:	6193      	str	r3, [r2, #24]
}
 80020de:	bf00      	nop
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4b53      	ldr	r3, [pc, #332]	@ (800224c <ETH_SetMACConfig+0x164>)
 80020fe:	4013      	ands	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	7b9b      	ldrb	r3, [r3, #14]
 8002106:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	7c12      	ldrb	r2, [r2, #16]
 800210c:	2a00      	cmp	r2, #0
 800210e:	d102      	bne.n	8002116 <ETH_SetMACConfig+0x2e>
 8002110:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002114:	e000      	b.n	8002118 <ETH_SetMACConfig+0x30>
 8002116:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002118:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	7c52      	ldrb	r2, [r2, #17]
 800211e:	2a00      	cmp	r2, #0
 8002120:	d102      	bne.n	8002128 <ETH_SetMACConfig+0x40>
 8002122:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002126:	e000      	b.n	800212a <ETH_SetMACConfig+0x42>
 8002128:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800212a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002130:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	7fdb      	ldrb	r3, [r3, #31]
 8002136:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002138:	431a      	orrs	r2, r3
                        macconf->Speed |
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800213e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	7f92      	ldrb	r2, [r2, #30]
 8002144:	2a00      	cmp	r2, #0
 8002146:	d102      	bne.n	800214e <ETH_SetMACConfig+0x66>
 8002148:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800214c:	e000      	b.n	8002150 <ETH_SetMACConfig+0x68>
 800214e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002150:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	7f1b      	ldrb	r3, [r3, #28]
 8002156:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002158:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800215e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	791b      	ldrb	r3, [r3, #4]
 8002164:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002166:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800216e:	2a00      	cmp	r2, #0
 8002170:	d102      	bne.n	8002178 <ETH_SetMACConfig+0x90>
 8002172:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002176:	e000      	b.n	800217a <ETH_SetMACConfig+0x92>
 8002178:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800217a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	7bdb      	ldrb	r3, [r3, #15]
 8002180:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002182:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002188:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002190:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002192:	4313      	orrs	r3, r2
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	4313      	orrs	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021aa:	2001      	movs	r0, #1
 80021ac:	f7ff f812 	bl	80011d4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80021c6:	4013      	ands	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021ce:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80021d6:	2a00      	cmp	r2, #0
 80021d8:	d101      	bne.n	80021de <ETH_SetMACConfig+0xf6>
 80021da:	2280      	movs	r2, #128	@ 0x80
 80021dc:	e000      	b.n	80021e0 <ETH_SetMACConfig+0xf8>
 80021de:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80021e0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80021e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80021ee:	2a01      	cmp	r2, #1
 80021f0:	d101      	bne.n	80021f6 <ETH_SetMACConfig+0x10e>
 80021f2:	2208      	movs	r2, #8
 80021f4:	e000      	b.n	80021f8 <ETH_SetMACConfig+0x110>
 80021f6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80021f8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002200:	2a01      	cmp	r2, #1
 8002202:	d101      	bne.n	8002208 <ETH_SetMACConfig+0x120>
 8002204:	2204      	movs	r2, #4
 8002206:	e000      	b.n	800220a <ETH_SetMACConfig+0x122>
 8002208:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800220a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002212:	2a01      	cmp	r2, #1
 8002214:	d101      	bne.n	800221a <ETH_SetMACConfig+0x132>
 8002216:	2202      	movs	r2, #2
 8002218:	e000      	b.n	800221c <ETH_SetMACConfig+0x134>
 800221a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800221c:	4313      	orrs	r3, r2
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	4313      	orrs	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002234:	2001      	movs	r0, #1
 8002236:	f7fe ffcd 	bl	80011d4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	619a      	str	r2, [r3, #24]
}
 8002242:	bf00      	nop
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	fd20810f 	.word	0xfd20810f

08002250 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	4b3d      	ldr	r3, [pc, #244]	@ (8002360 <ETH_SetDMAConfig+0x110>)
 800226a:	4013      	ands	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	7b1b      	ldrb	r3, [r3, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d102      	bne.n	800227c <ETH_SetDMAConfig+0x2c>
 8002276:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800227a:	e000      	b.n	800227e <ETH_SetDMAConfig+0x2e>
 800227c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	7b5b      	ldrb	r3, [r3, #13]
 8002282:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002284:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	7f52      	ldrb	r2, [r2, #29]
 800228a:	2a00      	cmp	r2, #0
 800228c:	d102      	bne.n	8002294 <ETH_SetDMAConfig+0x44>
 800228e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002292:	e000      	b.n	8002296 <ETH_SetDMAConfig+0x46>
 8002294:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002296:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	7b9b      	ldrb	r3, [r3, #14]
 800229c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800229e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80022a4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	7f1b      	ldrb	r3, [r3, #28]
 80022aa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80022ac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	7f9b      	ldrb	r3, [r3, #30]
 80022b2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80022b4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80022ba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022c2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022c4:	4313      	orrs	r3, r2
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022d4:	461a      	mov	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022e6:	2001      	movs	r0, #1
 80022e8:	f7fe ff74 	bl	80011d4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022f4:	461a      	mov	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	791b      	ldrb	r3, [r3, #4]
 80022fe:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002304:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800230a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002310:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002318:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800231a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002320:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002322:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002328:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6812      	ldr	r2, [r2, #0]
 800232e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002332:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002336:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002344:	2001      	movs	r0, #1
 8002346:	f7fe ff45 	bl	80011d4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002352:	461a      	mov	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6013      	str	r3, [r2, #0]
}
 8002358:	bf00      	nop
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	f8de3f23 	.word	0xf8de3f23

08002364 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b0a6      	sub	sp, #152	@ 0x98
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800236c:	2301      	movs	r3, #1
 800236e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002372:	2301      	movs	r3, #1
 8002374:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002378:	2300      	movs	r3, #0
 800237a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800237c:	2300      	movs	r3, #0
 800237e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002382:	2301      	movs	r3, #1
 8002384:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002388:	2300      	movs	r3, #0
 800238a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800238e:	2301      	movs	r3, #1
 8002390:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002394:	2301      	movs	r3, #1
 8002396:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800239a:	2300      	movs	r3, #0
 800239c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80023a0:	2300      	movs	r3, #0
 80023a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80023a6:	2300      	movs	r3, #0
 80023a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80023aa:	2300      	movs	r3, #0
 80023ac:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80023ba:	2300      	movs	r3, #0
 80023bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80023c0:	2300      	movs	r3, #0
 80023c2:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80023c6:	2300      	movs	r3, #0
 80023c8:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80023cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80023d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80023d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80023d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80023d8:	2300      	movs	r3, #0
 80023da:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80023de:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80023e2:	4619      	mov	r1, r3
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7ff fe7f 	bl	80020e8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80023ea:	2301      	movs	r3, #1
 80023ec:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80023ee:	2301      	movs	r3, #1
 80023f0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80023f2:	2301      	movs	r3, #1
 80023f4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80023f8:	2301      	movs	r3, #1
 80023fa:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002400:	2300      	movs	r3, #0
 8002402:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002406:	2300      	movs	r3, #0
 8002408:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800240c:	2300      	movs	r3, #0
 800240e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002410:	2301      	movs	r3, #1
 8002412:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002416:	2301      	movs	r3, #1
 8002418:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800241a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800241e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002420:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002424:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002426:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800242a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800242c:	2301      	movs	r3, #1
 800242e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002432:	2300      	movs	r3, #0
 8002434:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002436:	2300      	movs	r3, #0
 8002438:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800243a:	f107 0308 	add.w	r3, r7, #8
 800243e:	4619      	mov	r1, r3
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7ff ff05 	bl	8002250 <ETH_SetDMAConfig>
}
 8002446:	bf00      	nop
 8002448:	3798      	adds	r7, #152	@ 0x98
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002450:	b480      	push	{r7}
 8002452:	b087      	sub	sp, #28
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3305      	adds	r3, #5
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	021b      	lsls	r3, r3, #8
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	3204      	adds	r2, #4
 8002468:	7812      	ldrb	r2, [r2, #0]
 800246a:	4313      	orrs	r3, r2
 800246c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	4b11      	ldr	r3, [pc, #68]	@ (80024b8 <ETH_MACAddressConfig+0x68>)
 8002472:	4413      	add	r3, r2
 8002474:	461a      	mov	r2, r3
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	3303      	adds	r3, #3
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	061a      	lsls	r2, r3, #24
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3302      	adds	r3, #2
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	041b      	lsls	r3, r3, #16
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3301      	adds	r3, #1
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	021b      	lsls	r3, r3, #8
 8002494:	4313      	orrs	r3, r2
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	7812      	ldrb	r2, [r2, #0]
 800249a:	4313      	orrs	r3, r2
 800249c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	4b06      	ldr	r3, [pc, #24]	@ (80024bc <ETH_MACAddressConfig+0x6c>)
 80024a2:	4413      	add	r3, r2
 80024a4:	461a      	mov	r2, r3
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	6013      	str	r3, [r2, #0]
}
 80024aa:	bf00      	nop
 80024ac:	371c      	adds	r7, #28
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	40028040 	.word	0x40028040
 80024bc:	40028044 	.word	0x40028044

080024c0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	e03e      	b.n	800254c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68d9      	ldr	r1, [r3, #12]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	440b      	add	r3, r1
 80024de:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	2200      	movs	r2, #0
 80024ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2200      	movs	r2, #0
 80024f0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2200      	movs	r2, #0
 80024f6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80024f8:	68b9      	ldr	r1, [r7, #8]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	3206      	adds	r2, #6
 8002500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d80c      	bhi.n	8002530 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68d9      	ldr	r1, [r3, #12]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	1c5a      	adds	r2, r3, #1
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	440b      	add	r3, r1
 8002528:	461a      	mov	r2, r3
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	e004      	b.n	800253a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	461a      	mov	r2, r3
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	3301      	adds	r3, #1
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2b03      	cmp	r3, #3
 8002550:	d9bd      	bls.n	80024ce <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002564:	611a      	str	r2, [r3, #16]
}
 8002566:	bf00      	nop
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002572:	b480      	push	{r7}
 8002574:	b085      	sub	sp, #20
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	e048      	b.n	8002612 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6919      	ldr	r1, [r3, #16]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	4613      	mov	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	440b      	add	r3, r1
 8002590:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	2200      	movs	r2, #0
 800259c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	2200      	movs	r2, #0
 80025a2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	2200      	movs	r2, #0
 80025a8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2200      	movs	r2, #0
 80025ae:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2200      	movs	r2, #0
 80025b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80025bc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80025d6:	68b9      	ldr	r1, [r7, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	3212      	adds	r2, #18
 80025de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d80c      	bhi.n	8002602 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6919      	ldr	r1, [r3, #16]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	440b      	add	r3, r1
 80025fa:	461a      	mov	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	60da      	str	r2, [r3, #12]
 8002600:	e004      	b.n	800260c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	461a      	mov	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	3301      	adds	r3, #1
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2b03      	cmp	r3, #3
 8002616:	d9b3      	bls.n	8002580 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691a      	ldr	r2, [r3, #16]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002642:	60da      	str	r2, [r3, #12]
}
 8002644:	bf00      	nop
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002650:	b480      	push	{r7}
 8002652:	b091      	sub	sp, #68	@ 0x44
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	3318      	adds	r3, #24
 8002660:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800266e:	2300      	movs	r3, #0
 8002670:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002674:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800267a:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002682:	2300      	movs	r3, #0
 8002684:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800268e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002692:	d007      	beq.n	80026a4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002694:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002698:	3304      	adds	r3, #4
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80026a4:	2302      	movs	r3, #2
 80026a6:	e111      	b.n	80028cc <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 80026a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026aa:	3301      	adds	r3, #1
 80026ac:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80026ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	461a      	mov	r2, r3
 80026b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026b6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80026b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	4b86      	ldr	r3, [pc, #536]	@ (80028d8 <ETH_Prepare_Tx_Descriptors+0x288>)
 80026be:	4013      	ands	r3, r2
 80026c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026c2:	6852      	ldr	r2, [r2, #4]
 80026c4:	431a      	orrs	r2, r3
 80026c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d008      	beq.n	80026e8 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80026d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	431a      	orrs	r2, r3
 80026e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0320 	and.w	r3, r3, #32
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d008      	beq.n	8002706 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80026f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	431a      	orrs	r2, r3
 8002702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002704:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0304 	and.w	r3, r3, #4
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800271a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800271c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800271e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002728:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800272a:	e082      	b.n	8002832 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800272c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002736:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d006      	beq.n	800274c <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800273e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	e005      	b.n	8002758 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800274c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002756:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800275a:	3301      	adds	r3, #1
 800275c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800275e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002760:	2b03      	cmp	r3, #3
 8002762:	d902      	bls.n	800276a <ETH_Prepare_Tx_Descriptors+0x11a>
 8002764:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002766:	3b04      	subs	r3, #4
 8002768:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800276a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800276e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002772:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800277c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002780:	d007      	beq.n	8002792 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002782:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002786:	3304      	adds	r3, #4
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d029      	beq.n	80027e6 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8002792:	6a3b      	ldr	r3, [r7, #32]
 8002794:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002798:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800279a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800279e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80027a0:	2300      	movs	r3, #0
 80027a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027a4:	e019      	b.n	80027da <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 80027a6:	f3bf 8f5f 	dmb	sy
}
 80027aa:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80027ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80027b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027b6:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80027b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027ba:	3301      	adds	r3, #1
 80027bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	d902      	bls.n	80027ca <ETH_Prepare_Tx_Descriptors+0x17a>
 80027c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027c6:	3b04      	subs	r3, #4
 80027c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80027ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80027ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027d2:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80027d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027d6:	3301      	adds	r3, #1
 80027d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80027dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027de:	429a      	cmp	r2, r3
 80027e0:	d3e1      	bcc.n	80027a6 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 80027e2:	2302      	movs	r3, #2
 80027e4:	e072      	b.n	80028cc <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80027e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80027ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027f0:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 80027f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027f4:	3301      	adds	r3, #1
 80027f6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80027f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80027fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002806:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	4b32      	ldr	r3, [pc, #200]	@ (80028d8 <ETH_Prepare_Tx_Descriptors+0x288>)
 800280e:	4013      	ands	r3, r2
 8002810:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002812:	6852      	ldr	r2, [r2, #4]
 8002814:	431a      	orrs	r2, r3
 8002816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002818:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800281a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800281c:	3301      	adds	r3, #1
 800281e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002820:	f3bf 8f5f 	dmb	sy
}
 8002824:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800282e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002830:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	f47f af78 	bne.w	800272c <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d006      	beq.n	8002850 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800284a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	e005      	b.n	800285c <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800285a:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800285c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002866:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286a:	6a3a      	ldr	r2, [r7, #32]
 800286c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002870:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002872:	f3bf 8f5f 	dmb	sy
}
 8002876:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002882:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002886:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002888:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800288a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800288c:	3304      	adds	r3, #4
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002896:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002898:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800289a:	f3ef 8310 	mrs	r3, PRIMASK
 800289e:	613b      	str	r3, [r7, #16]
  return(result);
 80028a0:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80028a2:	61fb      	str	r3, [r7, #28]
 80028a4:	2301      	movs	r3, #1
 80028a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f383 8810 	msr	PRIMASK, r3
}
 80028ae:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80028b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b6:	4413      	add	r3, r2
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	f383 8810 	msr	PRIMASK, r3
}
 80028c8:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3744      	adds	r7, #68	@ 0x44
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr
 80028d8:	ffffe000 	.word	0xffffe000

080028dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028dc:	b480      	push	{r7}
 80028de:	b089      	sub	sp, #36	@ 0x24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80028ee:	2300      	movs	r3, #0
 80028f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
 80028fa:	e175      	b.n	8002be8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80028fc:	2201      	movs	r2, #1
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	4013      	ands	r3, r2
 800290e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	429a      	cmp	r2, r3
 8002916:	f040 8164 	bne.w	8002be2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	2b01      	cmp	r3, #1
 8002924:	d005      	beq.n	8002932 <HAL_GPIO_Init+0x56>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d130      	bne.n	8002994 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	2203      	movs	r2, #3
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43db      	mvns	r3, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4013      	ands	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4313      	orrs	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002968:	2201      	movs	r2, #1
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	f003 0201 	and.w	r2, r3, #1
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	2b03      	cmp	r3, #3
 800299e:	d017      	beq.n	80029d0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	2203      	movs	r2, #3
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 0303 	and.w	r3, r3, #3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d123      	bne.n	8002a24 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	08da      	lsrs	r2, r3, #3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3208      	adds	r2, #8
 80029e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	220f      	movs	r2, #15
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	691a      	ldr	r2, [r3, #16]
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	08da      	lsrs	r2, r3, #3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3208      	adds	r2, #8
 8002a1e:	69b9      	ldr	r1, [r7, #24]
 8002a20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	2203      	movs	r2, #3
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 0203 	and.w	r2, r3, #3
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 80be 	beq.w	8002be2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a66:	4b66      	ldr	r3, [pc, #408]	@ (8002c00 <HAL_GPIO_Init+0x324>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6a:	4a65      	ldr	r2, [pc, #404]	@ (8002c00 <HAL_GPIO_Init+0x324>)
 8002a6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a70:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a72:	4b63      	ldr	r3, [pc, #396]	@ (8002c00 <HAL_GPIO_Init+0x324>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002a7e:	4a61      	ldr	r2, [pc, #388]	@ (8002c04 <HAL_GPIO_Init+0x328>)
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	089b      	lsrs	r3, r3, #2
 8002a84:	3302      	adds	r3, #2
 8002a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	220f      	movs	r2, #15
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a58      	ldr	r2, [pc, #352]	@ (8002c08 <HAL_GPIO_Init+0x32c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d037      	beq.n	8002b1a <HAL_GPIO_Init+0x23e>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a57      	ldr	r2, [pc, #348]	@ (8002c0c <HAL_GPIO_Init+0x330>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d031      	beq.n	8002b16 <HAL_GPIO_Init+0x23a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a56      	ldr	r2, [pc, #344]	@ (8002c10 <HAL_GPIO_Init+0x334>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d02b      	beq.n	8002b12 <HAL_GPIO_Init+0x236>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a55      	ldr	r2, [pc, #340]	@ (8002c14 <HAL_GPIO_Init+0x338>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d025      	beq.n	8002b0e <HAL_GPIO_Init+0x232>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a54      	ldr	r2, [pc, #336]	@ (8002c18 <HAL_GPIO_Init+0x33c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d01f      	beq.n	8002b0a <HAL_GPIO_Init+0x22e>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a53      	ldr	r2, [pc, #332]	@ (8002c1c <HAL_GPIO_Init+0x340>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d019      	beq.n	8002b06 <HAL_GPIO_Init+0x22a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a52      	ldr	r2, [pc, #328]	@ (8002c20 <HAL_GPIO_Init+0x344>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d013      	beq.n	8002b02 <HAL_GPIO_Init+0x226>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a51      	ldr	r2, [pc, #324]	@ (8002c24 <HAL_GPIO_Init+0x348>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00d      	beq.n	8002afe <HAL_GPIO_Init+0x222>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a50      	ldr	r2, [pc, #320]	@ (8002c28 <HAL_GPIO_Init+0x34c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d007      	beq.n	8002afa <HAL_GPIO_Init+0x21e>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a4f      	ldr	r2, [pc, #316]	@ (8002c2c <HAL_GPIO_Init+0x350>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d101      	bne.n	8002af6 <HAL_GPIO_Init+0x21a>
 8002af2:	2309      	movs	r3, #9
 8002af4:	e012      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002af6:	230a      	movs	r3, #10
 8002af8:	e010      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002afa:	2308      	movs	r3, #8
 8002afc:	e00e      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002afe:	2307      	movs	r3, #7
 8002b00:	e00c      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002b02:	2306      	movs	r3, #6
 8002b04:	e00a      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002b06:	2305      	movs	r3, #5
 8002b08:	e008      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002b0a:	2304      	movs	r3, #4
 8002b0c:	e006      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e004      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002b12:	2302      	movs	r3, #2
 8002b14:	e002      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <HAL_GPIO_Init+0x240>
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	69fa      	ldr	r2, [r7, #28]
 8002b1e:	f002 0203 	and.w	r2, r2, #3
 8002b22:	0092      	lsls	r2, r2, #2
 8002b24:	4093      	lsls	r3, r2
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b2c:	4935      	ldr	r1, [pc, #212]	@ (8002c04 <HAL_GPIO_Init+0x328>)
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	089b      	lsrs	r3, r3, #2
 8002b32:	3302      	adds	r3, #2
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c30 <HAL_GPIO_Init+0x354>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	43db      	mvns	r3, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4013      	ands	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b5e:	4a34      	ldr	r2, [pc, #208]	@ (8002c30 <HAL_GPIO_Init+0x354>)
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b64:	4b32      	ldr	r3, [pc, #200]	@ (8002c30 <HAL_GPIO_Init+0x354>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b88:	4a29      	ldr	r2, [pc, #164]	@ (8002c30 <HAL_GPIO_Init+0x354>)
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b8e:	4b28      	ldr	r3, [pc, #160]	@ (8002c30 <HAL_GPIO_Init+0x354>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	43db      	mvns	r3, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bb2:	4a1f      	ldr	r2, [pc, #124]	@ (8002c30 <HAL_GPIO_Init+0x354>)
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8002c30 <HAL_GPIO_Init+0x354>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bdc:	4a14      	ldr	r2, [pc, #80]	@ (8002c30 <HAL_GPIO_Init+0x354>)
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	3301      	adds	r3, #1
 8002be6:	61fb      	str	r3, [r7, #28]
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	2b0f      	cmp	r3, #15
 8002bec:	f67f ae86 	bls.w	80028fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002bf0:	bf00      	nop
 8002bf2:	bf00      	nop
 8002bf4:	3724      	adds	r7, #36	@ 0x24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40013800 	.word	0x40013800
 8002c08:	40020000 	.word	0x40020000
 8002c0c:	40020400 	.word	0x40020400
 8002c10:	40020800 	.word	0x40020800
 8002c14:	40020c00 	.word	0x40020c00
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40021400 	.word	0x40021400
 8002c20:	40021800 	.word	0x40021800
 8002c24:	40021c00 	.word	0x40021c00
 8002c28:	40022000 	.word	0x40022000
 8002c2c:	40022400 	.word	0x40022400
 8002c30:	40013c00 	.word	0x40013c00

08002c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	807b      	strh	r3, [r7, #2]
 8002c40:	4613      	mov	r3, r2
 8002c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c44:	787b      	ldrb	r3, [r7, #1]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c4a:	887a      	ldrh	r2, [r7, #2]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002c50:	e003      	b.n	8002c5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c52:	887b      	ldrh	r3, [r7, #2]
 8002c54:	041a      	lsls	r2, r3, #16
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	619a      	str	r2, [r3, #24]
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b086      	sub	sp, #24
 8002c6a:	af02      	add	r7, sp, #8
 8002c6c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e108      	b.n	8002e8a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d106      	bne.n	8002c98 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7fd ff82 	bl	8000b9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ca6:	d102      	bne.n	8002cae <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f001 ff96 	bl	8004be4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6818      	ldr	r0, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	7c1a      	ldrb	r2, [r3, #16]
 8002cc0:	f88d 2000 	strb.w	r2, [sp]
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cc8:	f001 ff32 	bl	8004b30 <USB_CoreInit>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d005      	beq.n	8002cde <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e0d5      	b.n	8002e8a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f001 ff8e 	bl	8004c06 <USB_SetCurrentMode>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e0c6      	b.n	8002e8a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	73fb      	strb	r3, [r7, #15]
 8002d00:	e04a      	b.n	8002d98 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d02:	7bfa      	ldrb	r2, [r7, #15]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	3315      	adds	r3, #21
 8002d12:	2201      	movs	r2, #1
 8002d14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d16:	7bfa      	ldrb	r2, [r7, #15]
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	4413      	add	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	440b      	add	r3, r1
 8002d24:	3314      	adds	r3, #20
 8002d26:	7bfa      	ldrb	r2, [r7, #15]
 8002d28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d2a:	7bfa      	ldrb	r2, [r7, #15]
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
 8002d2e:	b298      	uxth	r0, r3
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	4413      	add	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	332e      	adds	r3, #46	@ 0x2e
 8002d3e:	4602      	mov	r2, r0
 8002d40:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d42:	7bfa      	ldrb	r2, [r7, #15]
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	440b      	add	r3, r1
 8002d50:	3318      	adds	r3, #24
 8002d52:	2200      	movs	r2, #0
 8002d54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d56:	7bfa      	ldrb	r2, [r7, #15]
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	4413      	add	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	440b      	add	r3, r1
 8002d64:	331c      	adds	r3, #28
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d6a:	7bfa      	ldrb	r2, [r7, #15]
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	4413      	add	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	3320      	adds	r3, #32
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d7e:	7bfa      	ldrb	r2, [r7, #15]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	4413      	add	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	3324      	adds	r3, #36	@ 0x24
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
 8002d94:	3301      	adds	r3, #1
 8002d96:	73fb      	strb	r3, [r7, #15]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	791b      	ldrb	r3, [r3, #4]
 8002d9c:	7bfa      	ldrb	r2, [r7, #15]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d3af      	bcc.n	8002d02 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002da2:	2300      	movs	r3, #0
 8002da4:	73fb      	strb	r3, [r7, #15]
 8002da6:	e044      	b.n	8002e32 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002da8:	7bfa      	ldrb	r2, [r7, #15]
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	4613      	mov	r3, r2
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	4413      	add	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002dba:	2200      	movs	r2, #0
 8002dbc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002dbe:	7bfa      	ldrb	r2, [r7, #15]
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002dd0:	7bfa      	ldrb	r2, [r7, #15]
 8002dd2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002dd4:	7bfa      	ldrb	r2, [r7, #15]
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	4413      	add	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002de6:	2200      	movs	r2, #0
 8002de8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002dea:	7bfa      	ldrb	r2, [r7, #15]
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	4413      	add	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	440b      	add	r3, r1
 8002df8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e00:	7bfa      	ldrb	r2, [r7, #15]
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	4613      	mov	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4413      	add	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e16:	7bfa      	ldrb	r2, [r7, #15]
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	4413      	add	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	440b      	add	r3, r1
 8002e24:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	73fb      	strb	r3, [r7, #15]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	791b      	ldrb	r3, [r3, #4]
 8002e36:	7bfa      	ldrb	r2, [r7, #15]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d3b5      	bcc.n	8002da8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	7c1a      	ldrb	r2, [r3, #16]
 8002e44:	f88d 2000 	strb.w	r2, [sp]
 8002e48:	3304      	adds	r3, #4
 8002e4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e4c:	f001 ff28 	bl	8004ca0 <USB_DevInit>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d005      	beq.n	8002e62 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2202      	movs	r2, #2
 8002e5a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e013      	b.n	8002e8a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	7b1b      	ldrb	r3, [r3, #12]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d102      	bne.n	8002e7e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f80b 	bl	8002e94 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f002 f8e3 	bl	800504e <USB_DevDisconnect>

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ec2:	4b05      	ldr	r3, [pc, #20]	@ (8002ed8 <HAL_PCDEx_ActivateLPM+0x44>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	10000003 	.word	0x10000003

08002edc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ee0:	4b05      	ldr	r3, [pc, #20]	@ (8002ef8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a04      	ldr	r2, [pc, #16]	@ (8002ef8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ee6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eea:	6013      	str	r3, [r2, #0]
}
 8002eec:	bf00      	nop
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	40007000 	.word	0x40007000

08002efc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f06:	4b23      	ldr	r3, [pc, #140]	@ (8002f94 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	4a22      	ldr	r2, [pc, #136]	@ (8002f94 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f12:	4b20      	ldr	r3, [pc, #128]	@ (8002f94 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f1a:	603b      	str	r3, [r7, #0]
 8002f1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002f98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a1d      	ldr	r2, [pc, #116]	@ (8002f98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f28:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f2a:	f7fe f947 	bl	80011bc <HAL_GetTick>
 8002f2e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f30:	e009      	b.n	8002f46 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f32:	f7fe f943 	bl	80011bc <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f40:	d901      	bls.n	8002f46 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e022      	b.n	8002f8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f46:	4b14      	ldr	r3, [pc, #80]	@ (8002f98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f52:	d1ee      	bne.n	8002f32 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002f54:	4b10      	ldr	r3, [pc, #64]	@ (8002f98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a0f      	ldr	r2, [pc, #60]	@ (8002f98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f5e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f60:	f7fe f92c 	bl	80011bc <HAL_GetTick>
 8002f64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f66:	e009      	b.n	8002f7c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f68:	f7fe f928 	bl	80011bc <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002f76:	d901      	bls.n	8002f7c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e007      	b.n	8002f8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f7c:	4b06      	ldr	r3, [pc, #24]	@ (8002f98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f88:	d1ee      	bne.n	8002f68 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40007000 	.word	0x40007000

08002f9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e29b      	b.n	80034ea <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 8087 	beq.w	80030ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fc0:	4b96      	ldr	r3, [pc, #600]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 030c 	and.w	r3, r3, #12
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d00c      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fcc:	4b93      	ldr	r3, [pc, #588]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 030c 	and.w	r3, r3, #12
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d112      	bne.n	8002ffe <HAL_RCC_OscConfig+0x62>
 8002fd8:	4b90      	ldr	r3, [pc, #576]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fe0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fe4:	d10b      	bne.n	8002ffe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe6:	4b8d      	ldr	r3, [pc, #564]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d06c      	beq.n	80030cc <HAL_RCC_OscConfig+0x130>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d168      	bne.n	80030cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e275      	b.n	80034ea <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003006:	d106      	bne.n	8003016 <HAL_RCC_OscConfig+0x7a>
 8003008:	4b84      	ldr	r3, [pc, #528]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a83      	ldr	r2, [pc, #524]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 800300e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003012:	6013      	str	r3, [r2, #0]
 8003014:	e02e      	b.n	8003074 <HAL_RCC_OscConfig+0xd8>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10c      	bne.n	8003038 <HAL_RCC_OscConfig+0x9c>
 800301e:	4b7f      	ldr	r3, [pc, #508]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a7e      	ldr	r2, [pc, #504]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 8003024:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	4b7c      	ldr	r3, [pc, #496]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a7b      	ldr	r2, [pc, #492]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 8003030:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	e01d      	b.n	8003074 <HAL_RCC_OscConfig+0xd8>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003040:	d10c      	bne.n	800305c <HAL_RCC_OscConfig+0xc0>
 8003042:	4b76      	ldr	r3, [pc, #472]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a75      	ldr	r2, [pc, #468]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 8003048:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	4b73      	ldr	r3, [pc, #460]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a72      	ldr	r2, [pc, #456]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 8003054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	e00b      	b.n	8003074 <HAL_RCC_OscConfig+0xd8>
 800305c:	4b6f      	ldr	r3, [pc, #444]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a6e      	ldr	r2, [pc, #440]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 8003062:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003066:	6013      	str	r3, [r2, #0]
 8003068:	4b6c      	ldr	r3, [pc, #432]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a6b      	ldr	r2, [pc, #428]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 800306e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003072:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d013      	beq.n	80030a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307c:	f7fe f89e 	bl	80011bc <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003084:	f7fe f89a 	bl	80011bc <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b64      	cmp	r3, #100	@ 0x64
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e229      	b.n	80034ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003096:	4b61      	ldr	r3, [pc, #388]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0f0      	beq.n	8003084 <HAL_RCC_OscConfig+0xe8>
 80030a2:	e014      	b.n	80030ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a4:	f7fe f88a 	bl	80011bc <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030ac:	f7fe f886 	bl	80011bc <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b64      	cmp	r3, #100	@ 0x64
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e215      	b.n	80034ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030be:	4b57      	ldr	r3, [pc, #348]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1f0      	bne.n	80030ac <HAL_RCC_OscConfig+0x110>
 80030ca:	e000      	b.n	80030ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d069      	beq.n	80031ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030da:	4b50      	ldr	r3, [pc, #320]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 030c 	and.w	r3, r3, #12
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00b      	beq.n	80030fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030e6:	4b4d      	ldr	r3, [pc, #308]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 030c 	and.w	r3, r3, #12
 80030ee:	2b08      	cmp	r3, #8
 80030f0:	d11c      	bne.n	800312c <HAL_RCC_OscConfig+0x190>
 80030f2:	4b4a      	ldr	r3, [pc, #296]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d116      	bne.n	800312c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030fe:	4b47      	ldr	r3, [pc, #284]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d005      	beq.n	8003116 <HAL_RCC_OscConfig+0x17a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d001      	beq.n	8003116 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e1e9      	b.n	80034ea <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003116:	4b41      	ldr	r3, [pc, #260]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	493d      	ldr	r1, [pc, #244]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 8003126:	4313      	orrs	r3, r2
 8003128:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312a:	e040      	b.n	80031ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d023      	beq.n	800317c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003134:	4b39      	ldr	r3, [pc, #228]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a38      	ldr	r2, [pc, #224]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003140:	f7fe f83c 	bl	80011bc <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003148:	f7fe f838 	bl	80011bc <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e1c7      	b.n	80034ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315a:	4b30      	ldr	r3, [pc, #192]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f0      	beq.n	8003148 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003166:	4b2d      	ldr	r3, [pc, #180]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	4929      	ldr	r1, [pc, #164]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 8003176:	4313      	orrs	r3, r2
 8003178:	600b      	str	r3, [r1, #0]
 800317a:	e018      	b.n	80031ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800317c:	4b27      	ldr	r3, [pc, #156]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a26      	ldr	r2, [pc, #152]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 8003182:	f023 0301 	bic.w	r3, r3, #1
 8003186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003188:	f7fe f818 	bl	80011bc <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003190:	f7fe f814 	bl	80011bc <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e1a3      	b.n	80034ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031a2:	4b1e      	ldr	r3, [pc, #120]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f0      	bne.n	8003190 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d038      	beq.n	800322c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d019      	beq.n	80031f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031c2:	4b16      	ldr	r3, [pc, #88]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 80031c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031c6:	4a15      	ldr	r2, [pc, #84]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ce:	f7fd fff5 	bl	80011bc <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031d6:	f7fd fff1 	bl	80011bc <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e180      	b.n	80034ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031e8:	4b0c      	ldr	r3, [pc, #48]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 80031ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0f0      	beq.n	80031d6 <HAL_RCC_OscConfig+0x23a>
 80031f4:	e01a      	b.n	800322c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031f6:	4b09      	ldr	r3, [pc, #36]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 80031f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031fa:	4a08      	ldr	r2, [pc, #32]	@ (800321c <HAL_RCC_OscConfig+0x280>)
 80031fc:	f023 0301 	bic.w	r3, r3, #1
 8003200:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003202:	f7fd ffdb 	bl	80011bc <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003208:	e00a      	b.n	8003220 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800320a:	f7fd ffd7 	bl	80011bc <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d903      	bls.n	8003220 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e166      	b.n	80034ea <HAL_RCC_OscConfig+0x54e>
 800321c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003220:	4b92      	ldr	r3, [pc, #584]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 8003222:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1ee      	bne.n	800320a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 80a4 	beq.w	8003382 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800323a:	4b8c      	ldr	r3, [pc, #560]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10d      	bne.n	8003262 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003246:	4b89      	ldr	r3, [pc, #548]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 8003248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324a:	4a88      	ldr	r2, [pc, #544]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 800324c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003250:	6413      	str	r3, [r2, #64]	@ 0x40
 8003252:	4b86      	ldr	r3, [pc, #536]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800325a:	60bb      	str	r3, [r7, #8]
 800325c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800325e:	2301      	movs	r3, #1
 8003260:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003262:	4b83      	ldr	r3, [pc, #524]	@ (8003470 <HAL_RCC_OscConfig+0x4d4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800326a:	2b00      	cmp	r3, #0
 800326c:	d118      	bne.n	80032a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800326e:	4b80      	ldr	r3, [pc, #512]	@ (8003470 <HAL_RCC_OscConfig+0x4d4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a7f      	ldr	r2, [pc, #508]	@ (8003470 <HAL_RCC_OscConfig+0x4d4>)
 8003274:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800327a:	f7fd ff9f 	bl	80011bc <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003282:	f7fd ff9b 	bl	80011bc <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b64      	cmp	r3, #100	@ 0x64
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e12a      	b.n	80034ea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003294:	4b76      	ldr	r3, [pc, #472]	@ (8003470 <HAL_RCC_OscConfig+0x4d4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0f0      	beq.n	8003282 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d106      	bne.n	80032b6 <HAL_RCC_OscConfig+0x31a>
 80032a8:	4b70      	ldr	r3, [pc, #448]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 80032aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ac:	4a6f      	ldr	r2, [pc, #444]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 80032ae:	f043 0301 	orr.w	r3, r3, #1
 80032b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80032b4:	e02d      	b.n	8003312 <HAL_RCC_OscConfig+0x376>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10c      	bne.n	80032d8 <HAL_RCC_OscConfig+0x33c>
 80032be:	4b6b      	ldr	r3, [pc, #428]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 80032c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c2:	4a6a      	ldr	r2, [pc, #424]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 80032c4:	f023 0301 	bic.w	r3, r3, #1
 80032c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80032ca:	4b68      	ldr	r3, [pc, #416]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 80032cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ce:	4a67      	ldr	r2, [pc, #412]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 80032d0:	f023 0304 	bic.w	r3, r3, #4
 80032d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80032d6:	e01c      	b.n	8003312 <HAL_RCC_OscConfig+0x376>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2b05      	cmp	r3, #5
 80032de:	d10c      	bne.n	80032fa <HAL_RCC_OscConfig+0x35e>
 80032e0:	4b62      	ldr	r3, [pc, #392]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 80032e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e4:	4a61      	ldr	r2, [pc, #388]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 80032e6:	f043 0304 	orr.w	r3, r3, #4
 80032ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80032ec:	4b5f      	ldr	r3, [pc, #380]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 80032ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f0:	4a5e      	ldr	r2, [pc, #376]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 80032f2:	f043 0301 	orr.w	r3, r3, #1
 80032f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80032f8:	e00b      	b.n	8003312 <HAL_RCC_OscConfig+0x376>
 80032fa:	4b5c      	ldr	r3, [pc, #368]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032fe:	4a5b      	ldr	r2, [pc, #364]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 8003300:	f023 0301 	bic.w	r3, r3, #1
 8003304:	6713      	str	r3, [r2, #112]	@ 0x70
 8003306:	4b59      	ldr	r3, [pc, #356]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 8003308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800330a:	4a58      	ldr	r2, [pc, #352]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 800330c:	f023 0304 	bic.w	r3, r3, #4
 8003310:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d015      	beq.n	8003346 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800331a:	f7fd ff4f 	bl	80011bc <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003320:	e00a      	b.n	8003338 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003322:	f7fd ff4b 	bl	80011bc <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003330:	4293      	cmp	r3, r2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e0d8      	b.n	80034ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003338:	4b4c      	ldr	r3, [pc, #304]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 800333a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0ee      	beq.n	8003322 <HAL_RCC_OscConfig+0x386>
 8003344:	e014      	b.n	8003370 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003346:	f7fd ff39 	bl	80011bc <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800334c:	e00a      	b.n	8003364 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800334e:	f7fd ff35 	bl	80011bc <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	f241 3288 	movw	r2, #5000	@ 0x1388
 800335c:	4293      	cmp	r3, r2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e0c2      	b.n	80034ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003364:	4b41      	ldr	r3, [pc, #260]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1ee      	bne.n	800334e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003370:	7dfb      	ldrb	r3, [r7, #23]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d105      	bne.n	8003382 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003376:	4b3d      	ldr	r3, [pc, #244]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337a:	4a3c      	ldr	r2, [pc, #240]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 800337c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003380:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 80ae 	beq.w	80034e8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800338c:	4b37      	ldr	r3, [pc, #220]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 030c 	and.w	r3, r3, #12
 8003394:	2b08      	cmp	r3, #8
 8003396:	d06d      	beq.n	8003474 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	2b02      	cmp	r3, #2
 800339e:	d14b      	bne.n	8003438 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a0:	4b32      	ldr	r3, [pc, #200]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a31      	ldr	r2, [pc, #196]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 80033a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ac:	f7fd ff06 	bl	80011bc <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b4:	f7fd ff02 	bl	80011bc <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e091      	b.n	80034ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c6:	4b29      	ldr	r3, [pc, #164]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1f0      	bne.n	80033b4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69da      	ldr	r2, [r3, #28]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e0:	019b      	lsls	r3, r3, #6
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e8:	085b      	lsrs	r3, r3, #1
 80033ea:	3b01      	subs	r3, #1
 80033ec:	041b      	lsls	r3, r3, #16
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f4:	061b      	lsls	r3, r3, #24
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fc:	071b      	lsls	r3, r3, #28
 80033fe:	491b      	ldr	r1, [pc, #108]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 8003400:	4313      	orrs	r3, r2
 8003402:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003404:	4b19      	ldr	r3, [pc, #100]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a18      	ldr	r2, [pc, #96]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 800340a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800340e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003410:	f7fd fed4 	bl	80011bc <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003418:	f7fd fed0 	bl	80011bc <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e05f      	b.n	80034ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342a:	4b10      	ldr	r3, [pc, #64]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0f0      	beq.n	8003418 <HAL_RCC_OscConfig+0x47c>
 8003436:	e057      	b.n	80034e8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003438:	4b0c      	ldr	r3, [pc, #48]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a0b      	ldr	r2, [pc, #44]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 800343e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003442:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003444:	f7fd feba 	bl	80011bc <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800344c:	f7fd feb6 	bl	80011bc <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e045      	b.n	80034ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345e:	4b03      	ldr	r3, [pc, #12]	@ (800346c <HAL_RCC_OscConfig+0x4d0>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0x4b0>
 800346a:	e03d      	b.n	80034e8 <HAL_RCC_OscConfig+0x54c>
 800346c:	40023800 	.word	0x40023800
 8003470:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003474:	4b1f      	ldr	r3, [pc, #124]	@ (80034f4 <HAL_RCC_OscConfig+0x558>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d030      	beq.n	80034e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800348c:	429a      	cmp	r2, r3
 800348e:	d129      	bne.n	80034e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800349a:	429a      	cmp	r2, r3
 800349c:	d122      	bne.n	80034e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80034a4:	4013      	ands	r3, r2
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034aa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d119      	bne.n	80034e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ba:	085b      	lsrs	r3, r3, #1
 80034bc:	3b01      	subs	r3, #1
 80034be:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d10f      	bne.n	80034e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d107      	bne.n	80034e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034de:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d001      	beq.n	80034e8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e000      	b.n	80034ea <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40023800 	.word	0x40023800

080034f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003502:	2300      	movs	r3, #0
 8003504:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0d0      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003510:	4b6a      	ldr	r3, [pc, #424]	@ (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 030f 	and.w	r3, r3, #15
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d910      	bls.n	8003540 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351e:	4b67      	ldr	r3, [pc, #412]	@ (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f023 020f 	bic.w	r2, r3, #15
 8003526:	4965      	ldr	r1, [pc, #404]	@ (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	4313      	orrs	r3, r2
 800352c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800352e:	4b63      	ldr	r3, [pc, #396]	@ (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	429a      	cmp	r2, r3
 800353a:	d001      	beq.n	8003540 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e0b8      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d020      	beq.n	800358e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003558:	4b59      	ldr	r3, [pc, #356]	@ (80036c0 <HAL_RCC_ClockConfig+0x1c8>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	4a58      	ldr	r2, [pc, #352]	@ (80036c0 <HAL_RCC_ClockConfig+0x1c8>)
 800355e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003562:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0308 	and.w	r3, r3, #8
 800356c:	2b00      	cmp	r3, #0
 800356e:	d005      	beq.n	800357c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003570:	4b53      	ldr	r3, [pc, #332]	@ (80036c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	4a52      	ldr	r2, [pc, #328]	@ (80036c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003576:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800357a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800357c:	4b50      	ldr	r3, [pc, #320]	@ (80036c0 <HAL_RCC_ClockConfig+0x1c8>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	494d      	ldr	r1, [pc, #308]	@ (80036c0 <HAL_RCC_ClockConfig+0x1c8>)
 800358a:	4313      	orrs	r3, r2
 800358c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	2b00      	cmp	r3, #0
 8003598:	d040      	beq.n	800361c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d107      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a2:	4b47      	ldr	r3, [pc, #284]	@ (80036c0 <HAL_RCC_ClockConfig+0x1c8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d115      	bne.n	80035da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e07f      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d107      	bne.n	80035ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ba:	4b41      	ldr	r3, [pc, #260]	@ (80036c0 <HAL_RCC_ClockConfig+0x1c8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d109      	bne.n	80035da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e073      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ca:	4b3d      	ldr	r3, [pc, #244]	@ (80036c0 <HAL_RCC_ClockConfig+0x1c8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e06b      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035da:	4b39      	ldr	r3, [pc, #228]	@ (80036c0 <HAL_RCC_ClockConfig+0x1c8>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f023 0203 	bic.w	r2, r3, #3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	4936      	ldr	r1, [pc, #216]	@ (80036c0 <HAL_RCC_ClockConfig+0x1c8>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ec:	f7fd fde6 	bl	80011bc <HAL_GetTick>
 80035f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f2:	e00a      	b.n	800360a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f4:	f7fd fde2 	bl	80011bc <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003602:	4293      	cmp	r3, r2
 8003604:	d901      	bls.n	800360a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e053      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360a:	4b2d      	ldr	r3, [pc, #180]	@ (80036c0 <HAL_RCC_ClockConfig+0x1c8>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 020c 	and.w	r2, r3, #12
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	429a      	cmp	r2, r3
 800361a:	d1eb      	bne.n	80035f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800361c:	4b27      	ldr	r3, [pc, #156]	@ (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 030f 	and.w	r3, r3, #15
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d210      	bcs.n	800364c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800362a:	4b24      	ldr	r3, [pc, #144]	@ (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f023 020f 	bic.w	r2, r3, #15
 8003632:	4922      	ldr	r1, [pc, #136]	@ (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	4313      	orrs	r3, r2
 8003638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800363a:	4b20      	ldr	r3, [pc, #128]	@ (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 030f 	and.w	r3, r3, #15
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	429a      	cmp	r2, r3
 8003646:	d001      	beq.n	800364c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e032      	b.n	80036b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d008      	beq.n	800366a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003658:	4b19      	ldr	r3, [pc, #100]	@ (80036c0 <HAL_RCC_ClockConfig+0x1c8>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	4916      	ldr	r1, [pc, #88]	@ (80036c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003666:	4313      	orrs	r3, r2
 8003668:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0308 	and.w	r3, r3, #8
 8003672:	2b00      	cmp	r3, #0
 8003674:	d009      	beq.n	800368a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003676:	4b12      	ldr	r3, [pc, #72]	@ (80036c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	490e      	ldr	r1, [pc, #56]	@ (80036c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003686:	4313      	orrs	r3, r2
 8003688:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800368a:	f000 f821 	bl	80036d0 <HAL_RCC_GetSysClockFreq>
 800368e:	4602      	mov	r2, r0
 8003690:	4b0b      	ldr	r3, [pc, #44]	@ (80036c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	091b      	lsrs	r3, r3, #4
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	490a      	ldr	r1, [pc, #40]	@ (80036c4 <HAL_RCC_ClockConfig+0x1cc>)
 800369c:	5ccb      	ldrb	r3, [r1, r3]
 800369e:	fa22 f303 	lsr.w	r3, r2, r3
 80036a2:	4a09      	ldr	r2, [pc, #36]	@ (80036c8 <HAL_RCC_ClockConfig+0x1d0>)
 80036a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036a6:	4b09      	ldr	r3, [pc, #36]	@ (80036cc <HAL_RCC_ClockConfig+0x1d4>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fd fd42 	bl	8001134 <HAL_InitTick>

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40023c00 	.word	0x40023c00
 80036c0:	40023800 	.word	0x40023800
 80036c4:	08014ebc 	.word	0x08014ebc
 80036c8:	20000000 	.word	0x20000000
 80036cc:	20000004 	.word	0x20000004

080036d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036d4:	b094      	sub	sp, #80	@ 0x50
 80036d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80036d8:	2300      	movs	r3, #0
 80036da:	647b      	str	r3, [r7, #68]	@ 0x44
 80036dc:	2300      	movs	r3, #0
 80036de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036e0:	2300      	movs	r3, #0
 80036e2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036e8:	4b79      	ldr	r3, [pc, #484]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 030c 	and.w	r3, r3, #12
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	d00d      	beq.n	8003710 <HAL_RCC_GetSysClockFreq+0x40>
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	f200 80e1 	bhi.w	80038bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <HAL_RCC_GetSysClockFreq+0x34>
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d003      	beq.n	800370a <HAL_RCC_GetSysClockFreq+0x3a>
 8003702:	e0db      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003704:	4b73      	ldr	r3, [pc, #460]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003706:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003708:	e0db      	b.n	80038c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800370a:	4b73      	ldr	r3, [pc, #460]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800370c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800370e:	e0d8      	b.n	80038c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003710:	4b6f      	ldr	r3, [pc, #444]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003718:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800371a:	4b6d      	ldr	r3, [pc, #436]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d063      	beq.n	80037ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003726:	4b6a      	ldr	r3, [pc, #424]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	099b      	lsrs	r3, r3, #6
 800372c:	2200      	movs	r2, #0
 800372e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003730:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003738:	633b      	str	r3, [r7, #48]	@ 0x30
 800373a:	2300      	movs	r3, #0
 800373c:	637b      	str	r3, [r7, #52]	@ 0x34
 800373e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003742:	4622      	mov	r2, r4
 8003744:	462b      	mov	r3, r5
 8003746:	f04f 0000 	mov.w	r0, #0
 800374a:	f04f 0100 	mov.w	r1, #0
 800374e:	0159      	lsls	r1, r3, #5
 8003750:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003754:	0150      	lsls	r0, r2, #5
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	4621      	mov	r1, r4
 800375c:	1a51      	subs	r1, r2, r1
 800375e:	6139      	str	r1, [r7, #16]
 8003760:	4629      	mov	r1, r5
 8003762:	eb63 0301 	sbc.w	r3, r3, r1
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	f04f 0200 	mov.w	r2, #0
 800376c:	f04f 0300 	mov.w	r3, #0
 8003770:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003774:	4659      	mov	r1, fp
 8003776:	018b      	lsls	r3, r1, #6
 8003778:	4651      	mov	r1, sl
 800377a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800377e:	4651      	mov	r1, sl
 8003780:	018a      	lsls	r2, r1, #6
 8003782:	4651      	mov	r1, sl
 8003784:	ebb2 0801 	subs.w	r8, r2, r1
 8003788:	4659      	mov	r1, fp
 800378a:	eb63 0901 	sbc.w	r9, r3, r1
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	f04f 0300 	mov.w	r3, #0
 8003796:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800379a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800379e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037a2:	4690      	mov	r8, r2
 80037a4:	4699      	mov	r9, r3
 80037a6:	4623      	mov	r3, r4
 80037a8:	eb18 0303 	adds.w	r3, r8, r3
 80037ac:	60bb      	str	r3, [r7, #8]
 80037ae:	462b      	mov	r3, r5
 80037b0:	eb49 0303 	adc.w	r3, r9, r3
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	f04f 0200 	mov.w	r2, #0
 80037ba:	f04f 0300 	mov.w	r3, #0
 80037be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037c2:	4629      	mov	r1, r5
 80037c4:	024b      	lsls	r3, r1, #9
 80037c6:	4621      	mov	r1, r4
 80037c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037cc:	4621      	mov	r1, r4
 80037ce:	024a      	lsls	r2, r1, #9
 80037d0:	4610      	mov	r0, r2
 80037d2:	4619      	mov	r1, r3
 80037d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037d6:	2200      	movs	r2, #0
 80037d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80037e0:	f7fc fd96 	bl	8000310 <__aeabi_uldivmod>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4613      	mov	r3, r2
 80037ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037ec:	e058      	b.n	80038a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ee:	4b38      	ldr	r3, [pc, #224]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	099b      	lsrs	r3, r3, #6
 80037f4:	2200      	movs	r2, #0
 80037f6:	4618      	mov	r0, r3
 80037f8:	4611      	mov	r1, r2
 80037fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037fe:	623b      	str	r3, [r7, #32]
 8003800:	2300      	movs	r3, #0
 8003802:	627b      	str	r3, [r7, #36]	@ 0x24
 8003804:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003808:	4642      	mov	r2, r8
 800380a:	464b      	mov	r3, r9
 800380c:	f04f 0000 	mov.w	r0, #0
 8003810:	f04f 0100 	mov.w	r1, #0
 8003814:	0159      	lsls	r1, r3, #5
 8003816:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800381a:	0150      	lsls	r0, r2, #5
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	4641      	mov	r1, r8
 8003822:	ebb2 0a01 	subs.w	sl, r2, r1
 8003826:	4649      	mov	r1, r9
 8003828:	eb63 0b01 	sbc.w	fp, r3, r1
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	f04f 0300 	mov.w	r3, #0
 8003834:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003838:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800383c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003840:	ebb2 040a 	subs.w	r4, r2, sl
 8003844:	eb63 050b 	sbc.w	r5, r3, fp
 8003848:	f04f 0200 	mov.w	r2, #0
 800384c:	f04f 0300 	mov.w	r3, #0
 8003850:	00eb      	lsls	r3, r5, #3
 8003852:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003856:	00e2      	lsls	r2, r4, #3
 8003858:	4614      	mov	r4, r2
 800385a:	461d      	mov	r5, r3
 800385c:	4643      	mov	r3, r8
 800385e:	18e3      	adds	r3, r4, r3
 8003860:	603b      	str	r3, [r7, #0]
 8003862:	464b      	mov	r3, r9
 8003864:	eb45 0303 	adc.w	r3, r5, r3
 8003868:	607b      	str	r3, [r7, #4]
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003876:	4629      	mov	r1, r5
 8003878:	028b      	lsls	r3, r1, #10
 800387a:	4621      	mov	r1, r4
 800387c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003880:	4621      	mov	r1, r4
 8003882:	028a      	lsls	r2, r1, #10
 8003884:	4610      	mov	r0, r2
 8003886:	4619      	mov	r1, r3
 8003888:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800388a:	2200      	movs	r2, #0
 800388c:	61bb      	str	r3, [r7, #24]
 800388e:	61fa      	str	r2, [r7, #28]
 8003890:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003894:	f7fc fd3c 	bl	8000310 <__aeabi_uldivmod>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4613      	mov	r3, r2
 800389e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80038a0:	4b0b      	ldr	r3, [pc, #44]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	0c1b      	lsrs	r3, r3, #16
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	3301      	adds	r3, #1
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80038b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038ba:	e002      	b.n	80038c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038bc:	4b05      	ldr	r3, [pc, #20]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80038be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3750      	adds	r7, #80	@ 0x50
 80038c8:	46bd      	mov	sp, r7
 80038ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ce:	bf00      	nop
 80038d0:	40023800 	.word	0x40023800
 80038d4:	00f42400 	.word	0x00f42400
 80038d8:	007a1200 	.word	0x007a1200

080038dc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038e0:	4b03      	ldr	r3, [pc, #12]	@ (80038f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038e2:	681b      	ldr	r3, [r3, #0]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	20000000 	.word	0x20000000

080038f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038f8:	f7ff fff0 	bl	80038dc <HAL_RCC_GetHCLKFreq>
 80038fc:	4602      	mov	r2, r0
 80038fe:	4b05      	ldr	r3, [pc, #20]	@ (8003914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	0a9b      	lsrs	r3, r3, #10
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	4903      	ldr	r1, [pc, #12]	@ (8003918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800390a:	5ccb      	ldrb	r3, [r1, r3]
 800390c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003910:	4618      	mov	r0, r3
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40023800 	.word	0x40023800
 8003918:	08014ecc 	.word	0x08014ecc

0800391c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003920:	f7ff ffdc 	bl	80038dc <HAL_RCC_GetHCLKFreq>
 8003924:	4602      	mov	r2, r0
 8003926:	4b05      	ldr	r3, [pc, #20]	@ (800393c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	0b5b      	lsrs	r3, r3, #13
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	4903      	ldr	r1, [pc, #12]	@ (8003940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003932:	5ccb      	ldrb	r3, [r1, r3]
 8003934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003938:	4618      	mov	r0, r3
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40023800 	.word	0x40023800
 8003940:	08014ecc 	.word	0x08014ecc

08003944 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b088      	sub	sp, #32
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003950:	2300      	movs	r3, #0
 8003952:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003954:	2300      	movs	r3, #0
 8003956:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003958:	2300      	movs	r3, #0
 800395a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800395c:	2300      	movs	r3, #0
 800395e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b00      	cmp	r3, #0
 800396a:	d012      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800396c:	4b69      	ldr	r3, [pc, #420]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	4a68      	ldr	r2, [pc, #416]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003972:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003976:	6093      	str	r3, [r2, #8]
 8003978:	4b66      	ldr	r3, [pc, #408]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003980:	4964      	ldr	r1, [pc, #400]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003982:	4313      	orrs	r3, r2
 8003984:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800398e:	2301      	movs	r3, #1
 8003990:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d017      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800399e:	4b5d      	ldr	r3, [pc, #372]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039a4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ac:	4959      	ldr	r1, [pc, #356]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039bc:	d101      	bne.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80039be:	2301      	movs	r3, #1
 80039c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80039ca:	2301      	movs	r3, #1
 80039cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d017      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039da:	4b4e      	ldr	r3, [pc, #312]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039e0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e8:	494a      	ldr	r1, [pc, #296]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039f8:	d101      	bne.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80039fa:	2301      	movs	r3, #1
 80039fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003a06:	2301      	movs	r3, #1
 8003a08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003a16:	2301      	movs	r3, #1
 8003a18:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0320 	and.w	r3, r3, #32
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 808b 	beq.w	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a28:	4b3a      	ldr	r3, [pc, #232]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2c:	4a39      	ldr	r2, [pc, #228]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a32:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a34:	4b37      	ldr	r3, [pc, #220]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a3c:	60bb      	str	r3, [r7, #8]
 8003a3e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a40:	4b35      	ldr	r3, [pc, #212]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a34      	ldr	r2, [pc, #208]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a4c:	f7fd fbb6 	bl	80011bc <HAL_GetTick>
 8003a50:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a52:	e008      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a54:	f7fd fbb2 	bl	80011bc <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b64      	cmp	r3, #100	@ 0x64
 8003a60:	d901      	bls.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e38f      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a66:	4b2c      	ldr	r3, [pc, #176]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0f0      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a72:	4b28      	ldr	r3, [pc, #160]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a7a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d035      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d02e      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a90:	4b20      	ldr	r3, [pc, #128]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a98:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a9a:	4b1e      	ldr	r3, [pc, #120]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a9e:	4a1d      	ldr	r2, [pc, #116]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aa4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aaa:	4a1a      	ldr	r2, [pc, #104]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ab0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003ab2:	4a18      	ldr	r2, [pc, #96]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ab8:	4b16      	ldr	r3, [pc, #88]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d114      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac4:	f7fd fb7a 	bl	80011bc <HAL_GetTick>
 8003ac8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aca:	e00a      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003acc:	f7fd fb76 	bl	80011bc <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e351      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0ee      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003af6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003afa:	d111      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003afc:	4b05      	ldr	r3, [pc, #20]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003b08:	4b04      	ldr	r3, [pc, #16]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b0a:	400b      	ands	r3, r1
 8003b0c:	4901      	ldr	r1, [pc, #4]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	608b      	str	r3, [r1, #8]
 8003b12:	e00b      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40007000 	.word	0x40007000
 8003b1c:	0ffffcff 	.word	0x0ffffcff
 8003b20:	4bac      	ldr	r3, [pc, #688]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	4aab      	ldr	r2, [pc, #684]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b26:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003b2a:	6093      	str	r3, [r2, #8]
 8003b2c:	4ba9      	ldr	r3, [pc, #676]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b2e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b38:	49a6      	ldr	r1, [pc, #664]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0310 	and.w	r3, r3, #16
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d010      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b4a:	4ba2      	ldr	r3, [pc, #648]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b50:	4aa0      	ldr	r2, [pc, #640]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b56:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003b5a:	4b9e      	ldr	r3, [pc, #632]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b5c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b64:	499b      	ldr	r1, [pc, #620]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00a      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b78:	4b96      	ldr	r3, [pc, #600]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b7e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b86:	4993      	ldr	r1, [pc, #588]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b9a:	4b8e      	ldr	r3, [pc, #568]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ba0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ba8:	498a      	ldr	r1, [pc, #552]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bbc:	4b85      	ldr	r3, [pc, #532]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bc2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bca:	4982      	ldr	r1, [pc, #520]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003bde:	4b7d      	ldr	r3, [pc, #500]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003be4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bec:	4979      	ldr	r1, [pc, #484]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00a      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c00:	4b74      	ldr	r3, [pc, #464]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c06:	f023 0203 	bic.w	r2, r3, #3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0e:	4971      	ldr	r1, [pc, #452]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c22:	4b6c      	ldr	r3, [pc, #432]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c28:	f023 020c 	bic.w	r2, r3, #12
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c30:	4968      	ldr	r1, [pc, #416]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00a      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c44:	4b63      	ldr	r3, [pc, #396]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c4a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c52:	4960      	ldr	r1, [pc, #384]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c66:	4b5b      	ldr	r3, [pc, #364]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c6c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c74:	4957      	ldr	r1, [pc, #348]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00a      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c88:	4b52      	ldr	r3, [pc, #328]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c8e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c96:	494f      	ldr	r1, [pc, #316]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003caa:	4b4a      	ldr	r3, [pc, #296]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb8:	4946      	ldr	r1, [pc, #280]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00a      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003ccc:	4b41      	ldr	r3, [pc, #260]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cda:	493e      	ldr	r1, [pc, #248]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00a      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003cee:	4b39      	ldr	r3, [pc, #228]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cf4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cfc:	4935      	ldr	r1, [pc, #212]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00a      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d10:	4b30      	ldr	r3, [pc, #192]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d16:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d1e:	492d      	ldr	r1, [pc, #180]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d011      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d32:	4b28      	ldr	r3, [pc, #160]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d38:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d40:	4924      	ldr	r1, [pc, #144]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d50:	d101      	bne.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003d52:	2301      	movs	r3, #1
 8003d54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003d62:	2301      	movs	r3, #1
 8003d64:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d72:	4b18      	ldr	r3, [pc, #96]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d78:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d80:	4914      	ldr	r1, [pc, #80]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00b      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d94:	4b0f      	ldr	r3, [pc, #60]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d9a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003da4:	490b      	ldr	r1, [pc, #44]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00f      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003db8:	4b06      	ldr	r3, [pc, #24]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dbe:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dc8:	4902      	ldr	r1, [pc, #8]	@ (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003dd0:	e002      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003dd2:	bf00      	nop
 8003dd4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d00b      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003de4:	4b8a      	ldr	r3, [pc, #552]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003dea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df4:	4986      	ldr	r1, [pc, #536]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00b      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003e08:	4b81      	ldr	r3, [pc, #516]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e0e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e18:	497d      	ldr	r1, [pc, #500]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d006      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 80d6 	beq.w	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e34:	4b76      	ldr	r3, [pc, #472]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a75      	ldr	r2, [pc, #468]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e3a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e40:	f7fd f9bc 	bl	80011bc <HAL_GetTick>
 8003e44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e48:	f7fd f9b8 	bl	80011bc <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b64      	cmp	r3, #100	@ 0x64
 8003e54:	d901      	bls.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e195      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e5a:	4b6d      	ldr	r3, [pc, #436]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d021      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d11d      	bne.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e7a:	4b65      	ldr	r3, [pc, #404]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e80:	0c1b      	lsrs	r3, r3, #16
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e88:	4b61      	ldr	r3, [pc, #388]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e8e:	0e1b      	lsrs	r3, r3, #24
 8003e90:	f003 030f 	and.w	r3, r3, #15
 8003e94:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	019a      	lsls	r2, r3, #6
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	041b      	lsls	r3, r3, #16
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	061b      	lsls	r3, r3, #24
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	071b      	lsls	r3, r3, #28
 8003eae:	4958      	ldr	r1, [pc, #352]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d004      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003eca:	d00a      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d02e      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003edc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ee0:	d129      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ee2:	4b4b      	ldr	r3, [pc, #300]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ee8:	0c1b      	lsrs	r3, r3, #16
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ef0:	4b47      	ldr	r3, [pc, #284]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ef6:	0f1b      	lsrs	r3, r3, #28
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	019a      	lsls	r2, r3, #6
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	041b      	lsls	r3, r3, #16
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	061b      	lsls	r3, r3, #24
 8003f10:	431a      	orrs	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	071b      	lsls	r3, r3, #28
 8003f16:	493e      	ldr	r1, [pc, #248]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f1e:	4b3c      	ldr	r3, [pc, #240]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f24:	f023 021f 	bic.w	r2, r3, #31
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	4938      	ldr	r1, [pc, #224]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d01d      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f42:	4b33      	ldr	r3, [pc, #204]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f48:	0e1b      	lsrs	r3, r3, #24
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f50:	4b2f      	ldr	r3, [pc, #188]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f56:	0f1b      	lsrs	r3, r3, #28
 8003f58:	f003 0307 	and.w	r3, r3, #7
 8003f5c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	019a      	lsls	r2, r3, #6
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	041b      	lsls	r3, r3, #16
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	061b      	lsls	r3, r3, #24
 8003f70:	431a      	orrs	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	071b      	lsls	r3, r3, #28
 8003f76:	4926      	ldr	r1, [pc, #152]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d011      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	019a      	lsls	r2, r3, #6
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	041b      	lsls	r3, r3, #16
 8003f96:	431a      	orrs	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	061b      	lsls	r3, r3, #24
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	071b      	lsls	r3, r3, #28
 8003fa6:	491a      	ldr	r1, [pc, #104]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003fae:	4b18      	ldr	r3, [pc, #96]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a17      	ldr	r2, [pc, #92]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fb4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003fb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fba:	f7fd f8ff 	bl	80011bc <HAL_GetTick>
 8003fbe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fc2:	f7fd f8fb 	bl	80011bc <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b64      	cmp	r3, #100	@ 0x64
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e0d8      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fd4:	4b0e      	ldr	r3, [pc, #56]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0f0      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	f040 80ce 	bne.w	8004184 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003fe8:	4b09      	ldr	r3, [pc, #36]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a08      	ldr	r2, [pc, #32]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ff2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ff4:	f7fd f8e2 	bl	80011bc <HAL_GetTick>
 8003ff8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ffa:	e00b      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ffc:	f7fd f8de 	bl	80011bc <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b64      	cmp	r3, #100	@ 0x64
 8004008:	d904      	bls.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e0bb      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800400e:	bf00      	nop
 8004010:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004014:	4b5e      	ldr	r3, [pc, #376]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800401c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004020:	d0ec      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004032:	2b00      	cmp	r3, #0
 8004034:	d009      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800403e:	2b00      	cmp	r3, #0
 8004040:	d02e      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004046:	2b00      	cmp	r3, #0
 8004048:	d12a      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800404a:	4b51      	ldr	r3, [pc, #324]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800404c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004050:	0c1b      	lsrs	r3, r3, #16
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004058:	4b4d      	ldr	r3, [pc, #308]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800405a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800405e:	0f1b      	lsrs	r3, r3, #28
 8004060:	f003 0307 	and.w	r3, r3, #7
 8004064:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	019a      	lsls	r2, r3, #6
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	041b      	lsls	r3, r3, #16
 8004070:	431a      	orrs	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	061b      	lsls	r3, r3, #24
 8004078:	431a      	orrs	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	071b      	lsls	r3, r3, #28
 800407e:	4944      	ldr	r1, [pc, #272]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004080:	4313      	orrs	r3, r2
 8004082:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004086:	4b42      	ldr	r3, [pc, #264]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004088:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800408c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004094:	3b01      	subs	r3, #1
 8004096:	021b      	lsls	r3, r3, #8
 8004098:	493d      	ldr	r1, [pc, #244]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d022      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040b4:	d11d      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80040b6:	4b36      	ldr	r3, [pc, #216]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040bc:	0e1b      	lsrs	r3, r3, #24
 80040be:	f003 030f 	and.w	r3, r3, #15
 80040c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80040c4:	4b32      	ldr	r3, [pc, #200]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ca:	0f1b      	lsrs	r3, r3, #28
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	019a      	lsls	r2, r3, #6
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	041b      	lsls	r3, r3, #16
 80040de:	431a      	orrs	r2, r3
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	061b      	lsls	r3, r3, #24
 80040e4:	431a      	orrs	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	071b      	lsls	r3, r3, #28
 80040ea:	4929      	ldr	r1, [pc, #164]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d028      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80040fe:	4b24      	ldr	r3, [pc, #144]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004104:	0e1b      	lsrs	r3, r3, #24
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800410c:	4b20      	ldr	r3, [pc, #128]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004112:	0c1b      	lsrs	r3, r3, #16
 8004114:	f003 0303 	and.w	r3, r3, #3
 8004118:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	019a      	lsls	r2, r3, #6
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	041b      	lsls	r3, r3, #16
 8004124:	431a      	orrs	r2, r3
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	061b      	lsls	r3, r3, #24
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	071b      	lsls	r3, r3, #28
 8004132:	4917      	ldr	r1, [pc, #92]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004134:	4313      	orrs	r3, r2
 8004136:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800413a:	4b15      	ldr	r3, [pc, #84]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800413c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004140:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004148:	4911      	ldr	r1, [pc, #68]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004150:	4b0f      	ldr	r3, [pc, #60]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a0e      	ldr	r2, [pc, #56]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004156:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800415a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800415c:	f7fd f82e 	bl	80011bc <HAL_GetTick>
 8004160:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004162:	e008      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004164:	f7fd f82a 	bl	80011bc <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b64      	cmp	r3, #100	@ 0x64
 8004170:	d901      	bls.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e007      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004176:	4b06      	ldr	r3, [pc, #24]	@ (8004190 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800417e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004182:	d1ef      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3720      	adds	r7, #32
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	40023800 	.word	0x40023800

08004194 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e040      	b.n	8004228 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d106      	bne.n	80041bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7fc fc90 	bl	8000adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2224      	movs	r2, #36	@ 0x24
 80041c0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 0201 	bic.w	r2, r2, #1
 80041d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 fa8c 	bl	80046f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 f825 	bl	8004230 <UART_SetConfig>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d101      	bne.n	80041f0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e01b      	b.n	8004228 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689a      	ldr	r2, [r3, #8]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800420e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f042 0201 	orr.w	r2, r2, #1
 800421e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 fb0b 	bl	800483c <UART_CheckIdleState>
 8004226:	4603      	mov	r3, r0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3708      	adds	r7, #8
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b088      	sub	sp, #32
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004238:	2300      	movs	r3, #0
 800423a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	431a      	orrs	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	4ba6      	ldr	r3, [pc, #664]	@ (80044f4 <UART_SetConfig+0x2c4>)
 800425c:	4013      	ands	r3, r2
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6812      	ldr	r2, [r2, #0]
 8004262:	6979      	ldr	r1, [r7, #20]
 8004264:	430b      	orrs	r3, r1
 8004266:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	4313      	orrs	r3, r2
 800428c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	430a      	orrs	r2, r1
 80042a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a94      	ldr	r2, [pc, #592]	@ (80044f8 <UART_SetConfig+0x2c8>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d120      	bne.n	80042ee <UART_SetConfig+0xbe>
 80042ac:	4b93      	ldr	r3, [pc, #588]	@ (80044fc <UART_SetConfig+0x2cc>)
 80042ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	2b03      	cmp	r3, #3
 80042b8:	d816      	bhi.n	80042e8 <UART_SetConfig+0xb8>
 80042ba:	a201      	add	r2, pc, #4	@ (adr r2, 80042c0 <UART_SetConfig+0x90>)
 80042bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c0:	080042d1 	.word	0x080042d1
 80042c4:	080042dd 	.word	0x080042dd
 80042c8:	080042d7 	.word	0x080042d7
 80042cc:	080042e3 	.word	0x080042e3
 80042d0:	2301      	movs	r3, #1
 80042d2:	77fb      	strb	r3, [r7, #31]
 80042d4:	e150      	b.n	8004578 <UART_SetConfig+0x348>
 80042d6:	2302      	movs	r3, #2
 80042d8:	77fb      	strb	r3, [r7, #31]
 80042da:	e14d      	b.n	8004578 <UART_SetConfig+0x348>
 80042dc:	2304      	movs	r3, #4
 80042de:	77fb      	strb	r3, [r7, #31]
 80042e0:	e14a      	b.n	8004578 <UART_SetConfig+0x348>
 80042e2:	2308      	movs	r3, #8
 80042e4:	77fb      	strb	r3, [r7, #31]
 80042e6:	e147      	b.n	8004578 <UART_SetConfig+0x348>
 80042e8:	2310      	movs	r3, #16
 80042ea:	77fb      	strb	r3, [r7, #31]
 80042ec:	e144      	b.n	8004578 <UART_SetConfig+0x348>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a83      	ldr	r2, [pc, #524]	@ (8004500 <UART_SetConfig+0x2d0>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d132      	bne.n	800435e <UART_SetConfig+0x12e>
 80042f8:	4b80      	ldr	r3, [pc, #512]	@ (80044fc <UART_SetConfig+0x2cc>)
 80042fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042fe:	f003 030c 	and.w	r3, r3, #12
 8004302:	2b0c      	cmp	r3, #12
 8004304:	d828      	bhi.n	8004358 <UART_SetConfig+0x128>
 8004306:	a201      	add	r2, pc, #4	@ (adr r2, 800430c <UART_SetConfig+0xdc>)
 8004308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430c:	08004341 	.word	0x08004341
 8004310:	08004359 	.word	0x08004359
 8004314:	08004359 	.word	0x08004359
 8004318:	08004359 	.word	0x08004359
 800431c:	0800434d 	.word	0x0800434d
 8004320:	08004359 	.word	0x08004359
 8004324:	08004359 	.word	0x08004359
 8004328:	08004359 	.word	0x08004359
 800432c:	08004347 	.word	0x08004347
 8004330:	08004359 	.word	0x08004359
 8004334:	08004359 	.word	0x08004359
 8004338:	08004359 	.word	0x08004359
 800433c:	08004353 	.word	0x08004353
 8004340:	2300      	movs	r3, #0
 8004342:	77fb      	strb	r3, [r7, #31]
 8004344:	e118      	b.n	8004578 <UART_SetConfig+0x348>
 8004346:	2302      	movs	r3, #2
 8004348:	77fb      	strb	r3, [r7, #31]
 800434a:	e115      	b.n	8004578 <UART_SetConfig+0x348>
 800434c:	2304      	movs	r3, #4
 800434e:	77fb      	strb	r3, [r7, #31]
 8004350:	e112      	b.n	8004578 <UART_SetConfig+0x348>
 8004352:	2308      	movs	r3, #8
 8004354:	77fb      	strb	r3, [r7, #31]
 8004356:	e10f      	b.n	8004578 <UART_SetConfig+0x348>
 8004358:	2310      	movs	r3, #16
 800435a:	77fb      	strb	r3, [r7, #31]
 800435c:	e10c      	b.n	8004578 <UART_SetConfig+0x348>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a68      	ldr	r2, [pc, #416]	@ (8004504 <UART_SetConfig+0x2d4>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d120      	bne.n	80043aa <UART_SetConfig+0x17a>
 8004368:	4b64      	ldr	r3, [pc, #400]	@ (80044fc <UART_SetConfig+0x2cc>)
 800436a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800436e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004372:	2b30      	cmp	r3, #48	@ 0x30
 8004374:	d013      	beq.n	800439e <UART_SetConfig+0x16e>
 8004376:	2b30      	cmp	r3, #48	@ 0x30
 8004378:	d814      	bhi.n	80043a4 <UART_SetConfig+0x174>
 800437a:	2b20      	cmp	r3, #32
 800437c:	d009      	beq.n	8004392 <UART_SetConfig+0x162>
 800437e:	2b20      	cmp	r3, #32
 8004380:	d810      	bhi.n	80043a4 <UART_SetConfig+0x174>
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <UART_SetConfig+0x15c>
 8004386:	2b10      	cmp	r3, #16
 8004388:	d006      	beq.n	8004398 <UART_SetConfig+0x168>
 800438a:	e00b      	b.n	80043a4 <UART_SetConfig+0x174>
 800438c:	2300      	movs	r3, #0
 800438e:	77fb      	strb	r3, [r7, #31]
 8004390:	e0f2      	b.n	8004578 <UART_SetConfig+0x348>
 8004392:	2302      	movs	r3, #2
 8004394:	77fb      	strb	r3, [r7, #31]
 8004396:	e0ef      	b.n	8004578 <UART_SetConfig+0x348>
 8004398:	2304      	movs	r3, #4
 800439a:	77fb      	strb	r3, [r7, #31]
 800439c:	e0ec      	b.n	8004578 <UART_SetConfig+0x348>
 800439e:	2308      	movs	r3, #8
 80043a0:	77fb      	strb	r3, [r7, #31]
 80043a2:	e0e9      	b.n	8004578 <UART_SetConfig+0x348>
 80043a4:	2310      	movs	r3, #16
 80043a6:	77fb      	strb	r3, [r7, #31]
 80043a8:	e0e6      	b.n	8004578 <UART_SetConfig+0x348>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a56      	ldr	r2, [pc, #344]	@ (8004508 <UART_SetConfig+0x2d8>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d120      	bne.n	80043f6 <UART_SetConfig+0x1c6>
 80043b4:	4b51      	ldr	r3, [pc, #324]	@ (80044fc <UART_SetConfig+0x2cc>)
 80043b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80043be:	2bc0      	cmp	r3, #192	@ 0xc0
 80043c0:	d013      	beq.n	80043ea <UART_SetConfig+0x1ba>
 80043c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80043c4:	d814      	bhi.n	80043f0 <UART_SetConfig+0x1c0>
 80043c6:	2b80      	cmp	r3, #128	@ 0x80
 80043c8:	d009      	beq.n	80043de <UART_SetConfig+0x1ae>
 80043ca:	2b80      	cmp	r3, #128	@ 0x80
 80043cc:	d810      	bhi.n	80043f0 <UART_SetConfig+0x1c0>
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <UART_SetConfig+0x1a8>
 80043d2:	2b40      	cmp	r3, #64	@ 0x40
 80043d4:	d006      	beq.n	80043e4 <UART_SetConfig+0x1b4>
 80043d6:	e00b      	b.n	80043f0 <UART_SetConfig+0x1c0>
 80043d8:	2300      	movs	r3, #0
 80043da:	77fb      	strb	r3, [r7, #31]
 80043dc:	e0cc      	b.n	8004578 <UART_SetConfig+0x348>
 80043de:	2302      	movs	r3, #2
 80043e0:	77fb      	strb	r3, [r7, #31]
 80043e2:	e0c9      	b.n	8004578 <UART_SetConfig+0x348>
 80043e4:	2304      	movs	r3, #4
 80043e6:	77fb      	strb	r3, [r7, #31]
 80043e8:	e0c6      	b.n	8004578 <UART_SetConfig+0x348>
 80043ea:	2308      	movs	r3, #8
 80043ec:	77fb      	strb	r3, [r7, #31]
 80043ee:	e0c3      	b.n	8004578 <UART_SetConfig+0x348>
 80043f0:	2310      	movs	r3, #16
 80043f2:	77fb      	strb	r3, [r7, #31]
 80043f4:	e0c0      	b.n	8004578 <UART_SetConfig+0x348>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a44      	ldr	r2, [pc, #272]	@ (800450c <UART_SetConfig+0x2dc>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d125      	bne.n	800444c <UART_SetConfig+0x21c>
 8004400:	4b3e      	ldr	r3, [pc, #248]	@ (80044fc <UART_SetConfig+0x2cc>)
 8004402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004406:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800440a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800440e:	d017      	beq.n	8004440 <UART_SetConfig+0x210>
 8004410:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004414:	d817      	bhi.n	8004446 <UART_SetConfig+0x216>
 8004416:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800441a:	d00b      	beq.n	8004434 <UART_SetConfig+0x204>
 800441c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004420:	d811      	bhi.n	8004446 <UART_SetConfig+0x216>
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <UART_SetConfig+0x1fe>
 8004426:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800442a:	d006      	beq.n	800443a <UART_SetConfig+0x20a>
 800442c:	e00b      	b.n	8004446 <UART_SetConfig+0x216>
 800442e:	2300      	movs	r3, #0
 8004430:	77fb      	strb	r3, [r7, #31]
 8004432:	e0a1      	b.n	8004578 <UART_SetConfig+0x348>
 8004434:	2302      	movs	r3, #2
 8004436:	77fb      	strb	r3, [r7, #31]
 8004438:	e09e      	b.n	8004578 <UART_SetConfig+0x348>
 800443a:	2304      	movs	r3, #4
 800443c:	77fb      	strb	r3, [r7, #31]
 800443e:	e09b      	b.n	8004578 <UART_SetConfig+0x348>
 8004440:	2308      	movs	r3, #8
 8004442:	77fb      	strb	r3, [r7, #31]
 8004444:	e098      	b.n	8004578 <UART_SetConfig+0x348>
 8004446:	2310      	movs	r3, #16
 8004448:	77fb      	strb	r3, [r7, #31]
 800444a:	e095      	b.n	8004578 <UART_SetConfig+0x348>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a2f      	ldr	r2, [pc, #188]	@ (8004510 <UART_SetConfig+0x2e0>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d125      	bne.n	80044a2 <UART_SetConfig+0x272>
 8004456:	4b29      	ldr	r3, [pc, #164]	@ (80044fc <UART_SetConfig+0x2cc>)
 8004458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800445c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004460:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004464:	d017      	beq.n	8004496 <UART_SetConfig+0x266>
 8004466:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800446a:	d817      	bhi.n	800449c <UART_SetConfig+0x26c>
 800446c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004470:	d00b      	beq.n	800448a <UART_SetConfig+0x25a>
 8004472:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004476:	d811      	bhi.n	800449c <UART_SetConfig+0x26c>
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <UART_SetConfig+0x254>
 800447c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004480:	d006      	beq.n	8004490 <UART_SetConfig+0x260>
 8004482:	e00b      	b.n	800449c <UART_SetConfig+0x26c>
 8004484:	2301      	movs	r3, #1
 8004486:	77fb      	strb	r3, [r7, #31]
 8004488:	e076      	b.n	8004578 <UART_SetConfig+0x348>
 800448a:	2302      	movs	r3, #2
 800448c:	77fb      	strb	r3, [r7, #31]
 800448e:	e073      	b.n	8004578 <UART_SetConfig+0x348>
 8004490:	2304      	movs	r3, #4
 8004492:	77fb      	strb	r3, [r7, #31]
 8004494:	e070      	b.n	8004578 <UART_SetConfig+0x348>
 8004496:	2308      	movs	r3, #8
 8004498:	77fb      	strb	r3, [r7, #31]
 800449a:	e06d      	b.n	8004578 <UART_SetConfig+0x348>
 800449c:	2310      	movs	r3, #16
 800449e:	77fb      	strb	r3, [r7, #31]
 80044a0:	e06a      	b.n	8004578 <UART_SetConfig+0x348>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a1b      	ldr	r2, [pc, #108]	@ (8004514 <UART_SetConfig+0x2e4>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d138      	bne.n	800451e <UART_SetConfig+0x2ee>
 80044ac:	4b13      	ldr	r3, [pc, #76]	@ (80044fc <UART_SetConfig+0x2cc>)
 80044ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044b2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80044b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80044ba:	d017      	beq.n	80044ec <UART_SetConfig+0x2bc>
 80044bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80044c0:	d82a      	bhi.n	8004518 <UART_SetConfig+0x2e8>
 80044c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044c6:	d00b      	beq.n	80044e0 <UART_SetConfig+0x2b0>
 80044c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044cc:	d824      	bhi.n	8004518 <UART_SetConfig+0x2e8>
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <UART_SetConfig+0x2aa>
 80044d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044d6:	d006      	beq.n	80044e6 <UART_SetConfig+0x2b6>
 80044d8:	e01e      	b.n	8004518 <UART_SetConfig+0x2e8>
 80044da:	2300      	movs	r3, #0
 80044dc:	77fb      	strb	r3, [r7, #31]
 80044de:	e04b      	b.n	8004578 <UART_SetConfig+0x348>
 80044e0:	2302      	movs	r3, #2
 80044e2:	77fb      	strb	r3, [r7, #31]
 80044e4:	e048      	b.n	8004578 <UART_SetConfig+0x348>
 80044e6:	2304      	movs	r3, #4
 80044e8:	77fb      	strb	r3, [r7, #31]
 80044ea:	e045      	b.n	8004578 <UART_SetConfig+0x348>
 80044ec:	2308      	movs	r3, #8
 80044ee:	77fb      	strb	r3, [r7, #31]
 80044f0:	e042      	b.n	8004578 <UART_SetConfig+0x348>
 80044f2:	bf00      	nop
 80044f4:	efff69f3 	.word	0xefff69f3
 80044f8:	40011000 	.word	0x40011000
 80044fc:	40023800 	.word	0x40023800
 8004500:	40004400 	.word	0x40004400
 8004504:	40004800 	.word	0x40004800
 8004508:	40004c00 	.word	0x40004c00
 800450c:	40005000 	.word	0x40005000
 8004510:	40011400 	.word	0x40011400
 8004514:	40007800 	.word	0x40007800
 8004518:	2310      	movs	r3, #16
 800451a:	77fb      	strb	r3, [r7, #31]
 800451c:	e02c      	b.n	8004578 <UART_SetConfig+0x348>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a72      	ldr	r2, [pc, #456]	@ (80046ec <UART_SetConfig+0x4bc>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d125      	bne.n	8004574 <UART_SetConfig+0x344>
 8004528:	4b71      	ldr	r3, [pc, #452]	@ (80046f0 <UART_SetConfig+0x4c0>)
 800452a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800452e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004532:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004536:	d017      	beq.n	8004568 <UART_SetConfig+0x338>
 8004538:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800453c:	d817      	bhi.n	800456e <UART_SetConfig+0x33e>
 800453e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004542:	d00b      	beq.n	800455c <UART_SetConfig+0x32c>
 8004544:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004548:	d811      	bhi.n	800456e <UART_SetConfig+0x33e>
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <UART_SetConfig+0x326>
 800454e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004552:	d006      	beq.n	8004562 <UART_SetConfig+0x332>
 8004554:	e00b      	b.n	800456e <UART_SetConfig+0x33e>
 8004556:	2300      	movs	r3, #0
 8004558:	77fb      	strb	r3, [r7, #31]
 800455a:	e00d      	b.n	8004578 <UART_SetConfig+0x348>
 800455c:	2302      	movs	r3, #2
 800455e:	77fb      	strb	r3, [r7, #31]
 8004560:	e00a      	b.n	8004578 <UART_SetConfig+0x348>
 8004562:	2304      	movs	r3, #4
 8004564:	77fb      	strb	r3, [r7, #31]
 8004566:	e007      	b.n	8004578 <UART_SetConfig+0x348>
 8004568:	2308      	movs	r3, #8
 800456a:	77fb      	strb	r3, [r7, #31]
 800456c:	e004      	b.n	8004578 <UART_SetConfig+0x348>
 800456e:	2310      	movs	r3, #16
 8004570:	77fb      	strb	r3, [r7, #31]
 8004572:	e001      	b.n	8004578 <UART_SetConfig+0x348>
 8004574:	2310      	movs	r3, #16
 8004576:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004580:	d15b      	bne.n	800463a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004582:	7ffb      	ldrb	r3, [r7, #31]
 8004584:	2b08      	cmp	r3, #8
 8004586:	d828      	bhi.n	80045da <UART_SetConfig+0x3aa>
 8004588:	a201      	add	r2, pc, #4	@ (adr r2, 8004590 <UART_SetConfig+0x360>)
 800458a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458e:	bf00      	nop
 8004590:	080045b5 	.word	0x080045b5
 8004594:	080045bd 	.word	0x080045bd
 8004598:	080045c5 	.word	0x080045c5
 800459c:	080045db 	.word	0x080045db
 80045a0:	080045cb 	.word	0x080045cb
 80045a4:	080045db 	.word	0x080045db
 80045a8:	080045db 	.word	0x080045db
 80045ac:	080045db 	.word	0x080045db
 80045b0:	080045d3 	.word	0x080045d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045b4:	f7ff f99e 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 80045b8:	61b8      	str	r0, [r7, #24]
        break;
 80045ba:	e013      	b.n	80045e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045bc:	f7ff f9ae 	bl	800391c <HAL_RCC_GetPCLK2Freq>
 80045c0:	61b8      	str	r0, [r7, #24]
        break;
 80045c2:	e00f      	b.n	80045e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045c4:	4b4b      	ldr	r3, [pc, #300]	@ (80046f4 <UART_SetConfig+0x4c4>)
 80045c6:	61bb      	str	r3, [r7, #24]
        break;
 80045c8:	e00c      	b.n	80045e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ca:	f7ff f881 	bl	80036d0 <HAL_RCC_GetSysClockFreq>
 80045ce:	61b8      	str	r0, [r7, #24]
        break;
 80045d0:	e008      	b.n	80045e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045d6:	61bb      	str	r3, [r7, #24]
        break;
 80045d8:	e004      	b.n	80045e4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	77bb      	strb	r3, [r7, #30]
        break;
 80045e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d074      	beq.n	80046d4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	005a      	lsls	r2, r3, #1
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	085b      	lsrs	r3, r3, #1
 80045f4:	441a      	add	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	2b0f      	cmp	r3, #15
 8004604:	d916      	bls.n	8004634 <UART_SetConfig+0x404>
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800460c:	d212      	bcs.n	8004634 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	b29b      	uxth	r3, r3
 8004612:	f023 030f 	bic.w	r3, r3, #15
 8004616:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	085b      	lsrs	r3, r3, #1
 800461c:	b29b      	uxth	r3, r3
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	b29a      	uxth	r2, r3
 8004624:	89fb      	ldrh	r3, [r7, #14]
 8004626:	4313      	orrs	r3, r2
 8004628:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	89fa      	ldrh	r2, [r7, #14]
 8004630:	60da      	str	r2, [r3, #12]
 8004632:	e04f      	b.n	80046d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	77bb      	strb	r3, [r7, #30]
 8004638:	e04c      	b.n	80046d4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800463a:	7ffb      	ldrb	r3, [r7, #31]
 800463c:	2b08      	cmp	r3, #8
 800463e:	d828      	bhi.n	8004692 <UART_SetConfig+0x462>
 8004640:	a201      	add	r2, pc, #4	@ (adr r2, 8004648 <UART_SetConfig+0x418>)
 8004642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004646:	bf00      	nop
 8004648:	0800466d 	.word	0x0800466d
 800464c:	08004675 	.word	0x08004675
 8004650:	0800467d 	.word	0x0800467d
 8004654:	08004693 	.word	0x08004693
 8004658:	08004683 	.word	0x08004683
 800465c:	08004693 	.word	0x08004693
 8004660:	08004693 	.word	0x08004693
 8004664:	08004693 	.word	0x08004693
 8004668:	0800468b 	.word	0x0800468b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800466c:	f7ff f942 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 8004670:	61b8      	str	r0, [r7, #24]
        break;
 8004672:	e013      	b.n	800469c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004674:	f7ff f952 	bl	800391c <HAL_RCC_GetPCLK2Freq>
 8004678:	61b8      	str	r0, [r7, #24]
        break;
 800467a:	e00f      	b.n	800469c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800467c:	4b1d      	ldr	r3, [pc, #116]	@ (80046f4 <UART_SetConfig+0x4c4>)
 800467e:	61bb      	str	r3, [r7, #24]
        break;
 8004680:	e00c      	b.n	800469c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004682:	f7ff f825 	bl	80036d0 <HAL_RCC_GetSysClockFreq>
 8004686:	61b8      	str	r0, [r7, #24]
        break;
 8004688:	e008      	b.n	800469c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800468a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800468e:	61bb      	str	r3, [r7, #24]
        break;
 8004690:	e004      	b.n	800469c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004692:	2300      	movs	r3, #0
 8004694:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	77bb      	strb	r3, [r7, #30]
        break;
 800469a:	bf00      	nop
    }

    if (pclk != 0U)
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d018      	beq.n	80046d4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	085a      	lsrs	r2, r3, #1
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	441a      	add	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	2b0f      	cmp	r3, #15
 80046ba:	d909      	bls.n	80046d0 <UART_SetConfig+0x4a0>
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046c2:	d205      	bcs.n	80046d0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	60da      	str	r2, [r3, #12]
 80046ce:	e001      	b.n	80046d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80046e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3720      	adds	r7, #32
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40007c00 	.word	0x40007c00
 80046f0:	40023800 	.word	0x40023800
 80046f4:	00f42400 	.word	0x00f42400

080046f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004704:	f003 0308 	and.w	r3, r3, #8
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00a      	beq.n	8004722 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00a      	beq.n	8004766 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476a:	f003 0304 	and.w	r3, r3, #4
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478c:	f003 0310 	and.w	r3, r3, #16
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00a      	beq.n	80047aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d01a      	beq.n	800480e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047f6:	d10a      	bne.n	800480e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	605a      	str	r2, [r3, #4]
  }
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b098      	sub	sp, #96	@ 0x60
 8004840:	af02      	add	r7, sp, #8
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800484c:	f7fc fcb6 	bl	80011bc <HAL_GetTick>
 8004850:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0308 	and.w	r3, r3, #8
 800485c:	2b08      	cmp	r3, #8
 800485e:	d12e      	bne.n	80048be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004860:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004868:	2200      	movs	r2, #0
 800486a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f88c 	bl	800498c <UART_WaitOnFlagUntilTimeout>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d021      	beq.n	80048be <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004882:	e853 3f00 	ldrex	r3, [r3]
 8004886:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800488a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800488e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	461a      	mov	r2, r3
 8004896:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004898:	647b      	str	r3, [r7, #68]	@ 0x44
 800489a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800489e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048a0:	e841 2300 	strex	r3, r2, [r1]
 80048a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1e6      	bne.n	800487a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2220      	movs	r2, #32
 80048b0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e062      	b.n	8004984 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d149      	bne.n	8004960 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048cc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048d4:	2200      	movs	r2, #0
 80048d6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f856 	bl	800498c <UART_WaitOnFlagUntilTimeout>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d03c      	beq.n	8004960 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ee:	e853 3f00 	ldrex	r3, [r3]
 80048f2:	623b      	str	r3, [r7, #32]
   return(result);
 80048f4:	6a3b      	ldr	r3, [r7, #32]
 80048f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	461a      	mov	r2, r3
 8004902:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004904:	633b      	str	r3, [r7, #48]	@ 0x30
 8004906:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004908:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800490a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800490c:	e841 2300 	strex	r3, r2, [r1]
 8004910:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1e6      	bne.n	80048e6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	3308      	adds	r3, #8
 800491e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	e853 3f00 	ldrex	r3, [r3]
 8004926:	60fb      	str	r3, [r7, #12]
   return(result);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f023 0301 	bic.w	r3, r3, #1
 800492e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	3308      	adds	r3, #8
 8004936:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004938:	61fa      	str	r2, [r7, #28]
 800493a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493c:	69b9      	ldr	r1, [r7, #24]
 800493e:	69fa      	ldr	r2, [r7, #28]
 8004940:	e841 2300 	strex	r3, r2, [r1]
 8004944:	617b      	str	r3, [r7, #20]
   return(result);
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1e5      	bne.n	8004918 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2220      	movs	r2, #32
 8004950:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e011      	b.n	8004984 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2220      	movs	r2, #32
 8004964:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2220      	movs	r2, #32
 800496a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3758      	adds	r7, #88	@ 0x58
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	603b      	str	r3, [r7, #0]
 8004998:	4613      	mov	r3, r2
 800499a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800499c:	e04f      	b.n	8004a3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a4:	d04b      	beq.n	8004a3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049a6:	f7fc fc09 	bl	80011bc <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d302      	bcc.n	80049bc <UART_WaitOnFlagUntilTimeout+0x30>
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e04e      	b.n	8004a5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0304 	and.w	r3, r3, #4
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d037      	beq.n	8004a3e <UART_WaitOnFlagUntilTimeout+0xb2>
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2b80      	cmp	r3, #128	@ 0x80
 80049d2:	d034      	beq.n	8004a3e <UART_WaitOnFlagUntilTimeout+0xb2>
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2b40      	cmp	r3, #64	@ 0x40
 80049d8:	d031      	beq.n	8004a3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	69db      	ldr	r3, [r3, #28]
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d110      	bne.n	8004a0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2208      	movs	r2, #8
 80049ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 f838 	bl	8004a66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2208      	movs	r2, #8
 80049fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e029      	b.n	8004a5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	69db      	ldr	r3, [r3, #28]
 8004a10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a18:	d111      	bne.n	8004a3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 f81e 	bl	8004a66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e00f      	b.n	8004a5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	69da      	ldr	r2, [r3, #28]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	4013      	ands	r3, r2
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	bf0c      	ite	eq
 8004a4e:	2301      	moveq	r3, #1
 8004a50:	2300      	movne	r3, #0
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	461a      	mov	r2, r3
 8004a56:	79fb      	ldrb	r3, [r7, #7]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d0a0      	beq.n	800499e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b095      	sub	sp, #84	@ 0x54
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a76:	e853 3f00 	ldrex	r3, [r3]
 8004a7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	461a      	mov	r2, r3
 8004a8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a8e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a94:	e841 2300 	strex	r3, r2, [r1]
 8004a98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1e6      	bne.n	8004a6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	3308      	adds	r3, #8
 8004aa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa8:	6a3b      	ldr	r3, [r7, #32]
 8004aaa:	e853 3f00 	ldrex	r3, [r3]
 8004aae:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	f023 0301 	bic.w	r3, r3, #1
 8004ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	3308      	adds	r3, #8
 8004abe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ac0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ac6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ac8:	e841 2300 	strex	r3, r2, [r1]
 8004acc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1e5      	bne.n	8004aa0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d118      	bne.n	8004b0e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	e853 3f00 	ldrex	r3, [r3]
 8004ae8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	f023 0310 	bic.w	r3, r3, #16
 8004af0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	461a      	mov	r2, r3
 8004af8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004afa:	61bb      	str	r3, [r7, #24]
 8004afc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afe:	6979      	ldr	r1, [r7, #20]
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	e841 2300 	strex	r3, r2, [r1]
 8004b06:	613b      	str	r3, [r7, #16]
   return(result);
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1e6      	bne.n	8004adc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2220      	movs	r2, #32
 8004b12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004b22:	bf00      	nop
 8004b24:	3754      	adds	r7, #84	@ 0x54
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
	...

08004b30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b30:	b084      	sub	sp, #16
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b084      	sub	sp, #16
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
 8004b3a:	f107 001c 	add.w	r0, r7, #28
 8004b3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b42:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d121      	bne.n	8004b8e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b4e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	4b21      	ldr	r3, [pc, #132]	@ (8004be0 <USB_CoreInit+0xb0>)
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b6e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d105      	bne.n	8004b82 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fa92 	bl	80050ac <USB_CoreReset>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	73fb      	strb	r3, [r7, #15]
 8004b8c:	e010      	b.n	8004bb0 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 fa86 	bl	80050ac <USB_CoreReset>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004bb0:	7fbb      	ldrb	r3, [r7, #30]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d10b      	bne.n	8004bce <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f043 0206 	orr.w	r2, r3, #6
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f043 0220 	orr.w	r2, r3, #32
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bda:	b004      	add	sp, #16
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	ffbdffbf 	.word	0xffbdffbf

08004be4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f023 0201 	bic.w	r2, r3, #1
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b084      	sub	sp, #16
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
 8004c0e:	460b      	mov	r3, r1
 8004c10:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c22:	78fb      	ldrb	r3, [r7, #3]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d115      	bne.n	8004c54 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004c34:	200a      	movs	r0, #10
 8004c36:	f7fc facd 	bl	80011d4 <HAL_Delay>
      ms += 10U;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	330a      	adds	r3, #10
 8004c3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 fa25 	bl	8005090 <USB_GetMode>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d01e      	beq.n	8004c8a <USB_SetCurrentMode+0x84>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004c50:	d9f0      	bls.n	8004c34 <USB_SetCurrentMode+0x2e>
 8004c52:	e01a      	b.n	8004c8a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c54:	78fb      	ldrb	r3, [r7, #3]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d115      	bne.n	8004c86 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004c66:	200a      	movs	r0, #10
 8004c68:	f7fc fab4 	bl	80011d4 <HAL_Delay>
      ms += 10U;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	330a      	adds	r3, #10
 8004c70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fa0c 	bl	8005090 <USB_GetMode>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d005      	beq.n	8004c8a <USB_SetCurrentMode+0x84>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2bc7      	cmp	r3, #199	@ 0xc7
 8004c82:	d9f0      	bls.n	8004c66 <USB_SetCurrentMode+0x60>
 8004c84:	e001      	b.n	8004c8a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e005      	b.n	8004c96 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2bc8      	cmp	r3, #200	@ 0xc8
 8004c8e:	d101      	bne.n	8004c94 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e000      	b.n	8004c96 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
	...

08004ca0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ca0:	b084      	sub	sp, #16
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b086      	sub	sp, #24
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004cae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004cba:	2300      	movs	r3, #0
 8004cbc:	613b      	str	r3, [r7, #16]
 8004cbe:	e009      	b.n	8004cd4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	3340      	adds	r3, #64	@ 0x40
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	2200      	movs	r2, #0
 8004ccc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	613b      	str	r3, [r7, #16]
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	2b0e      	cmp	r3, #14
 8004cd8:	d9f2      	bls.n	8004cc0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004cda:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d11c      	bne.n	8004d1c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004cf0:	f043 0302 	orr.w	r3, r3, #2
 8004cf4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cfa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	e005      	b.n	8004d28 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d20:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004d2e:	461a      	mov	r2, r3
 8004d30:	2300      	movs	r3, #0
 8004d32:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d34:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d10d      	bne.n	8004d58 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d104      	bne.n	8004d4e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d44:	2100      	movs	r1, #0
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f968 	bl	800501c <USB_SetDevSpeed>
 8004d4c:	e008      	b.n	8004d60 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d4e:	2101      	movs	r1, #1
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f963 	bl	800501c <USB_SetDevSpeed>
 8004d56:	e003      	b.n	8004d60 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d58:	2103      	movs	r1, #3
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f95e 	bl	800501c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d60:	2110      	movs	r1, #16
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f8fa 	bl	8004f5c <USB_FlushTxFifo>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f924 	bl	8004fc0 <USB_FlushRxFifo>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d88:	461a      	mov	r2, r3
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d94:	461a      	mov	r2, r3
 8004d96:	2300      	movs	r3, #0
 8004d98:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004da0:	461a      	mov	r2, r3
 8004da2:	2300      	movs	r3, #0
 8004da4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004da6:	2300      	movs	r3, #0
 8004da8:	613b      	str	r3, [r7, #16]
 8004daa:	e043      	b.n	8004e34 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004dbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004dc2:	d118      	bne.n	8004df6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10a      	bne.n	8004de0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004ddc:	6013      	str	r3, [r2, #0]
 8004dde:	e013      	b.n	8004e08 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dec:	461a      	mov	r2, r3
 8004dee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004df2:	6013      	str	r3, [r2, #0]
 8004df4:	e008      	b.n	8004e08 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e02:	461a      	mov	r2, r3
 8004e04:	2300      	movs	r3, #0
 8004e06:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e14:	461a      	mov	r2, r3
 8004e16:	2300      	movs	r3, #0
 8004e18:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e26:	461a      	mov	r2, r3
 8004e28:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004e2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	3301      	adds	r3, #1
 8004e32:	613b      	str	r3, [r7, #16]
 8004e34:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e38:	461a      	mov	r2, r3
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d3b5      	bcc.n	8004dac <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e40:	2300      	movs	r3, #0
 8004e42:	613b      	str	r3, [r7, #16]
 8004e44:	e043      	b.n	8004ece <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e5c:	d118      	bne.n	8004e90 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10a      	bne.n	8004e7a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e70:	461a      	mov	r2, r3
 8004e72:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004e76:	6013      	str	r3, [r2, #0]
 8004e78:	e013      	b.n	8004ea2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e86:	461a      	mov	r2, r3
 8004e88:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004e8c:	6013      	str	r3, [r2, #0]
 8004e8e:	e008      	b.n	8004ea2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eae:	461a      	mov	r2, r3
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	015a      	lsls	r2, r3, #5
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4413      	add	r3, r2
 8004ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004ec6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	613b      	str	r3, [r7, #16]
 8004ece:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d3b5      	bcc.n	8004e46 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ee8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004eec:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004efa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004efc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d105      	bne.n	8004f10 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	f043 0210 	orr.w	r2, r3, #16
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	699a      	ldr	r2, [r3, #24]
 8004f14:	4b0f      	ldr	r3, [pc, #60]	@ (8004f54 <USB_DevInit+0x2b4>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f1c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d005      	beq.n	8004f30 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	f043 0208 	orr.w	r2, r3, #8
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f30:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d105      	bne.n	8004f44 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699a      	ldr	r2, [r3, #24]
 8004f3c:	4b06      	ldr	r3, [pc, #24]	@ (8004f58 <USB_DevInit+0x2b8>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f50:	b004      	add	sp, #16
 8004f52:	4770      	bx	lr
 8004f54:	803c3800 	.word	0x803c3800
 8004f58:	40000004 	.word	0x40000004

08004f5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f76:	d901      	bls.n	8004f7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e01b      	b.n	8004fb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	daf2      	bge.n	8004f6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	019b      	lsls	r3, r3, #6
 8004f8c:	f043 0220 	orr.w	r2, r3, #32
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	3301      	adds	r3, #1
 8004f98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fa0:	d901      	bls.n	8004fa6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e006      	b.n	8004fb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	f003 0320 	and.w	r3, r3, #32
 8004fae:	2b20      	cmp	r3, #32
 8004fb0:	d0f0      	beq.n	8004f94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fd8:	d901      	bls.n	8004fde <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e018      	b.n	8005010 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	daf2      	bge.n	8004fcc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2210      	movs	r2, #16
 8004fee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ffc:	d901      	bls.n	8005002 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e006      	b.n	8005010 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f003 0310 	and.w	r3, r3, #16
 800500a:	2b10      	cmp	r3, #16
 800500c:	d0f0      	beq.n	8004ff0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	460b      	mov	r3, r1
 8005026:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	78fb      	ldrb	r3, [r7, #3]
 8005036:	68f9      	ldr	r1, [r7, #12]
 8005038:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800503c:	4313      	orrs	r3, r2
 800503e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800504e:	b480      	push	{r7}
 8005050:	b085      	sub	sp, #20
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005068:	f023 0303 	bic.w	r3, r3, #3
 800506c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800507c:	f043 0302 	orr.w	r3, r3, #2
 8005080:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	695b      	ldr	r3, [r3, #20]
 800509c:	f003 0301 	and.w	r3, r3, #1
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050b4:	2300      	movs	r3, #0
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	3301      	adds	r3, #1
 80050bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050c4:	d901      	bls.n	80050ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e022      	b.n	8005110 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	daf2      	bge.n	80050b8 <USB_CoreReset+0xc>

  count = 10U;
 80050d2:	230a      	movs	r3, #10
 80050d4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80050d6:	e002      	b.n	80050de <USB_CoreReset+0x32>
  {
    count--;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	3b01      	subs	r3, #1
 80050dc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1f9      	bne.n	80050d8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	f043 0201 	orr.w	r2, r3, #1
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	3301      	adds	r3, #1
 80050f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050fc:	d901      	bls.n	8005102 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e006      	b.n	8005110 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b01      	cmp	r3, #1
 800510c:	d0f0      	beq.n	80050f0 <USB_CoreReset+0x44>

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 172;
 8005122:	4b87      	ldr	r3, [pc, #540]	@ (8005340 <MX_LWIP_Init+0x224>)
 8005124:	22ac      	movs	r2, #172	@ 0xac
 8005126:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 20;
 8005128:	4b85      	ldr	r3, [pc, #532]	@ (8005340 <MX_LWIP_Init+0x224>)
 800512a:	2214      	movs	r2, #20
 800512c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 3;
 800512e:	4b84      	ldr	r3, [pc, #528]	@ (8005340 <MX_LWIP_Init+0x224>)
 8005130:	2203      	movs	r2, #3
 8005132:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 40;
 8005134:	4b82      	ldr	r3, [pc, #520]	@ (8005340 <MX_LWIP_Init+0x224>)
 8005136:	2228      	movs	r2, #40	@ 0x28
 8005138:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800513a:	4b82      	ldr	r3, [pc, #520]	@ (8005344 <MX_LWIP_Init+0x228>)
 800513c:	22ff      	movs	r2, #255	@ 0xff
 800513e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005140:	4b80      	ldr	r3, [pc, #512]	@ (8005344 <MX_LWIP_Init+0x228>)
 8005142:	22ff      	movs	r2, #255	@ 0xff
 8005144:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005146:	4b7f      	ldr	r3, [pc, #508]	@ (8005344 <MX_LWIP_Init+0x228>)
 8005148:	22ff      	movs	r2, #255	@ 0xff
 800514a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800514c:	4b7d      	ldr	r3, [pc, #500]	@ (8005344 <MX_LWIP_Init+0x228>)
 800514e:	2200      	movs	r2, #0
 8005150:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 172;
 8005152:	4b7d      	ldr	r3, [pc, #500]	@ (8005348 <MX_LWIP_Init+0x22c>)
 8005154:	22ac      	movs	r2, #172	@ 0xac
 8005156:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 20;
 8005158:	4b7b      	ldr	r3, [pc, #492]	@ (8005348 <MX_LWIP_Init+0x22c>)
 800515a:	2214      	movs	r2, #20
 800515c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 3;
 800515e:	4b7a      	ldr	r3, [pc, #488]	@ (8005348 <MX_LWIP_Init+0x22c>)
 8005160:	2203      	movs	r2, #3
 8005162:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005164:	4b78      	ldr	r3, [pc, #480]	@ (8005348 <MX_LWIP_Init+0x22c>)
 8005166:	2201      	movs	r2, #1
 8005168:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800516a:	f001 fc68 	bl	8006a3e <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800516e:	4b74      	ldr	r3, [pc, #464]	@ (8005340 <MX_LWIP_Init+0x224>)
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	061a      	lsls	r2, r3, #24
 8005174:	4b72      	ldr	r3, [pc, #456]	@ (8005340 <MX_LWIP_Init+0x224>)
 8005176:	785b      	ldrb	r3, [r3, #1]
 8005178:	041b      	lsls	r3, r3, #16
 800517a:	431a      	orrs	r2, r3
 800517c:	4b70      	ldr	r3, [pc, #448]	@ (8005340 <MX_LWIP_Init+0x224>)
 800517e:	789b      	ldrb	r3, [r3, #2]
 8005180:	021b      	lsls	r3, r3, #8
 8005182:	4313      	orrs	r3, r2
 8005184:	4a6e      	ldr	r2, [pc, #440]	@ (8005340 <MX_LWIP_Init+0x224>)
 8005186:	78d2      	ldrb	r2, [r2, #3]
 8005188:	4313      	orrs	r3, r2
 800518a:	061a      	lsls	r2, r3, #24
 800518c:	4b6c      	ldr	r3, [pc, #432]	@ (8005340 <MX_LWIP_Init+0x224>)
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	0619      	lsls	r1, r3, #24
 8005192:	4b6b      	ldr	r3, [pc, #428]	@ (8005340 <MX_LWIP_Init+0x224>)
 8005194:	785b      	ldrb	r3, [r3, #1]
 8005196:	041b      	lsls	r3, r3, #16
 8005198:	4319      	orrs	r1, r3
 800519a:	4b69      	ldr	r3, [pc, #420]	@ (8005340 <MX_LWIP_Init+0x224>)
 800519c:	789b      	ldrb	r3, [r3, #2]
 800519e:	021b      	lsls	r3, r3, #8
 80051a0:	430b      	orrs	r3, r1
 80051a2:	4967      	ldr	r1, [pc, #412]	@ (8005340 <MX_LWIP_Init+0x224>)
 80051a4:	78c9      	ldrb	r1, [r1, #3]
 80051a6:	430b      	orrs	r3, r1
 80051a8:	021b      	lsls	r3, r3, #8
 80051aa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80051ae:	431a      	orrs	r2, r3
 80051b0:	4b63      	ldr	r3, [pc, #396]	@ (8005340 <MX_LWIP_Init+0x224>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	0619      	lsls	r1, r3, #24
 80051b6:	4b62      	ldr	r3, [pc, #392]	@ (8005340 <MX_LWIP_Init+0x224>)
 80051b8:	785b      	ldrb	r3, [r3, #1]
 80051ba:	041b      	lsls	r3, r3, #16
 80051bc:	4319      	orrs	r1, r3
 80051be:	4b60      	ldr	r3, [pc, #384]	@ (8005340 <MX_LWIP_Init+0x224>)
 80051c0:	789b      	ldrb	r3, [r3, #2]
 80051c2:	021b      	lsls	r3, r3, #8
 80051c4:	430b      	orrs	r3, r1
 80051c6:	495e      	ldr	r1, [pc, #376]	@ (8005340 <MX_LWIP_Init+0x224>)
 80051c8:	78c9      	ldrb	r1, [r1, #3]
 80051ca:	430b      	orrs	r3, r1
 80051cc:	0a1b      	lsrs	r3, r3, #8
 80051ce:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80051d2:	431a      	orrs	r2, r3
 80051d4:	4b5a      	ldr	r3, [pc, #360]	@ (8005340 <MX_LWIP_Init+0x224>)
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	0619      	lsls	r1, r3, #24
 80051da:	4b59      	ldr	r3, [pc, #356]	@ (8005340 <MX_LWIP_Init+0x224>)
 80051dc:	785b      	ldrb	r3, [r3, #1]
 80051de:	041b      	lsls	r3, r3, #16
 80051e0:	4319      	orrs	r1, r3
 80051e2:	4b57      	ldr	r3, [pc, #348]	@ (8005340 <MX_LWIP_Init+0x224>)
 80051e4:	789b      	ldrb	r3, [r3, #2]
 80051e6:	021b      	lsls	r3, r3, #8
 80051e8:	430b      	orrs	r3, r1
 80051ea:	4955      	ldr	r1, [pc, #340]	@ (8005340 <MX_LWIP_Init+0x224>)
 80051ec:	78c9      	ldrb	r1, [r1, #3]
 80051ee:	430b      	orrs	r3, r1
 80051f0:	0e1b      	lsrs	r3, r3, #24
 80051f2:	4313      	orrs	r3, r2
 80051f4:	4a55      	ldr	r2, [pc, #340]	@ (800534c <MX_LWIP_Init+0x230>)
 80051f6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80051f8:	4b52      	ldr	r3, [pc, #328]	@ (8005344 <MX_LWIP_Init+0x228>)
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	061a      	lsls	r2, r3, #24
 80051fe:	4b51      	ldr	r3, [pc, #324]	@ (8005344 <MX_LWIP_Init+0x228>)
 8005200:	785b      	ldrb	r3, [r3, #1]
 8005202:	041b      	lsls	r3, r3, #16
 8005204:	431a      	orrs	r2, r3
 8005206:	4b4f      	ldr	r3, [pc, #316]	@ (8005344 <MX_LWIP_Init+0x228>)
 8005208:	789b      	ldrb	r3, [r3, #2]
 800520a:	021b      	lsls	r3, r3, #8
 800520c:	4313      	orrs	r3, r2
 800520e:	4a4d      	ldr	r2, [pc, #308]	@ (8005344 <MX_LWIP_Init+0x228>)
 8005210:	78d2      	ldrb	r2, [r2, #3]
 8005212:	4313      	orrs	r3, r2
 8005214:	061a      	lsls	r2, r3, #24
 8005216:	4b4b      	ldr	r3, [pc, #300]	@ (8005344 <MX_LWIP_Init+0x228>)
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	0619      	lsls	r1, r3, #24
 800521c:	4b49      	ldr	r3, [pc, #292]	@ (8005344 <MX_LWIP_Init+0x228>)
 800521e:	785b      	ldrb	r3, [r3, #1]
 8005220:	041b      	lsls	r3, r3, #16
 8005222:	4319      	orrs	r1, r3
 8005224:	4b47      	ldr	r3, [pc, #284]	@ (8005344 <MX_LWIP_Init+0x228>)
 8005226:	789b      	ldrb	r3, [r3, #2]
 8005228:	021b      	lsls	r3, r3, #8
 800522a:	430b      	orrs	r3, r1
 800522c:	4945      	ldr	r1, [pc, #276]	@ (8005344 <MX_LWIP_Init+0x228>)
 800522e:	78c9      	ldrb	r1, [r1, #3]
 8005230:	430b      	orrs	r3, r1
 8005232:	021b      	lsls	r3, r3, #8
 8005234:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005238:	431a      	orrs	r2, r3
 800523a:	4b42      	ldr	r3, [pc, #264]	@ (8005344 <MX_LWIP_Init+0x228>)
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	0619      	lsls	r1, r3, #24
 8005240:	4b40      	ldr	r3, [pc, #256]	@ (8005344 <MX_LWIP_Init+0x228>)
 8005242:	785b      	ldrb	r3, [r3, #1]
 8005244:	041b      	lsls	r3, r3, #16
 8005246:	4319      	orrs	r1, r3
 8005248:	4b3e      	ldr	r3, [pc, #248]	@ (8005344 <MX_LWIP_Init+0x228>)
 800524a:	789b      	ldrb	r3, [r3, #2]
 800524c:	021b      	lsls	r3, r3, #8
 800524e:	430b      	orrs	r3, r1
 8005250:	493c      	ldr	r1, [pc, #240]	@ (8005344 <MX_LWIP_Init+0x228>)
 8005252:	78c9      	ldrb	r1, [r1, #3]
 8005254:	430b      	orrs	r3, r1
 8005256:	0a1b      	lsrs	r3, r3, #8
 8005258:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800525c:	431a      	orrs	r2, r3
 800525e:	4b39      	ldr	r3, [pc, #228]	@ (8005344 <MX_LWIP_Init+0x228>)
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	0619      	lsls	r1, r3, #24
 8005264:	4b37      	ldr	r3, [pc, #220]	@ (8005344 <MX_LWIP_Init+0x228>)
 8005266:	785b      	ldrb	r3, [r3, #1]
 8005268:	041b      	lsls	r3, r3, #16
 800526a:	4319      	orrs	r1, r3
 800526c:	4b35      	ldr	r3, [pc, #212]	@ (8005344 <MX_LWIP_Init+0x228>)
 800526e:	789b      	ldrb	r3, [r3, #2]
 8005270:	021b      	lsls	r3, r3, #8
 8005272:	430b      	orrs	r3, r1
 8005274:	4933      	ldr	r1, [pc, #204]	@ (8005344 <MX_LWIP_Init+0x228>)
 8005276:	78c9      	ldrb	r1, [r1, #3]
 8005278:	430b      	orrs	r3, r1
 800527a:	0e1b      	lsrs	r3, r3, #24
 800527c:	4313      	orrs	r3, r2
 800527e:	4a34      	ldr	r2, [pc, #208]	@ (8005350 <MX_LWIP_Init+0x234>)
 8005280:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005282:	4b31      	ldr	r3, [pc, #196]	@ (8005348 <MX_LWIP_Init+0x22c>)
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	061a      	lsls	r2, r3, #24
 8005288:	4b2f      	ldr	r3, [pc, #188]	@ (8005348 <MX_LWIP_Init+0x22c>)
 800528a:	785b      	ldrb	r3, [r3, #1]
 800528c:	041b      	lsls	r3, r3, #16
 800528e:	431a      	orrs	r2, r3
 8005290:	4b2d      	ldr	r3, [pc, #180]	@ (8005348 <MX_LWIP_Init+0x22c>)
 8005292:	789b      	ldrb	r3, [r3, #2]
 8005294:	021b      	lsls	r3, r3, #8
 8005296:	4313      	orrs	r3, r2
 8005298:	4a2b      	ldr	r2, [pc, #172]	@ (8005348 <MX_LWIP_Init+0x22c>)
 800529a:	78d2      	ldrb	r2, [r2, #3]
 800529c:	4313      	orrs	r3, r2
 800529e:	061a      	lsls	r2, r3, #24
 80052a0:	4b29      	ldr	r3, [pc, #164]	@ (8005348 <MX_LWIP_Init+0x22c>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	0619      	lsls	r1, r3, #24
 80052a6:	4b28      	ldr	r3, [pc, #160]	@ (8005348 <MX_LWIP_Init+0x22c>)
 80052a8:	785b      	ldrb	r3, [r3, #1]
 80052aa:	041b      	lsls	r3, r3, #16
 80052ac:	4319      	orrs	r1, r3
 80052ae:	4b26      	ldr	r3, [pc, #152]	@ (8005348 <MX_LWIP_Init+0x22c>)
 80052b0:	789b      	ldrb	r3, [r3, #2]
 80052b2:	021b      	lsls	r3, r3, #8
 80052b4:	430b      	orrs	r3, r1
 80052b6:	4924      	ldr	r1, [pc, #144]	@ (8005348 <MX_LWIP_Init+0x22c>)
 80052b8:	78c9      	ldrb	r1, [r1, #3]
 80052ba:	430b      	orrs	r3, r1
 80052bc:	021b      	lsls	r3, r3, #8
 80052be:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80052c2:	431a      	orrs	r2, r3
 80052c4:	4b20      	ldr	r3, [pc, #128]	@ (8005348 <MX_LWIP_Init+0x22c>)
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	0619      	lsls	r1, r3, #24
 80052ca:	4b1f      	ldr	r3, [pc, #124]	@ (8005348 <MX_LWIP_Init+0x22c>)
 80052cc:	785b      	ldrb	r3, [r3, #1]
 80052ce:	041b      	lsls	r3, r3, #16
 80052d0:	4319      	orrs	r1, r3
 80052d2:	4b1d      	ldr	r3, [pc, #116]	@ (8005348 <MX_LWIP_Init+0x22c>)
 80052d4:	789b      	ldrb	r3, [r3, #2]
 80052d6:	021b      	lsls	r3, r3, #8
 80052d8:	430b      	orrs	r3, r1
 80052da:	491b      	ldr	r1, [pc, #108]	@ (8005348 <MX_LWIP_Init+0x22c>)
 80052dc:	78c9      	ldrb	r1, [r1, #3]
 80052de:	430b      	orrs	r3, r1
 80052e0:	0a1b      	lsrs	r3, r3, #8
 80052e2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80052e6:	431a      	orrs	r2, r3
 80052e8:	4b17      	ldr	r3, [pc, #92]	@ (8005348 <MX_LWIP_Init+0x22c>)
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	0619      	lsls	r1, r3, #24
 80052ee:	4b16      	ldr	r3, [pc, #88]	@ (8005348 <MX_LWIP_Init+0x22c>)
 80052f0:	785b      	ldrb	r3, [r3, #1]
 80052f2:	041b      	lsls	r3, r3, #16
 80052f4:	4319      	orrs	r1, r3
 80052f6:	4b14      	ldr	r3, [pc, #80]	@ (8005348 <MX_LWIP_Init+0x22c>)
 80052f8:	789b      	ldrb	r3, [r3, #2]
 80052fa:	021b      	lsls	r3, r3, #8
 80052fc:	430b      	orrs	r3, r1
 80052fe:	4912      	ldr	r1, [pc, #72]	@ (8005348 <MX_LWIP_Init+0x22c>)
 8005300:	78c9      	ldrb	r1, [r1, #3]
 8005302:	430b      	orrs	r3, r1
 8005304:	0e1b      	lsrs	r3, r3, #24
 8005306:	4313      	orrs	r3, r2
 8005308:	4a12      	ldr	r2, [pc, #72]	@ (8005354 <MX_LWIP_Init+0x238>)
 800530a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800530c:	4b12      	ldr	r3, [pc, #72]	@ (8005358 <MX_LWIP_Init+0x23c>)
 800530e:	9302      	str	r3, [sp, #8]
 8005310:	4b12      	ldr	r3, [pc, #72]	@ (800535c <MX_LWIP_Init+0x240>)
 8005312:	9301      	str	r3, [sp, #4]
 8005314:	2300      	movs	r3, #0
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	4b0e      	ldr	r3, [pc, #56]	@ (8005354 <MX_LWIP_Init+0x238>)
 800531a:	4a0d      	ldr	r2, [pc, #52]	@ (8005350 <MX_LWIP_Init+0x234>)
 800531c:	490b      	ldr	r1, [pc, #44]	@ (800534c <MX_LWIP_Init+0x230>)
 800531e:	4810      	ldr	r0, [pc, #64]	@ (8005360 <MX_LWIP_Init+0x244>)
 8005320:	f002 f874 	bl	800740c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005324:	480e      	ldr	r0, [pc, #56]	@ (8005360 <MX_LWIP_Init+0x244>)
 8005326:	f002 fa23 	bl	8007770 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800532a:	480d      	ldr	r0, [pc, #52]	@ (8005360 <MX_LWIP_Init+0x244>)
 800532c:	f002 fa30 	bl	8007790 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005330:	490c      	ldr	r1, [pc, #48]	@ (8005364 <MX_LWIP_Init+0x248>)
 8005332:	480b      	ldr	r0, [pc, #44]	@ (8005360 <MX_LWIP_Init+0x244>)
 8005334:	f002 fb2e 	bl	8007994 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005338:	bf00      	nop
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	200007a0 	.word	0x200007a0
 8005344:	200007a4 	.word	0x200007a4
 8005348:	200007a8 	.word	0x200007a8
 800534c:	20000794 	.word	0x20000794
 8005350:	20000798 	.word	0x20000798
 8005354:	2000079c 	.word	0x2000079c
 8005358:	08011045 	.word	0x08011045
 800535c:	080056dd 	.word	0x080056dd
 8005360:	20000760 	.word	0x20000760
 8005364:	080053b9 	.word	0x080053b9

08005368 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8005370:	f7fb ff24 	bl	80011bc <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	4b08      	ldr	r3, [pc, #32]	@ (8005398 <Ethernet_Link_Periodic_Handle+0x30>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	2b63      	cmp	r3, #99	@ 0x63
 800537e:	d907      	bls.n	8005390 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8005380:	f7fb ff1c 	bl	80011bc <HAL_GetTick>
 8005384:	4603      	mov	r3, r0
 8005386:	4a04      	ldr	r2, [pc, #16]	@ (8005398 <Ethernet_Link_Periodic_Handle+0x30>)
 8005388:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 fb04 	bl	8005998 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8005390:	bf00      	nop
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	2000075c 	.word	0x2000075c

0800539c <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80053a0:	4804      	ldr	r0, [pc, #16]	@ (80053b4 <MX_LWIP_Process+0x18>)
 80053a2:	f000 f97b 	bl	800569c <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80053a6:	f009 fa61 	bl	800e86c <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 80053aa:	4802      	ldr	r0, [pc, #8]	@ (80053b4 <MX_LWIP_Process+0x18>)
 80053ac:	f7ff ffdc 	bl	8005368 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80053b0:	bf00      	nop
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	20000760 	.word	0x20000760

080053b8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <SCB_InvalidateDCache_by_Addr>:
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80053de:	2320      	movs	r3, #32
 80053e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80053e2:	f3bf 8f4f 	dsb	sy
}
 80053e6:	bf00      	nop
    while (op_size > 0) {
 80053e8:	e00b      	b.n	8005402 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 80053ea:	4a0d      	ldr	r2, [pc, #52]	@ (8005420 <SCB_InvalidateDCache_by_Addr+0x54>)
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	4413      	add	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2b00      	cmp	r3, #0
 8005406:	dcf0      	bgt.n	80053ea <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005408:	f3bf 8f4f 	dsb	sy
}
 800540c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800540e:	f3bf 8f6f 	isb	sy
}
 8005412:	bf00      	nop
}
 8005414:	bf00      	nop
 8005416:	371c      	adds	r7, #28
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	e000ed00 	.word	0xe000ed00

08005424 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800542c:	2300      	movs	r3, #0
 800542e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005430:	4b44      	ldr	r3, [pc, #272]	@ (8005544 <low_level_init+0x120>)
 8005432:	4a45      	ldr	r2, [pc, #276]	@ (8005548 <low_level_init+0x124>)
 8005434:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005436:	2300      	movs	r3, #0
 8005438:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800543a:	2380      	movs	r3, #128	@ 0x80
 800543c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800543e:	23e1      	movs	r3, #225	@ 0xe1
 8005440:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005442:	2300      	movs	r3, #0
 8005444:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005446:	2300      	movs	r3, #0
 8005448:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800544a:	2300      	movs	r3, #0
 800544c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800544e:	4a3d      	ldr	r2, [pc, #244]	@ (8005544 <low_level_init+0x120>)
 8005450:	f107 0308 	add.w	r3, r7, #8
 8005454:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005456:	4b3b      	ldr	r3, [pc, #236]	@ (8005544 <low_level_init+0x120>)
 8005458:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800545c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800545e:	4b39      	ldr	r3, [pc, #228]	@ (8005544 <low_level_init+0x120>)
 8005460:	4a3a      	ldr	r2, [pc, #232]	@ (800554c <low_level_init+0x128>)
 8005462:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005464:	4b37      	ldr	r3, [pc, #220]	@ (8005544 <low_level_init+0x120>)
 8005466:	4a3a      	ldr	r2, [pc, #232]	@ (8005550 <low_level_init+0x12c>)
 8005468:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800546a:	4b36      	ldr	r3, [pc, #216]	@ (8005544 <low_level_init+0x120>)
 800546c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005470:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005472:	4834      	ldr	r0, [pc, #208]	@ (8005544 <low_level_init+0x120>)
 8005474:	f7fb ffe4 	bl	8001440 <HAL_ETH_Init>
 8005478:	4603      	mov	r3, r0
 800547a:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800547c:	2238      	movs	r2, #56	@ 0x38
 800547e:	2100      	movs	r1, #0
 8005480:	4834      	ldr	r0, [pc, #208]	@ (8005554 <low_level_init+0x130>)
 8005482:	f00c f81a 	bl	80114ba <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005486:	4b33      	ldr	r3, [pc, #204]	@ (8005554 <low_level_init+0x130>)
 8005488:	2221      	movs	r2, #33	@ 0x21
 800548a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800548c:	4b31      	ldr	r3, [pc, #196]	@ (8005554 <low_level_init+0x130>)
 800548e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8005492:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005494:	4b2f      	ldr	r3, [pc, #188]	@ (8005554 <low_level_init+0x130>)
 8005496:	2200      	movs	r2, #0
 8005498:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800549a:	482f      	ldr	r0, [pc, #188]	@ (8005558 <low_level_init+0x134>)
 800549c:	f001 fe7e 	bl	800719c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2206      	movs	r2, #6
 80054a4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80054a8:	4b26      	ldr	r3, [pc, #152]	@ (8005544 <low_level_init+0x120>)
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	781a      	ldrb	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80054b4:	4b23      	ldr	r3, [pc, #140]	@ (8005544 <low_level_init+0x120>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	785a      	ldrb	r2, [r3, #1]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80054c0:	4b20      	ldr	r3, [pc, #128]	@ (8005544 <low_level_init+0x120>)
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	789a      	ldrb	r2, [r3, #2]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80054cc:	4b1d      	ldr	r3, [pc, #116]	@ (8005544 <low_level_init+0x120>)
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	78da      	ldrb	r2, [r3, #3]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80054d8:	4b1a      	ldr	r3, [pc, #104]	@ (8005544 <low_level_init+0x120>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	791a      	ldrb	r2, [r3, #4]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80054e4:	4b17      	ldr	r3, [pc, #92]	@ (8005544 <low_level_init+0x120>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	795a      	ldrb	r2, [r3, #5]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80054f6:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80054fe:	f043 030a 	orr.w	r3, r3, #10
 8005502:	b2da      	uxtb	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800550a:	4914      	ldr	r1, [pc, #80]	@ (800555c <low_level_init+0x138>)
 800550c:	4814      	ldr	r0, [pc, #80]	@ (8005560 <low_level_init+0x13c>)
 800550e:	f7fb fcfe 	bl	8000f0e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8005512:	4813      	ldr	r0, [pc, #76]	@ (8005560 <low_level_init+0x13c>)
 8005514:	f7fb fd2d 	bl	8000f72 <LAN8742_Init>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d006      	beq.n	800552c <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f002 fa08 	bl	8007934 <netif_set_link_down>
    netif_set_down(netif);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f002 f99f 	bl	8007868 <netif_set_down>
 800552a:	e008      	b.n	800553e <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800552c:	7bfb      	ldrb	r3, [r7, #15]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d103      	bne.n	800553a <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 fa30 	bl	8005998 <ethernet_link_check_state>
 8005538:	e001      	b.n	800553e <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 800553a:	f7fb faa3 	bl	8000a84 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	20005138 	.word	0x20005138
 8005548:	40028000 	.word	0x40028000
 800554c:	20000128 	.word	0x20000128
 8005550:	20000088 	.word	0x20000088
 8005554:	200051e8 	.word	0x200051e8
 8005558:	08014ed4 	.word	0x08014ed4
 800555c:	2000000c 	.word	0x2000000c
 8005560:	20005220 	.word	0x20005220

08005564 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b092      	sub	sp, #72	@ 0x48
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800556e:	2300      	movs	r3, #0
 8005570:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8005572:	2300      	movs	r3, #0
 8005574:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8005576:	2300      	movs	r3, #0
 8005578:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800557c:	f107 030c 	add.w	r3, r7, #12
 8005580:	2230      	movs	r2, #48	@ 0x30
 8005582:	2100      	movs	r1, #0
 8005584:	4618      	mov	r0, r3
 8005586:	f00b ff98 	bl	80114ba <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800558a:	f107 030c 	add.w	r3, r7, #12
 800558e:	2230      	movs	r2, #48	@ 0x30
 8005590:	2100      	movs	r1, #0
 8005592:	4618      	mov	r0, r3
 8005594:	f00b ff91 	bl	80114ba <memset>

  for(q = p; q != NULL; q = q->next)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	643b      	str	r3, [r7, #64]	@ 0x40
 800559c:	e045      	b.n	800562a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800559e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055a0:	2b03      	cmp	r3, #3
 80055a2:	d902      	bls.n	80055aa <low_level_output+0x46>
      return ERR_IF;
 80055a4:	f06f 030b 	mvn.w	r3, #11
 80055a8:	e055      	b.n	8005656 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80055aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055ac:	6859      	ldr	r1, [r3, #4]
 80055ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055b0:	4613      	mov	r3, r2
 80055b2:	005b      	lsls	r3, r3, #1
 80055b4:	4413      	add	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	3348      	adds	r3, #72	@ 0x48
 80055ba:	443b      	add	r3, r7
 80055bc:	3b3c      	subs	r3, #60	@ 0x3c
 80055be:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80055c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055c2:	895b      	ldrh	r3, [r3, #10]
 80055c4:	4619      	mov	r1, r3
 80055c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055c8:	4613      	mov	r3, r2
 80055ca:	005b      	lsls	r3, r3, #1
 80055cc:	4413      	add	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	3348      	adds	r3, #72	@ 0x48
 80055d2:	443b      	add	r3, r7
 80055d4:	3b38      	subs	r3, #56	@ 0x38
 80055d6:	6019      	str	r1, [r3, #0]

    if(i>0)
 80055d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d011      	beq.n	8005602 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80055de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055e0:	1e5a      	subs	r2, r3, #1
 80055e2:	f107 000c 	add.w	r0, r7, #12
 80055e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80055e8:	460b      	mov	r3, r1
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	440b      	add	r3, r1
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	18c1      	adds	r1, r0, r3
 80055f2:	4613      	mov	r3, r2
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	4413      	add	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	3348      	adds	r3, #72	@ 0x48
 80055fc:	443b      	add	r3, r7
 80055fe:	3b34      	subs	r3, #52	@ 0x34
 8005600:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005602:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d109      	bne.n	800561e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800560a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800560c:	4613      	mov	r3, r2
 800560e:	005b      	lsls	r3, r3, #1
 8005610:	4413      	add	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	3348      	adds	r3, #72	@ 0x48
 8005616:	443b      	add	r3, r7
 8005618:	3b34      	subs	r3, #52	@ 0x34
 800561a:	2200      	movs	r2, #0
 800561c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800561e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005620:	3301      	adds	r3, #1
 8005622:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8005624:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	643b      	str	r3, [r7, #64]	@ 0x40
 800562a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1b6      	bne.n	800559e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	891b      	ldrh	r3, [r3, #8]
 8005634:	461a      	mov	r2, r3
 8005636:	4b0a      	ldr	r3, [pc, #40]	@ (8005660 <low_level_output+0xfc>)
 8005638:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800563a:	4a09      	ldr	r2, [pc, #36]	@ (8005660 <low_level_output+0xfc>)
 800563c:	f107 030c 	add.w	r3, r7, #12
 8005640:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005642:	4a07      	ldr	r2, [pc, #28]	@ (8005660 <low_level_output+0xfc>)
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8005648:	2214      	movs	r2, #20
 800564a:	4905      	ldr	r1, [pc, #20]	@ (8005660 <low_level_output+0xfc>)
 800564c:	4805      	ldr	r0, [pc, #20]	@ (8005664 <low_level_output+0x100>)
 800564e:	f7fc f881 	bl	8001754 <HAL_ETH_Transmit>

  return errval;
 8005652:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8005656:	4618      	mov	r0, r3
 8005658:	3748      	adds	r7, #72	@ 0x48
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	200051e8 	.word	0x200051e8
 8005664:	20005138 	.word	0x20005138

08005668 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005670:	2300      	movs	r3, #0
 8005672:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005674:	4b07      	ldr	r3, [pc, #28]	@ (8005694 <low_level_input+0x2c>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d105      	bne.n	8005688 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800567c:	f107 030c 	add.w	r3, r7, #12
 8005680:	4619      	mov	r1, r3
 8005682:	4805      	ldr	r0, [pc, #20]	@ (8005698 <low_level_input+0x30>)
 8005684:	f7fc f8fa 	bl	800187c <HAL_ETH_ReadData>
  }

  return p;
 8005688:	68fb      	ldr	r3, [r7, #12]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	20005134 	.word	0x20005134
 8005698:	20005138 	.word	0x20005138

0800569c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80056a4:	2300      	movs	r3, #0
 80056a6:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f7ff ffdd 	bl	8005668 <low_level_input>
 80056ae:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00a      	beq.n	80056cc <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	6879      	ldr	r1, [r7, #4]
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	4798      	blx	r3
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d002      	beq.n	80056cc <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f002 fce4 	bl	8008094 <pbuf_free>
      }
    }
  } while(p!=NULL);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1ea      	bne.n	80056a8 <ethernetif_input+0xc>
}
 80056d2:	bf00      	nop
 80056d4:	bf00      	nop
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d106      	bne.n	80056f8 <ethernetif_init+0x1c>
 80056ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005724 <ethernetif_init+0x48>)
 80056ec:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80056f0:	490d      	ldr	r1, [pc, #52]	@ (8005728 <ethernetif_init+0x4c>)
 80056f2:	480e      	ldr	r0, [pc, #56]	@ (800572c <ethernetif_init+0x50>)
 80056f4:	f00b fe7c 	bl	80113f0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2273      	movs	r2, #115	@ 0x73
 80056fc:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2274      	movs	r2, #116	@ 0x74
 8005704:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a09      	ldr	r2, [pc, #36]	@ (8005730 <ethernetif_init+0x54>)
 800570c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a08      	ldr	r2, [pc, #32]	@ (8005734 <ethernetif_init+0x58>)
 8005712:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f7ff fe85 	bl	8005424 <low_level_init>

  return ERR_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3708      	adds	r7, #8
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	08012288 	.word	0x08012288
 8005728:	080122a4 	.word	0x080122a4
 800572c:	080122b4 	.word	0x080122b4
 8005730:	0800f4fd 	.word	0x0800f4fd
 8005734:	08005565 	.word	0x08005565

08005738 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005744:	68f9      	ldr	r1, [r7, #12]
 8005746:	4807      	ldr	r0, [pc, #28]	@ (8005764 <pbuf_free_custom+0x2c>)
 8005748:	f001 fe0a 	bl	8007360 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800574c:	4b06      	ldr	r3, [pc, #24]	@ (8005768 <pbuf_free_custom+0x30>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d102      	bne.n	800575a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005754:	4b04      	ldr	r3, [pc, #16]	@ (8005768 <pbuf_free_custom+0x30>)
 8005756:	2200      	movs	r2, #0
 8005758:	701a      	strb	r2, [r3, #0]
  }
}
 800575a:	bf00      	nop
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	08014ed4 	.word	0x08014ed4
 8005768:	20005134 	.word	0x20005134

0800576c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005770:	f7fb fd24 	bl	80011bc <HAL_GetTick>
 8005774:	4603      	mov	r3, r0
}
 8005776:	4618      	mov	r0, r3
 8005778:	bd80      	pop	{r7, pc}
	...

0800577c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b08e      	sub	sp, #56	@ 0x38
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005784:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]
 800578c:	605a      	str	r2, [r3, #4]
 800578e:	609a      	str	r2, [r3, #8]
 8005790:	60da      	str	r2, [r3, #12]
 8005792:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a52      	ldr	r2, [pc, #328]	@ (80058e4 <HAL_ETH_MspInit+0x168>)
 800579a:	4293      	cmp	r3, r2
 800579c:	f040 809e 	bne.w	80058dc <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80057a0:	4b51      	ldr	r3, [pc, #324]	@ (80058e8 <HAL_ETH_MspInit+0x16c>)
 80057a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a4:	4a50      	ldr	r2, [pc, #320]	@ (80058e8 <HAL_ETH_MspInit+0x16c>)
 80057a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80057aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80057ac:	4b4e      	ldr	r3, [pc, #312]	@ (80058e8 <HAL_ETH_MspInit+0x16c>)
 80057ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057b4:	623b      	str	r3, [r7, #32]
 80057b6:	6a3b      	ldr	r3, [r7, #32]
 80057b8:	4b4b      	ldr	r3, [pc, #300]	@ (80058e8 <HAL_ETH_MspInit+0x16c>)
 80057ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057bc:	4a4a      	ldr	r2, [pc, #296]	@ (80058e8 <HAL_ETH_MspInit+0x16c>)
 80057be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80057c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80057c4:	4b48      	ldr	r3, [pc, #288]	@ (80058e8 <HAL_ETH_MspInit+0x16c>)
 80057c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80057cc:	61fb      	str	r3, [r7, #28]
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	4b45      	ldr	r3, [pc, #276]	@ (80058e8 <HAL_ETH_MspInit+0x16c>)
 80057d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057d4:	4a44      	ldr	r2, [pc, #272]	@ (80058e8 <HAL_ETH_MspInit+0x16c>)
 80057d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80057da:	6313      	str	r3, [r2, #48]	@ 0x30
 80057dc:	4b42      	ldr	r3, [pc, #264]	@ (80058e8 <HAL_ETH_MspInit+0x16c>)
 80057de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057e4:	61bb      	str	r3, [r7, #24]
 80057e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80057e8:	4b3f      	ldr	r3, [pc, #252]	@ (80058e8 <HAL_ETH_MspInit+0x16c>)
 80057ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ec:	4a3e      	ldr	r2, [pc, #248]	@ (80058e8 <HAL_ETH_MspInit+0x16c>)
 80057ee:	f043 0304 	orr.w	r3, r3, #4
 80057f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80057f4:	4b3c      	ldr	r3, [pc, #240]	@ (80058e8 <HAL_ETH_MspInit+0x16c>)
 80057f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	617b      	str	r3, [r7, #20]
 80057fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005800:	4b39      	ldr	r3, [pc, #228]	@ (80058e8 <HAL_ETH_MspInit+0x16c>)
 8005802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005804:	4a38      	ldr	r2, [pc, #224]	@ (80058e8 <HAL_ETH_MspInit+0x16c>)
 8005806:	f043 0301 	orr.w	r3, r3, #1
 800580a:	6313      	str	r3, [r2, #48]	@ 0x30
 800580c:	4b36      	ldr	r3, [pc, #216]	@ (80058e8 <HAL_ETH_MspInit+0x16c>)
 800580e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	613b      	str	r3, [r7, #16]
 8005816:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005818:	4b33      	ldr	r3, [pc, #204]	@ (80058e8 <HAL_ETH_MspInit+0x16c>)
 800581a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800581c:	4a32      	ldr	r2, [pc, #200]	@ (80058e8 <HAL_ETH_MspInit+0x16c>)
 800581e:	f043 0302 	orr.w	r3, r3, #2
 8005822:	6313      	str	r3, [r2, #48]	@ 0x30
 8005824:	4b30      	ldr	r3, [pc, #192]	@ (80058e8 <HAL_ETH_MspInit+0x16c>)
 8005826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	60fb      	str	r3, [r7, #12]
 800582e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005830:	4b2d      	ldr	r3, [pc, #180]	@ (80058e8 <HAL_ETH_MspInit+0x16c>)
 8005832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005834:	4a2c      	ldr	r2, [pc, #176]	@ (80058e8 <HAL_ETH_MspInit+0x16c>)
 8005836:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800583a:	6313      	str	r3, [r2, #48]	@ 0x30
 800583c:	4b2a      	ldr	r3, [pc, #168]	@ (80058e8 <HAL_ETH_MspInit+0x16c>)
 800583e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005844:	60bb      	str	r3, [r7, #8]
 8005846:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005848:	2332      	movs	r3, #50	@ 0x32
 800584a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800584c:	2302      	movs	r3, #2
 800584e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005850:	2300      	movs	r3, #0
 8005852:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005854:	2303      	movs	r3, #3
 8005856:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005858:	230b      	movs	r3, #11
 800585a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800585c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005860:	4619      	mov	r1, r3
 8005862:	4822      	ldr	r0, [pc, #136]	@ (80058ec <HAL_ETH_MspInit+0x170>)
 8005864:	f7fd f83a 	bl	80028dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005868:	2386      	movs	r3, #134	@ 0x86
 800586a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800586c:	2302      	movs	r3, #2
 800586e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005870:	2300      	movs	r3, #0
 8005872:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005874:	2303      	movs	r3, #3
 8005876:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005878:	230b      	movs	r3, #11
 800587a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800587c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005880:	4619      	mov	r1, r3
 8005882:	481b      	ldr	r0, [pc, #108]	@ (80058f0 <HAL_ETH_MspInit+0x174>)
 8005884:	f7fd f82a 	bl	80028dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005888:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800588c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800588e:	2302      	movs	r3, #2
 8005890:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005892:	2300      	movs	r3, #0
 8005894:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005896:	2303      	movs	r3, #3
 8005898:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800589a:	230b      	movs	r3, #11
 800589c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800589e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058a2:	4619      	mov	r1, r3
 80058a4:	4813      	ldr	r0, [pc, #76]	@ (80058f4 <HAL_ETH_MspInit+0x178>)
 80058a6:	f7fd f819 	bl	80028dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80058aa:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80058ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058b0:	2302      	movs	r3, #2
 80058b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058b4:	2300      	movs	r3, #0
 80058b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058b8:	2303      	movs	r3, #3
 80058ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80058bc:	230b      	movs	r3, #11
 80058be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80058c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058c4:	4619      	mov	r1, r3
 80058c6:	480c      	ldr	r0, [pc, #48]	@ (80058f8 <HAL_ETH_MspInit+0x17c>)
 80058c8:	f7fd f808 	bl	80028dc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80058cc:	2200      	movs	r2, #0
 80058ce:	2100      	movs	r1, #0
 80058d0:	203d      	movs	r0, #61	@ 0x3d
 80058d2:	f7fb fd7e 	bl	80013d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80058d6:	203d      	movs	r0, #61	@ 0x3d
 80058d8:	f7fb fd97 	bl	800140a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80058dc:	bf00      	nop
 80058de:	3738      	adds	r7, #56	@ 0x38
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	40028000 	.word	0x40028000
 80058e8:	40023800 	.word	0x40023800
 80058ec:	40020800 	.word	0x40020800
 80058f0:	40020000 	.word	0x40020000
 80058f4:	40020400 	.word	0x40020400
 80058f8:	40021800 	.word	0x40021800

080058fc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005900:	4802      	ldr	r0, [pc, #8]	@ (800590c <ETH_PHY_IO_Init+0x10>)
 8005902:	f7fc fb89 	bl	8002018 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	bd80      	pop	{r7, pc}
 800590c:	20005138 	.word	0x20005138

08005910 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005910:	b480      	push	{r7}
 8005912:	af00      	add	r7, sp, #0
  return 0;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	68f9      	ldr	r1, [r7, #12]
 8005932:	4807      	ldr	r0, [pc, #28]	@ (8005950 <ETH_PHY_IO_ReadReg+0x30>)
 8005934:	f7fc f9ca 	bl	8001ccc <HAL_ETH_ReadPHYRegister>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d002      	beq.n	8005944 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800593e:	f04f 33ff 	mov.w	r3, #4294967295
 8005942:	e000      	b.n	8005946 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	20005138 	.word	0x20005138

08005954 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	68f9      	ldr	r1, [r7, #12]
 8005966:	4807      	ldr	r0, [pc, #28]	@ (8005984 <ETH_PHY_IO_WriteReg+0x30>)
 8005968:	f7fc f9fb 	bl	8001d62 <HAL_ETH_WritePHYRegister>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d002      	beq.n	8005978 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8005972:	f04f 33ff 	mov.w	r3, #4294967295
 8005976:	e000      	b.n	800597a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	20005138 	.word	0x20005138

08005988 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800598c:	f7fb fc16 	bl	80011bc <HAL_GetTick>
 8005990:	4603      	mov	r3, r0
}
 8005992:	4618      	mov	r0, r3
 8005994:	bd80      	pop	{r7, pc}
	...

08005998 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b0a0      	sub	sp, #128	@ 0x80
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80059a0:	f107 030c 	add.w	r3, r7, #12
 80059a4:	2264      	movs	r2, #100	@ 0x64
 80059a6:	2100      	movs	r1, #0
 80059a8:	4618      	mov	r0, r3
 80059aa:	f00b fd86 	bl	80114ba <memset>
  int32_t PHYLinkState = 0;
 80059ae:	2300      	movs	r3, #0
 80059b0:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80059b2:	2300      	movs	r3, #0
 80059b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80059b6:	2300      	movs	r3, #0
 80059b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80059ba:	2300      	movs	r3, #0
 80059bc:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80059be:	483a      	ldr	r0, [pc, #232]	@ (8005aa8 <ethernet_link_check_state+0x110>)
 80059c0:	f7fb fb24 	bl	800100c <LAN8742_GetLinkState>
 80059c4:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80059cc:	089b      	lsrs	r3, r3, #2
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00c      	beq.n	80059f2 <ethernet_link_check_state+0x5a>
 80059d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059da:	2b01      	cmp	r3, #1
 80059dc:	dc09      	bgt.n	80059f2 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop_IT(&heth);
 80059de:	4833      	ldr	r0, [pc, #204]	@ (8005aac <ethernet_link_check_state+0x114>)
 80059e0:	f7fb fe38 	bl	8001654 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f001 ff3f 	bl	8007868 <netif_set_down>
    netif_set_link_down(netif);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f001 ffa2 	bl	8007934 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80059f0:	e055      	b.n	8005a9e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d14e      	bne.n	8005a9e <ethernet_link_check_state+0x106>
 8005a00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	dd4b      	ble.n	8005a9e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8005a06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a08:	3b02      	subs	r3, #2
 8005a0a:	2b03      	cmp	r3, #3
 8005a0c:	d82a      	bhi.n	8005a64 <ethernet_link_check_state+0xcc>
 8005a0e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a14 <ethernet_link_check_state+0x7c>)
 8005a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a14:	08005a25 	.word	0x08005a25
 8005a18:	08005a37 	.word	0x08005a37
 8005a1c:	08005a47 	.word	0x08005a47
 8005a20:	08005a57 	.word	0x08005a57
      duplex = ETH_FULLDUPLEX_MODE;
 8005a24:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005a28:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005a2a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005a2e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005a30:	2301      	movs	r3, #1
 8005a32:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005a34:	e017      	b.n	8005a66 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8005a36:	2300      	movs	r3, #0
 8005a38:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005a3a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005a3e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005a40:	2301      	movs	r3, #1
 8005a42:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005a44:	e00f      	b.n	8005a66 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8005a46:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005a4a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005a50:	2301      	movs	r3, #1
 8005a52:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005a54:	e007      	b.n	8005a66 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8005a56:	2300      	movs	r3, #0
 8005a58:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005a62:	e000      	b.n	8005a66 <ethernet_link_check_state+0xce>
      break;
 8005a64:	bf00      	nop
    if(linkchanged)
 8005a66:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d018      	beq.n	8005a9e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005a6c:	f107 030c 	add.w	r3, r7, #12
 8005a70:	4619      	mov	r1, r3
 8005a72:	480e      	ldr	r0, [pc, #56]	@ (8005aac <ethernet_link_check_state+0x114>)
 8005a74:	f7fc f9be 	bl	8001df4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005a78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a7a:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8005a7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a7e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005a80:	f107 030c 	add.w	r3, r7, #12
 8005a84:	4619      	mov	r1, r3
 8005a86:	4809      	ldr	r0, [pc, #36]	@ (8005aac <ethernet_link_check_state+0x114>)
 8005a88:	f7fc faab 	bl	8001fe2 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8005a8c:	4807      	ldr	r0, [pc, #28]	@ (8005aac <ethernet_link_check_state+0x114>)
 8005a8e:	f7fb fd71 	bl	8001574 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f001 fe7c 	bl	8007790 <netif_set_up>
      netif_set_link_up(netif);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f001 ff17 	bl	80078cc <netif_set_link_up>
}
 8005a9e:	bf00      	nop
 8005aa0:	3780      	adds	r7, #128	@ 0x80
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	20005220 	.word	0x20005220
 8005aac:	20005138 	.word	0x20005138

08005ab0 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af02      	add	r7, sp, #8
 8005ab6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005ab8:	4812      	ldr	r0, [pc, #72]	@ (8005b04 <HAL_ETH_RxAllocateCallback+0x54>)
 8005aba:	f001 fbe3 	bl	8007284 <memp_malloc_pool>
 8005abe:	60f8      	str	r0, [r7, #12]
  if (p)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d014      	beq.n	8005af0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f103 0220 	add.w	r2, r3, #32
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4a0d      	ldr	r2, [pc, #52]	@ (8005b08 <HAL_ETH_RxAllocateCallback+0x58>)
 8005ad4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005ade:	9201      	str	r2, [sp, #4]
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2241      	movs	r2, #65	@ 0x41
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	2000      	movs	r0, #0
 8005aea:	f002 f919 	bl	8007d20 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005aee:	e005      	b.n	8005afc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005af0:	4b06      	ldr	r3, [pc, #24]	@ (8005b0c <HAL_ETH_RxAllocateCallback+0x5c>)
 8005af2:	2201      	movs	r2, #1
 8005af4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]
}
 8005afc:	bf00      	nop
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	08014ed4 	.word	0x08014ed4
 8005b08:	08005739 	.word	0x08005739
 8005b0c:	20005134 	.word	0x20005134

08005b10 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b088      	sub	sp, #32
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
 8005b1c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8005b26:	2300      	movs	r3, #0
 8005b28:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	3b20      	subs	r3, #32
 8005b2e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	2200      	movs	r2, #0
 8005b34:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	887a      	ldrh	r2, [r7, #2]
 8005b40:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d103      	bne.n	8005b52 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	69fa      	ldr	r2, [r7, #28]
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	e003      	b.n	8005b5a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69fa      	ldr	r2, [r7, #28]
 8005b58:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	69fa      	ldr	r2, [r7, #28]
 8005b5e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	61fb      	str	r3, [r7, #28]
 8005b66:	e009      	b.n	8005b7c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	891a      	ldrh	r2, [r3, #8]
 8005b6c:	887b      	ldrh	r3, [r7, #2]
 8005b6e:	4413      	add	r3, r2
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	61fb      	str	r3, [r7, #28]
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1f2      	bne.n	8005b68 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8005b82:	887b      	ldrh	r3, [r7, #2]
 8005b84:	4619      	mov	r1, r3
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7ff fc20 	bl	80053cc <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005b8c:	bf00      	nop
 8005b8e:	3720      	adds	r7, #32
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d002      	beq.n	8005baa <fs_open+0x16>
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d102      	bne.n	8005bb0 <fs_open+0x1c>
    return ERR_ARG;
 8005baa:	f06f 030f 	mvn.w	r3, #15
 8005bae:	e028      	b.n	8005c02 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8005bb0:	4b16      	ldr	r3, [pc, #88]	@ (8005c0c <fs_open+0x78>)
 8005bb2:	60fb      	str	r3, [r7, #12]
 8005bb4:	e020      	b.n	8005bf8 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	4619      	mov	r1, r3
 8005bbc:	6838      	ldr	r0, [r7, #0]
 8005bbe:	f7fa fb3f 	bl	8000240 <strcmp>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d114      	bne.n	8005bf2 <fs_open+0x5e>
      file->data = (const char *)f->data;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	689a      	ldr	r2, [r3, #8]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	68da      	ldr	r2, [r3, #12]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	68da      	ldr	r2, [r3, #12]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	7c1a      	ldrb	r2, [r3, #16]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	e007      	b.n	8005c02 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	60fb      	str	r3, [r7, #12]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1db      	bne.n	8005bb6 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8005bfe:	f06f 0305 	mvn.w	r3, #5
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	08015308 	.word	0x08015308

08005c10 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	1ad3      	subs	r3, r2, r3
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b082      	sub	sp, #8
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8005c4a:	22ac      	movs	r2, #172	@ 0xac
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f00b fc33 	bl	80114ba <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8005c54:	bf00      	nop
 8005c56:	3708      	adds	r7, #8
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8005c62:	20ac      	movs	r0, #172	@ 0xac
 8005c64:	f001 f9a0 	bl	8006fa8 <mem_malloc>
 8005c68:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d002      	beq.n	8005c76 <http_state_alloc+0x1a>
    http_state_init(ret);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f7ff ffe6 	bl	8005c42 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8005c76:	687b      	ldr	r3, [r7, #4]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d007      	beq.n	8005ca0 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7ff ffbb 	bl	8005c10 <fs_close>
    hs->handle = NULL;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d007      	beq.n	8005cb8 <http_state_eof+0x38>
    pbuf_free(hs->req);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	4618      	mov	r0, r3
 8005cae:	f002 f9f1 	bl	8008094 <pbuf_free>
    hs->req = NULL;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8005cb8:	bf00      	nop
 8005cba:	3708      	adds	r7, #8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d005      	beq.n	8005cda <http_state_free+0x1a>
    http_state_eof(hs);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7ff ffd6 	bl	8005c80 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f001 f801 	bl	8006cdc <mem_free>
  }
}
 8005cda:	bf00      	nop
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
	...

08005ce4 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
 8005cf0:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d106      	bne.n	8005d06 <http_write+0x22>
 8005cf8:	4b2c      	ldr	r3, [pc, #176]	@ (8005dac <http_write+0xc8>)
 8005cfa:	f240 2219 	movw	r2, #537	@ 0x219
 8005cfe:	492c      	ldr	r1, [pc, #176]	@ (8005db0 <http_write+0xcc>)
 8005d00:	482c      	ldr	r0, [pc, #176]	@ (8005db4 <http_write+0xd0>)
 8005d02:	f00b fb75 	bl	80113f0 <iprintf>
  len = *length;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	881b      	ldrh	r3, [r3, #0]
 8005d0a:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8005d0c:	8afb      	ldrh	r3, [r7, #22]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <http_write+0x32>
    return ERR_OK;
 8005d12:	2300      	movs	r3, #0
 8005d14:	e045      	b.n	8005da2 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8005d1c:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8005d1e:	8aba      	ldrh	r2, [r7, #20]
 8005d20:	8afb      	ldrh	r3, [r7, #22]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d201      	bcs.n	8005d2a <http_write+0x46>
    len = max_len;
 8005d26:	8abb      	ldrh	r3, [r7, #20]
 8005d28:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8005d32:	8afa      	ldrh	r2, [r7, #22]
 8005d34:	8abb      	ldrh	r3, [r7, #20]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d901      	bls.n	8005d3e <http_write+0x5a>
    len = max_len;
 8005d3a:	8abb      	ldrh	r3, [r7, #20]
 8005d3c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8005d3e:	78fb      	ldrb	r3, [r7, #3]
 8005d40:	8afa      	ldrh	r2, [r7, #22]
 8005d42:	68b9      	ldr	r1, [r7, #8]
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f006 ff29 	bl	800cb9c <tcp_write>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8005d4e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d56:	d10f      	bne.n	8005d78 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d004      	beq.n	8005d6c <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8005d68:	2b08      	cmp	r3, #8
 8005d6a:	d902      	bls.n	8005d72 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	82fb      	strh	r3, [r7, #22]
 8005d70:	e002      	b.n	8005d78 <http_write+0x94>
      } else {
        len /= 2;
 8005d72:	8afb      	ldrh	r3, [r7, #22]
 8005d74:	085b      	lsrs	r3, r3, #1
 8005d76:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8005d78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d80:	d102      	bne.n	8005d88 <http_write+0xa4>
 8005d82:	8afb      	ldrh	r3, [r7, #22]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d8da      	bhi.n	8005d3e <http_write+0x5a>

  if (err == ERR_OK) {
 8005d88:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d103      	bne.n	8005d98 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	8afa      	ldrh	r2, [r7, #22]
 8005d94:	801a      	strh	r2, [r3, #0]
 8005d96:	e002      	b.n	8005d9e <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8005d9e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	0801231c 	.word	0x0801231c
 8005db0:	08012354 	.word	0x08012354
 8005db4:	08012364 	.word	0x08012364

08005db8 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f003 ffab 	bl	8009d24 <tcp_arg>
  altcp_recv(pcb, NULL);
 8005dce:	2100      	movs	r1, #0
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f003 ffb9 	bl	8009d48 <tcp_recv>
  altcp_err(pcb, NULL);
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f003 fff9 	bl	8009dd0 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8005dde:	2200      	movs	r2, #0
 8005de0:	2100      	movs	r1, #0
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f004 f82e 	bl	8009e44 <tcp_poll>
  altcp_sent(pcb, NULL);
 8005de8:	2100      	movs	r1, #0
 8005dea:	68f8      	ldr	r0, [r7, #12]
 8005dec:	f003 ffce 	bl	8009d8c <tcp_sent>
  if (hs != NULL) {
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d002      	beq.n	8005dfc <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8005df6:	68b8      	ldr	r0, [r7, #8]
 8005df8:	f7ff ff62 	bl	8005cc0 <http_state_free>
  }

  if (abort_conn) {
 8005dfc:	79fb      	ldrb	r3, [r7, #7]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d004      	beq.n	8005e0c <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f002 fece 	bl	8008ba4 <tcp_abort>
    return ERR_OK;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	e00f      	b.n	8005e2c <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f002 fddf 	bl	80089d0 <tcp_close>
 8005e12:	4603      	mov	r3, r0
 8005e14:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8005e16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d004      	beq.n	8005e28 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8005e1e:	2204      	movs	r2, #4
 8005e20:	4904      	ldr	r1, [pc, #16]	@ (8005e34 <http_close_or_abort_conn+0x7c>)
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f004 f80e 	bl	8009e44 <tcp_poll>
  }
  return err;
 8005e28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3718      	adds	r7, #24
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	08006647 	.word	0x08006647

08005e38 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8005e42:	2200      	movs	r2, #0
 8005e44:	6839      	ldr	r1, [r7, #0]
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f7ff ffb6 	bl	8005db8 <http_close_or_abort_conn>
 8005e4c:	4603      	mov	r3, r0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3708      	adds	r7, #8
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b082      	sub	sp, #8
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
 8005e5e:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8005e60:	6839      	ldr	r1, [r7, #0]
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7ff ffe8 	bl	8005e38 <http_close_conn>
  }
}
 8005e68:	bf00      	nop
 8005e6a:	3708      	adds	r7, #8
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d003      	beq.n	8005e88 <extract_uri_parameters+0x18>
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d101      	bne.n	8005e8c <extract_uri_parameters+0x1c>
    return (0);
 8005e88:	2300      	movs	r3, #0
 8005e8a:	e04e      	b.n	8005f2a <extract_uri_parameters+0xba>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8005e90:	2300      	movs	r3, #0
 8005e92:	613b      	str	r3, [r7, #16]
 8005e94:	e042      	b.n	8005f1c <extract_uri_parameters+0xac>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	330a      	adds	r3, #10
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4413      	add	r3, r2
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	605a      	str	r2, [r3, #4]

    /* Remember the start of this name=value pair */
    equals = pair;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 8005ea8:	2126      	movs	r1, #38	@ 0x26
 8005eaa:	6978      	ldr	r0, [r7, #20]
 8005eac:	f00b fb0d 	bl	80114ca <strchr>
 8005eb0:	6178      	str	r0, [r7, #20]
    if (pair) {
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d006      	beq.n	8005ec6 <extract_uri_parameters+0x56>
      *pair = '\0';
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	701a      	strb	r2, [r3, #0]
      pair++;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	e00c      	b.n	8005ee0 <extract_uri_parameters+0x70>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 8005ec6:	2120      	movs	r1, #32
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f00b fafe 	bl	80114ca <strchr>
 8005ece:	6178      	str	r0, [r7, #20]
      if (pair) {
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <extract_uri_parameters+0x6c>
        *pair = '\0';
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 8005edc:	2300      	movs	r3, #0
 8005ede:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 8005ee0:	213d      	movs	r1, #61	@ 0x3d
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f00b faf1 	bl	80114ca <strchr>
 8005ee8:	60f8      	str	r0, [r7, #12]
    if (equals) {
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00b      	beq.n	8005f08 <extract_uri_parameters+0x98>
      *equals = '\0';
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	1c5a      	adds	r2, r3, #1
 8005efa:	6879      	ldr	r1, [r7, #4]
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	331a      	adds	r3, #26
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	440b      	add	r3, r1
 8005f04:	605a      	str	r2, [r3, #4]
 8005f06:	e006      	b.n	8005f16 <extract_uri_parameters+0xa6>
    } else {
      http_cgi_param_vals[loop] = NULL;
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	331a      	adds	r3, #26
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	4413      	add	r3, r2
 8005f12:	2200      	movs	r2, #0
 8005f14:	605a      	str	r2, [r3, #4]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	613b      	str	r3, [r7, #16]
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	2b0f      	cmp	r3, #15
 8005f20:	dc02      	bgt.n	8005f28 <extract_uri_parameters+0xb8>
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1b6      	bne.n	8005e96 <extract_uri_parameters+0x26>
    }
  }

  return loop;
 8005f28:	693b      	ldr	r3, [r7, #16]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3718      	adds	r7, #24
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
	...

08005f34 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d105      	bne.n	8005f52 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8005f46:	6839      	ldr	r1, [r7, #0]
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f7ff ff84 	bl	8005e56 <http_eof>
    return 0;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	e016      	b.n	8005f80 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7ff fe64 	bl	8005c24 <fs_bytes_left>
 8005f5c:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	dc05      	bgt.n	8005f70 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8005f64:	6839      	ldr	r1, [r7, #0]
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f7ff ff75 	bl	8005e56 <http_eof>
    return 0;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	e007      	b.n	8005f80 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8005f70:	4b05      	ldr	r3, [pc, #20]	@ (8005f88 <http_check_eof+0x54>)
 8005f72:	f240 429d 	movw	r2, #1181	@ 0x49d
 8005f76:	4905      	ldr	r1, [pc, #20]	@ (8005f8c <http_check_eof+0x58>)
 8005f78:	4805      	ldr	r0, [pc, #20]	@ (8005f90 <http_check_eof+0x5c>)
 8005f7a:	f00b fa39 	bl	80113f0 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8005f7e:	2301      	movs	r3, #1
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	0801231c 	.word	0x0801231c
 8005f8c:	0801238c 	.word	0x0801238c
 8005f90:	08012364 	.word	0x08012364

08005f94 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d803      	bhi.n	8005fb6 <http_send_data_nonssi+0x22>
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	e001      	b.n	8005fba <http_send_data_nonssi+0x26>
 8005fb6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005fba:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	6999      	ldr	r1, [r3, #24]
 8005fc0:	f107 020c 	add.w	r2, r7, #12
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7ff fe8c 	bl	8005ce4 <http_write>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8005fd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d10d      	bne.n	8005ff4 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	89ba      	ldrh	r2, [r7, #12]
 8005fe2:	441a      	add	r2, r3
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fec:	89ba      	ldrh	r2, [r7, #12]
 8005fee:	1a9a      	subs	r2, r3, r2
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  return data_to_send;
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b084      	sub	sp, #16
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
 8006006:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8006008:	2300      	movs	r3, #0
 800600a:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <http_send+0x18>
    return 0;
 8006012:	2300      	movs	r3, #0
 8006014:	e025      	b.n	8006062 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601a:	2b00      	cmp	r3, #0
 800601c:	d108      	bne.n	8006030 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800601e:	6839      	ldr	r1, [r7, #0]
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7ff ff87 	bl	8005f34 <http_check_eof>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d101      	bne.n	8006030 <http_send+0x32>
      return 0;
 800602c:	2300      	movs	r3, #0
 800602e:	e018      	b.n	8006062 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8006030:	6839      	ldr	r1, [r7, #0]
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7ff ffae 	bl	8005f94 <http_send_data_nonssi>
 8006038:	4603      	mov	r3, r0
 800603a:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10d      	bne.n	8006060 <http_send+0x62>
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	695b      	ldr	r3, [r3, #20]
 8006048:	4618      	mov	r0, r3
 800604a:	f7ff fdeb 	bl	8005c24 <fs_bytes_left>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	dc05      	bgt.n	8006060 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8006054:	6839      	ldr	r1, [r7, #0]
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7ff fefd 	bl	8005e56 <http_eof>
    return 0;
 800605c:	2300      	movs	r3, #0
 800605e:	e000      	b.n	8006062 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8006060:	7bfb      	ldrb	r3, [r7, #15]
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
	...

0800606c <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	4a1c      	ldr	r2, [pc, #112]	@ (80060ec <http_get_404_file+0x80>)
 800607a:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4619      	mov	r1, r3
 8006084:	4610      	mov	r0, r2
 8006086:	f7ff fd85 	bl	8005b94 <fs_open>
 800608a:	4603      	mov	r3, r0
 800608c:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800608e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d024      	beq.n	80060e0 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	4a15      	ldr	r2, [pc, #84]	@ (80060f0 <http_get_404_file+0x84>)
 800609a:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4619      	mov	r1, r3
 80060a4:	4610      	mov	r0, r2
 80060a6:	f7ff fd75 	bl	8005b94 <fs_open>
 80060aa:	4603      	mov	r3, r0
 80060ac:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80060ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d014      	beq.n	80060e0 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	4a0e      	ldr	r2, [pc, #56]	@ (80060f4 <http_get_404_file+0x88>)
 80060ba:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4619      	mov	r1, r3
 80060c4:	4610      	mov	r0, r2
 80060c6:	f7ff fd65 	bl	8005b94 <fs_open>
 80060ca:	4603      	mov	r3, r0
 80060cc:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 80060ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d004      	beq.n	80060e0 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	2200      	movs	r2, #0
 80060da:	601a      	str	r2, [r3, #0]
        return NULL;
 80060dc:	2300      	movs	r3, #0
 80060de:	e000      	b.n	80060e2 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 80060e0:	687b      	ldr	r3, [r7, #4]
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	080123c4 	.word	0x080123c4
 80060f0:	080123d0 	.word	0x080123d0
 80060f4:	080123dc 	.word	0x080123dc

080060f8 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b08e      	sub	sp, #56	@ 0x38
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	627b      	str	r3, [r7, #36]	@ 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8006108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610a:	2b00      	cmp	r3, #0
 800610c:	d106      	bne.n	800611c <http_parse_request+0x24>
 800610e:	4b65      	ldr	r3, [pc, #404]	@ (80062a4 <http_parse_request+0x1ac>)
 8006110:	f240 72ae 	movw	r2, #1966	@ 0x7ae
 8006114:	4964      	ldr	r1, [pc, #400]	@ (80062a8 <http_parse_request+0x1b0>)
 8006116:	4865      	ldr	r0, [pc, #404]	@ (80062ac <http_parse_request+0x1b4>)
 8006118:	f00b f96a 	bl	80113f0 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d106      	bne.n	8006130 <http_parse_request+0x38>
 8006122:	4b60      	ldr	r3, [pc, #384]	@ (80062a4 <http_parse_request+0x1ac>)
 8006124:	f240 72af 	movw	r2, #1967	@ 0x7af
 8006128:	4961      	ldr	r1, [pc, #388]	@ (80062b0 <http_parse_request+0x1b8>)
 800612a:	4860      	ldr	r0, [pc, #384]	@ (80062ac <http_parse_request+0x1b4>)
 800612c:	f00b f960 	bl	80113f0 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d103      	bne.n	8006140 <http_parse_request+0x48>
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d002      	beq.n	8006146 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8006140:	f06f 0307 	mvn.w	r3, #7
 8006144:	e0a9      	b.n	800629a <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d103      	bne.n	8006156 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006152:	621a      	str	r2, [r3, #32]
 8006154:	e005      	b.n	8006162 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800615c:	4618      	mov	r0, r3
 800615e:	f002 f85b 	bl	8008218 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8006162:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006164:	f002 f836 	bl	80081d4 <pbuf_ref>

  if (hs->req->next != NULL) {
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	6a1b      	ldr	r3, [r3, #32]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d012      	beq.n	8006198 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	891b      	ldrh	r3, [r3, #8]
 8006178:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800617c:	4293      	cmp	r3, r2
 800617e:	bf28      	it	cs
 8006180:	4613      	movcs	r3, r2
 8006182:	867b      	strh	r3, [r7, #50]	@ 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	6a18      	ldr	r0, [r3, #32]
 8006188:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800618a:	2300      	movs	r3, #0
 800618c:	4949      	ldr	r1, [pc, #292]	@ (80062b4 <http_parse_request+0x1bc>)
 800618e:	f002 f96b 	bl	8008468 <pbuf_copy_partial>
    data = httpd_req_buf;
 8006192:	4b48      	ldr	r3, [pc, #288]	@ (80062b4 <http_parse_request+0x1bc>)
 8006194:	637b      	str	r3, [r7, #52]	@ 0x34
 8006196:	e005      	b.n	80061a4 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8006198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	637b      	str	r3, [r7, #52]	@ 0x34
    data_len = p->len;
 800619e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a0:	895b      	ldrh	r3, [r3, #10]
 80061a2:	867b      	strh	r3, [r7, #50]	@ 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 80061a4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80061a6:	2b06      	cmp	r3, #6
 80061a8:	d962      	bls.n	8006270 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 80061aa:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80061ac:	461a      	mov	r2, r3
 80061ae:	4942      	ldr	r1, [pc, #264]	@ (80062b8 <http_parse_request+0x1c0>)
 80061b0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80061b2:	f000 fc0e 	bl	80069d2 <lwip_strnstr>
 80061b6:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 80061b8:	6a3b      	ldr	r3, [r7, #32]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d058      	beq.n	8006270 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 80061be:	2300      	movs	r3, #0
 80061c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 80061c2:	2204      	movs	r2, #4
 80061c4:	493d      	ldr	r1, [pc, #244]	@ (80062bc <http_parse_request+0x1c4>)
 80061c6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80061c8:	f00b f98c 	bl	80114e4 <strncmp>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d116      	bne.n	8006200 <http_parse_request+0x108>
        sp1 = data + 3;
 80061d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061d4:	3303      	adds	r3, #3
 80061d6:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	1c5a      	adds	r2, r3, #1
 80061dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	3301      	adds	r3, #1
 80061ec:	8b7a      	ldrh	r2, [r7, #26]
 80061ee:	4934      	ldr	r1, [pc, #208]	@ (80062c0 <http_parse_request+0x1c8>)
 80061f0:	4618      	mov	r0, r3
 80061f2:	f000 fbee 	bl	80069d2 <lwip_strnstr>
 80061f6:	62b8      	str	r0, [r7, #40]	@ 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 80061f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d111      	bne.n	8006222 <http_parse_request+0x12a>
 80061fe:	e006      	b.n	800620e <http_parse_request+0x116>
        data[4] = 0;
 8006200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006202:	3304      	adds	r3, #4
 8006204:	2200      	movs	r2, #0
 8006206:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8006208:	f06f 030f 	mvn.w	r3, #15
 800620c:	e045      	b.n	800629a <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	3301      	adds	r3, #1
 8006212:	8b7a      	ldrh	r2, [r7, #26]
 8006214:	4928      	ldr	r1, [pc, #160]	@ (80062b8 <http_parse_request+0x1c0>)
 8006216:	4618      	mov	r0, r3
 8006218:	f000 fbdb 	bl	80069d2 <lwip_strnstr>
 800621c:	62b8      	str	r0, [r7, #40]	@ 0x28
        is_09 = 1;
 800621e:	2301      	movs	r3, #1
 8006220:	62fb      	str	r3, [r7, #44]	@ 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	3301      	adds	r3, #1
 8006226:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800622c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622e:	2b00      	cmp	r3, #0
 8006230:	d01e      	beq.n	8006270 <http_parse_request+0x178>
 8006232:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	429a      	cmp	r2, r3
 8006238:	d91a      	bls.n	8006270 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800623a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800623c:	461a      	mov	r2, r3
 800623e:	4921      	ldr	r1, [pc, #132]	@ (80062c4 <http_parse_request+0x1cc>)
 8006240:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006242:	f000 fbc6 	bl	80069d2 <lwip_strnstr>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d011      	beq.n	8006270 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	3301      	adds	r3, #1
 8006250:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	2200      	movs	r2, #0
 8006256:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8006258:	8b3b      	ldrh	r3, [r7, #24]
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	4413      	add	r3, r2
 800625e:	2200      	movs	r2, #0
 8006260:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8006262:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006264:	6979      	ldr	r1, [r7, #20]
 8006266:	68b8      	ldr	r0, [r7, #8]
 8006268:	f000 f82e 	bl	80062c8 <http_find_file>
 800626c:	4603      	mov	r3, r0
 800626e:	e014      	b.n	800629a <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	6a1b      	ldr	r3, [r3, #32]
 8006274:	4618      	mov	r0, r3
 8006276:	f001 ff95 	bl	80081a4 <pbuf_clen>
 800627a:	4603      	mov	r3, r0
 800627c:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	891b      	ldrh	r3, [r3, #8]
 8006284:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006288:	d205      	bcs.n	8006296 <http_parse_request+0x19e>
 800628a:	8a7b      	ldrh	r3, [r7, #18]
 800628c:	2b05      	cmp	r3, #5
 800628e:	d802      	bhi.n	8006296 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8006290:	f06f 0304 	mvn.w	r3, #4
 8006294:	e001      	b.n	800629a <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8006296:	f06f 030f 	mvn.w	r3, #15
  }
}
 800629a:	4618      	mov	r0, r3
 800629c:	3738      	adds	r7, #56	@ 0x38
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	0801231c 	.word	0x0801231c
 80062a8:	080123e8 	.word	0x080123e8
 80062ac:	08012364 	.word	0x08012364
 80062b0:	080123f4 	.word	0x080123f4
 80062b4:	20005240 	.word	0x20005240
 80062b8:	08012400 	.word	0x08012400
 80062bc:	08012404 	.word	0x08012404
 80062c0:	0801240c 	.word	0x0801240c
 80062c4:	08012410 	.word	0x08012410

080062c8 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 80062c8:	b590      	push	{r4, r7, lr}
 80062ca:	b093      	sub	sp, #76	@ 0x4c
 80062cc:	af02      	add	r7, sp, #8
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 80062d4:	2300      	movs	r3, #0
 80062d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  char *params = NULL;
 80062d8:	2300      	movs	r3, #0
 80062da:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 80062dc:	2300      	movs	r3, #0
 80062de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	4618      	mov	r0, r3
 80062e6:	f7f9 ffb5 	bl	8000254 <strlen>
 80062ea:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80062ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d06b      	beq.n	80063ca <http_find_file+0x102>
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f6:	3b01      	subs	r3, #1
 80062f8:	4413      	add	r3, r2
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	2b2f      	cmp	r3, #47	@ 0x2f
 80062fe:	d164      	bne.n	80063ca <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8006300:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8006302:	4a72      	ldr	r2, [pc, #456]	@ (80064cc <http_find_file+0x204>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d102      	bne.n	800630e <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8006308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630a:	2b01      	cmp	r3, #1
 800630c:	d15d      	bne.n	80063ca <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800630e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006310:	3b01      	subs	r3, #1
 8006312:	2b3f      	cmp	r3, #63	@ 0x3f
 8006314:	bf28      	it	cs
 8006316:	233f      	movcs	r3, #63	@ 0x3f
 8006318:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00a      	beq.n	8006336 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	6a3a      	ldr	r2, [r7, #32]
 8006324:	4619      	mov	r1, r3
 8006326:	4869      	ldr	r0, [pc, #420]	@ (80064cc <http_find_file+0x204>)
 8006328:	f00b f95b 	bl	80115e2 <memcpy>
      http_uri_buf[copy_len] = 0;
 800632c:	4a67      	ldr	r2, [pc, #412]	@ (80064cc <http_find_file+0x204>)
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	4413      	add	r3, r2
 8006332:	2200      	movs	r2, #0
 8006334:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8006336:	2300      	movs	r3, #0
 8006338:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800633a:	e043      	b.n	80063c4 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800633c:	6a3b      	ldr	r3, [r7, #32]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d028      	beq.n	8006394 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8006342:	6a3b      	ldr	r3, [r7, #32]
 8006344:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8006348:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d01e      	beq.n	800638e <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8006350:	4a5f      	ldr	r2, [pc, #380]	@ (80064d0 <http_find_file+0x208>)
 8006352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006354:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006358:	4618      	mov	r0, r3
 800635a:	f7f9 ff7b 	bl	8000254 <strlen>
 800635e:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8006360:	69ba      	ldr	r2, [r7, #24]
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	4293      	cmp	r3, r2
 8006366:	bf28      	it	cs
 8006368:	4613      	movcs	r3, r2
 800636a:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800636c:	6a3b      	ldr	r3, [r7, #32]
 800636e:	4a57      	ldr	r2, [pc, #348]	@ (80064cc <http_find_file+0x204>)
 8006370:	1898      	adds	r0, r3, r2
 8006372:	4a57      	ldr	r2, [pc, #348]	@ (80064d0 <http_find_file+0x208>)
 8006374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006376:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	4619      	mov	r1, r3
 800637e:	f00b f930 	bl	80115e2 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8006382:	6a3a      	ldr	r2, [r7, #32]
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	4413      	add	r3, r2
 8006388:	4a50      	ldr	r2, [pc, #320]	@ (80064cc <http_find_file+0x204>)
 800638a:	2100      	movs	r1, #0
 800638c:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800638e:	4b4f      	ldr	r3, [pc, #316]	@ (80064cc <http_find_file+0x204>)
 8006390:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006392:	e004      	b.n	800639e <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8006394:	4a4e      	ldr	r2, [pc, #312]	@ (80064d0 <http_find_file+0x208>)
 8006396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006398:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800639c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7ff fbf6 	bl	8005b94 <fs_open>
 80063a8:	4603      	mov	r3, r0
 80063aa:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 80063ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d104      	bne.n	80063be <http_find_file+0xf6>
        uri = file_name;
 80063b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b6:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	63bb      	str	r3, [r7, #56]	@ 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 80063bc:	e005      	b.n	80063ca <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80063be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063c0:	3301      	adds	r3, #1
 80063c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063c6:	2b04      	cmp	r3, #4
 80063c8:	d9b8      	bls.n	800633c <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 80063ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d161      	bne.n	8006494 <http_find_file+0x1cc>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	213f      	movs	r1, #63	@ 0x3f
 80063d4:	4618      	mov	r0, r3
 80063d6:	f00b f878 	bl	80114ca <strchr>
 80063da:	6378      	str	r0, [r7, #52]	@ 0x34
    if (params != NULL) {
 80063dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d005      	beq.n	80063ee <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 80063e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063e4:	2200      	movs	r2, #0
 80063e6:	701a      	strb	r2, [r3, #0]
      params++;
 80063e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ea:	3301      	adds	r3, #1
 80063ec:	637b      	str	r3, [r7, #52]	@ 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 80063ee:	4b39      	ldr	r3, [pc, #228]	@ (80064d4 <http_find_file+0x20c>)
 80063f0:	f04f 32ff 	mov.w	r2, #4294967295
 80063f4:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 80063f6:	4b38      	ldr	r3, [pc, #224]	@ (80064d8 <http_find_file+0x210>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d034      	beq.n	8006468 <http_find_file+0x1a0>
 80063fe:	4b37      	ldr	r3, [pc, #220]	@ (80064dc <http_find_file+0x214>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d030      	beq.n	8006468 <http_find_file+0x1a0>
      for (i = 0; i < httpd_num_cgis; i++) {
 8006406:	2300      	movs	r3, #0
 8006408:	633b      	str	r3, [r7, #48]	@ 0x30
 800640a:	e028      	b.n	800645e <http_find_file+0x196>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 800640c:	68b8      	ldr	r0, [r7, #8]
 800640e:	4b33      	ldr	r3, [pc, #204]	@ (80064dc <http_find_file+0x214>)
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006414:	00db      	lsls	r3, r3, #3
 8006416:	4413      	add	r3, r2
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4619      	mov	r1, r3
 800641c:	f7f9 ff10 	bl	8000240 <strcmp>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d118      	bne.n	8006458 <http_find_file+0x190>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 8006426:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f7ff fd21 	bl	8005e70 <extract_uri_parameters>
 800642e:	4603      	mov	r3, r0
 8006430:	4a28      	ldr	r2, [pc, #160]	@ (80064d4 <http_find_file+0x20c>)
 8006432:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8006434:	4b29      	ldr	r3, [pc, #164]	@ (80064dc <http_find_file+0x214>)
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643a:	00db      	lsls	r3, r3, #3
 800643c:	4413      	add	r3, r2
 800643e:	685c      	ldr	r4, [r3, #4]
 8006440:	4b24      	ldr	r3, [pc, #144]	@ (80064d4 <http_find_file+0x20c>)
 8006442:	6819      	ldr	r1, [r3, #0]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
                                         hs->param_vals);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	336c      	adds	r3, #108	@ 0x6c
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800644e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006450:	47a0      	blx	r4
 8006452:	4603      	mov	r3, r0
 8006454:	60bb      	str	r3, [r7, #8]
          break;
 8006456:	e007      	b.n	8006468 <http_find_file+0x1a0>
      for (i = 0; i < httpd_num_cgis; i++) {
 8006458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645a:	3301      	adds	r3, #1
 800645c:	633b      	str	r3, [r7, #48]	@ 0x30
 800645e:	4b1e      	ldr	r3, [pc, #120]	@ (80064d8 <http_find_file+0x210>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006464:	429a      	cmp	r2, r3
 8006466:	dbd1      	blt.n	800640c <http_find_file+0x144>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	4611      	mov	r1, r2
 800646e:	4618      	mov	r0, r3
 8006470:	f7ff fb90 	bl	8005b94 <fs_open>
 8006474:	4603      	mov	r3, r0
 8006476:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 8006478:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d102      	bne.n	8006486 <http_find_file+0x1be>
      file = &hs->file_handle;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006484:	e006      	b.n	8006494 <http_find_file+0x1cc>
    } else {
      file = http_get_404_file(hs, &uri);
 8006486:	f107 0308 	add.w	r3, r7, #8
 800648a:	4619      	mov	r1, r3
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f7ff fded 	bl	800606c <http_get_404_file>
 8006492:	63b8      	str	r0, [r7, #56]	@ 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8006494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006496:	2b00      	cmp	r3, #0
 8006498:	d106      	bne.n	80064a8 <http_find_file+0x1e0>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800649a:	f107 0308 	add.w	r3, r7, #8
 800649e:	4619      	mov	r1, r3
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f7ff fde3 	bl	800606c <http_get_404_file>
 80064a6:	63b8      	str	r0, [r7, #56]	@ 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ac:	9301      	str	r3, [sp, #4]
 80064ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80064b2:	9300      	str	r3, [sp, #0]
 80064b4:	4613      	mov	r3, r2
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f000 f810 	bl	80064e0 <http_init_file>
 80064c0:	4603      	mov	r3, r0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3744      	adds	r7, #68	@ 0x44
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd90      	pop	{r4, r7, pc}
 80064ca:	bf00      	nop
 80064cc:	20005640 	.word	0x20005640
 80064d0:	0801531c 	.word	0x0801531c
 80064d4:	20005688 	.word	0x20005688
 80064d8:	20005684 	.word	0x20005684
 80064dc:	20005680 	.word	0x20005680

080064e0 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
 80064ec:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d05c      	beq.n	80065ae <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d106      	bne.n	800650a <http_init_file+0x2a>
 80064fc:	4b35      	ldr	r3, [pc, #212]	@ (80065d4 <http_init_file+0xf4>)
 80064fe:	f640 120b 	movw	r2, #2315	@ 0x90b
 8006502:	4935      	ldr	r1, [pc, #212]	@ (80065d8 <http_init_file+0xf8>)
 8006504:	4835      	ldr	r0, [pc, #212]	@ (80065dc <http_init_file+0xfc>)
 8006506:	f00a ff73 	bl	80113f0 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	da06      	bge.n	800652e <http_init_file+0x4e>
 8006520:	4b2c      	ldr	r3, [pc, #176]	@ (80065d4 <http_init_file+0xf4>)
 8006522:	f640 1234 	movw	r2, #2356	@ 0x934
 8006526:	492e      	ldr	r1, [pc, #184]	@ (80065e0 <http_init_file+0x100>)
 8006528:	482c      	ldr	r0, [pc, #176]	@ (80065dc <http_init_file+0xfc>)
 800652a:	f00a ff61 	bl	80113f0 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	461a      	mov	r2, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    hs->retries = 0;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	695b      	ldr	r3, [r3, #20]
 8006544:	7c1b      	ldrb	r3, [r3, #16]
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	2b00      	cmp	r3, #0
 800654c:	d106      	bne.n	800655c <http_init_file+0x7c>
 800654e:	4b21      	ldr	r3, [pc, #132]	@ (80065d4 <http_init_file+0xf4>)
 8006550:	f640 1243 	movw	r2, #2371	@ 0x943
 8006554:	4923      	ldr	r1, [pc, #140]	@ (80065e4 <http_init_file+0x104>)
 8006556:	4821      	ldr	r0, [pc, #132]	@ (80065dc <http_init_file+0xfc>)
 8006558:	f00a ff4a 	bl	80113f0 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d032      	beq.n	80065c8 <http_init_file+0xe8>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	7c1b      	ldrb	r3, [r3, #16]
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	d02b      	beq.n	80065c8 <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6998      	ldr	r0, [r3, #24]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006578:	461a      	mov	r2, r3
 800657a:	491b      	ldr	r1, [pc, #108]	@ (80065e8 <http_init_file+0x108>)
 800657c:	f000 fa29 	bl	80069d2 <lwip_strnstr>
 8006580:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d01f      	beq.n	80065c8 <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	1d1a      	adds	r2, r3, #4
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	699a      	ldr	r2, [r3, #24]
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	441a      	add	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	1ad2      	subs	r2, r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	625a      	str	r2, [r3, #36]	@ 0x24
 80065ac:	e00c      	b.n	80065c8 <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2200      	movs	r2, #0
 80065be:	625a      	str	r2, [r3, #36]	@ 0x24
    hs->retries = 0;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3718      	adds	r7, #24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	0801231c 	.word	0x0801231c
 80065d8:	08012418 	.word	0x08012418
 80065dc:	08012364 	.word	0x08012364
 80065e0:	0801242c 	.word	0x0801242c
 80065e4:	0801244c 	.word	0x0801244c
 80065e8:	08012410 	.word	0x08012410

080065ec <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	460b      	mov	r3, r1
 80065f6:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d002      	beq.n	8006608 <http_err+0x1c>
    http_state_free(hs);
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f7ff fb5c 	bl	8005cc0 <http_state_free>
  }
}
 8006608:	bf00      	nop
 800660a:	3710      	adds	r7, #16
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b086      	sub	sp, #24
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	4613      	mov	r3, r2
 800661c:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d101      	bne.n	800662c <http_sent+0x1c>
    return ERR_OK;
 8006628:	2300      	movs	r3, #0
 800662a:	e008      	b.n	800663e <http_sent+0x2e>
  }

  hs->retries = 0;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  http_send(pcb, hs);
 8006634:	6979      	ldr	r1, [r7, #20]
 8006636:	68b8      	ldr	r0, [r7, #8]
 8006638:	f7ff fce1 	bl	8005ffe <http_send>

  return ERR_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3718      	adds	r7, #24
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b084      	sub	sp, #16
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d107      	bne.n	800666a <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800665a:	2100      	movs	r1, #0
 800665c:	6838      	ldr	r0, [r7, #0]
 800665e:	f7ff fbeb 	bl	8005e38 <http_close_conn>
 8006662:	4603      	mov	r3, r0
 8006664:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8006666:	2300      	movs	r3, #0
 8006668:	e021      	b.n	80066ae <http_poll+0x68>
  } else {
    hs->retries++;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006670:	3301      	adds	r3, #1
 8006672:	b2da      	uxtb	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006680:	2b04      	cmp	r3, #4
 8006682:	d105      	bne.n	8006690 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8006684:	68f9      	ldr	r1, [r7, #12]
 8006686:	6838      	ldr	r0, [r7, #0]
 8006688:	f7ff fbd6 	bl	8005e38 <http_close_conn>
      return ERR_OK;
 800668c:	2300      	movs	r3, #0
 800668e:	e00e      	b.n	80066ae <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	695b      	ldr	r3, [r3, #20]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d009      	beq.n	80066ac <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8006698:	68f9      	ldr	r1, [r7, #12]
 800669a:	6838      	ldr	r0, [r7, #0]
 800669c:	f7ff fcaf 	bl	8005ffe <http_send>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d002      	beq.n	80066ac <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 80066a6:	6838      	ldr	r0, [r7, #0]
 80066a8:	f007 f862 	bl	800d770 <tcp_output>
      }
    }
  }

  return ERR_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
	...

080066b8 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b086      	sub	sp, #24
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
 80066c4:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 80066ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d105      	bne.n	80066de <http_recv+0x26>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d002      	beq.n	80066de <http_recv+0x26>
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d111      	bne.n	8006702 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d008      	beq.n	80066f6 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	891b      	ldrh	r3, [r3, #8]
 80066e8:	4619      	mov	r1, r3
 80066ea:	68b8      	ldr	r0, [r7, #8]
 80066ec:	f002 fc34 	bl	8008f58 <tcp_recved>
      pbuf_free(p);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f001 fccf 	bl	8008094 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 80066f6:	6979      	ldr	r1, [r7, #20]
 80066f8:	68b8      	ldr	r0, [r7, #8]
 80066fa:	f7ff fb9d 	bl	8005e38 <http_close_conn>
    return ERR_OK;
 80066fe:	2300      	movs	r3, #0
 8006700:	e055      	b.n	80067ae <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	891b      	ldrh	r3, [r3, #8]
 8006706:	4619      	mov	r1, r3
 8006708:	68b8      	ldr	r0, [r7, #8]
 800670a:	f002 fc25 	bl	8008f58 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d147      	bne.n	80067a6 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	6979      	ldr	r1, [r7, #20]
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7ff fcec 	bl	80060f8 <http_parse_request>
 8006720:	4603      	mov	r3, r0
 8006722:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8006724:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d015      	beq.n	8006758 <http_recv+0xa0>
 800672c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006730:	f113 0f05 	cmn.w	r3, #5
 8006734:	d010      	beq.n	8006758 <http_recv+0xa0>
 8006736:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800673a:	f113 0f10 	cmn.w	r3, #16
 800673e:	d00b      	beq.n	8006758 <http_recv+0xa0>
 8006740:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006744:	f113 0f08 	cmn.w	r3, #8
 8006748:	d006      	beq.n	8006758 <http_recv+0xa0>
 800674a:	4b1b      	ldr	r3, [pc, #108]	@ (80067b8 <http_recv+0x100>)
 800674c:	f640 2204 	movw	r2, #2564	@ 0xa04
 8006750:	491a      	ldr	r1, [pc, #104]	@ (80067bc <http_recv+0x104>)
 8006752:	481b      	ldr	r0, [pc, #108]	@ (80067c0 <http_recv+0x108>)
 8006754:	f00a fe4c 	bl	80113f0 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8006758:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800675c:	f113 0f05 	cmn.w	r3, #5
 8006760:	d00b      	beq.n	800677a <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d007      	beq.n	800677a <http_recv+0xc2>
          pbuf_free(hs->req);
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	4618      	mov	r0, r3
 8006770:	f001 fc90 	bl	8008094 <pbuf_free>
          hs->req = NULL;
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	2200      	movs	r2, #0
 8006778:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f001 fc8a 	bl	8008094 <pbuf_free>
      if (parsed == ERR_OK) {
 8006780:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d104      	bne.n	8006792 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8006788:	6979      	ldr	r1, [r7, #20]
 800678a:	68b8      	ldr	r0, [r7, #8]
 800678c:	f7ff fc37 	bl	8005ffe <http_send>
 8006790:	e00c      	b.n	80067ac <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 8006792:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006796:	f113 0f10 	cmn.w	r3, #16
 800679a:	d107      	bne.n	80067ac <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800679c:	6979      	ldr	r1, [r7, #20]
 800679e:	68b8      	ldr	r0, [r7, #8]
 80067a0:	f7ff fb4a 	bl	8005e38 <http_close_conn>
 80067a4:	e002      	b.n	80067ac <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f001 fc74 	bl	8008094 <pbuf_free>
    }
  }
  return ERR_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3718      	adds	r7, #24
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	0801231c 	.word	0x0801231c
 80067bc:	08012478 	.word	0x08012478
 80067c0:	08012364 	.word	0x08012364

080067c4 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	4613      	mov	r3, r2
 80067d0:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 80067d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d102      	bne.n	80067e0 <http_accept+0x1c>
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d102      	bne.n	80067e6 <http_accept+0x22>
    return ERR_VAL;
 80067e0:	f06f 0305 	mvn.w	r3, #5
 80067e4:	e025      	b.n	8006832 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80067e6:	2101      	movs	r1, #1
 80067e8:	68b8      	ldr	r0, [r7, #8]
 80067ea:	f003 f89b 	bl	8009924 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 80067ee:	f7ff fa35 	bl	8005c5c <http_state_alloc>
 80067f2:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d102      	bne.n	8006800 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 80067fa:	f04f 33ff 	mov.w	r3, #4294967295
 80067fe:	e018      	b.n	8006832 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8006806:	6979      	ldr	r1, [r7, #20]
 8006808:	68b8      	ldr	r0, [r7, #8]
 800680a:	f003 fa8b 	bl	8009d24 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800680e:	490b      	ldr	r1, [pc, #44]	@ (800683c <http_accept+0x78>)
 8006810:	68b8      	ldr	r0, [r7, #8]
 8006812:	f003 fa99 	bl	8009d48 <tcp_recv>
  altcp_err(pcb, http_err);
 8006816:	490a      	ldr	r1, [pc, #40]	@ (8006840 <http_accept+0x7c>)
 8006818:	68b8      	ldr	r0, [r7, #8]
 800681a:	f003 fad9 	bl	8009dd0 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800681e:	2204      	movs	r2, #4
 8006820:	4908      	ldr	r1, [pc, #32]	@ (8006844 <http_accept+0x80>)
 8006822:	68b8      	ldr	r0, [r7, #8]
 8006824:	f003 fb0e 	bl	8009e44 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8006828:	4907      	ldr	r1, [pc, #28]	@ (8006848 <http_accept+0x84>)
 800682a:	68b8      	ldr	r0, [r7, #8]
 800682c:	f003 faae 	bl	8009d8c <tcp_sent>

  return ERR_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3718      	adds	r7, #24
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	080066b9 	.word	0x080066b9
 8006840:	080065ed 	.word	0x080065ed
 8006844:	08006647 	.word	0x08006647
 8006848:	08006611 	.word	0x08006611

0800684c <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	460b      	mov	r3, r1
 8006856:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d029      	beq.n	80068b2 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800685e:	2101      	movs	r1, #1
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f003 f85f 	bl	8009924 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8006866:	887b      	ldrh	r3, [r7, #2]
 8006868:	461a      	mov	r2, r3
 800686a:	4914      	ldr	r1, [pc, #80]	@ (80068bc <httpd_init_pcb+0x70>)
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f002 f9a5 	bl	8008bbc <tcp_bind>
 8006872:	4603      	mov	r3, r0
 8006874:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8006876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d006      	beq.n	800688c <httpd_init_pcb+0x40>
 800687e:	4b10      	ldr	r3, [pc, #64]	@ (80068c0 <httpd_init_pcb+0x74>)
 8006880:	f640 2257 	movw	r2, #2647	@ 0xa57
 8006884:	490f      	ldr	r1, [pc, #60]	@ (80068c4 <httpd_init_pcb+0x78>)
 8006886:	4810      	ldr	r0, [pc, #64]	@ (80068c8 <httpd_init_pcb+0x7c>)
 8006888:	f00a fdb2 	bl	80113f0 <iprintf>
    pcb = altcp_listen(pcb);
 800688c:	21ff      	movs	r1, #255	@ 0xff
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f002 fa4c 	bl	8008d2c <tcp_listen_with_backlog>
 8006894:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d106      	bne.n	80068aa <httpd_init_pcb+0x5e>
 800689c:	4b08      	ldr	r3, [pc, #32]	@ (80068c0 <httpd_init_pcb+0x74>)
 800689e:	f640 2259 	movw	r2, #2649	@ 0xa59
 80068a2:	490a      	ldr	r1, [pc, #40]	@ (80068cc <httpd_init_pcb+0x80>)
 80068a4:	4808      	ldr	r0, [pc, #32]	@ (80068c8 <httpd_init_pcb+0x7c>)
 80068a6:	f00a fda3 	bl	80113f0 <iprintf>
    altcp_accept(pcb, http_accept);
 80068aa:	4909      	ldr	r1, [pc, #36]	@ (80068d0 <httpd_init_pcb+0x84>)
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f003 fab1 	bl	8009e14 <tcp_accept>
  }
}
 80068b2:	bf00      	nop
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	08015414 	.word	0x08015414
 80068c0:	0801231c 	.word	0x0801231c
 80068c4:	080124a4 	.word	0x080124a4
 80068c8:	08012364 	.word	0x08012364
 80068cc:	080124c0 	.word	0x080124c0
 80068d0:	080067c5 	.word	0x080067c5

080068d4 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 80068da:	202e      	movs	r0, #46	@ 0x2e
 80068dc:	f003 fa14 	bl	8009d08 <tcp_new_ip_type>
 80068e0:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d106      	bne.n	80068f6 <httpd_init+0x22>
 80068e8:	4b07      	ldr	r3, [pc, #28]	@ (8006908 <httpd_init+0x34>)
 80068ea:	f640 2272 	movw	r2, #2674	@ 0xa72
 80068ee:	4907      	ldr	r1, [pc, #28]	@ (800690c <httpd_init+0x38>)
 80068f0:	4807      	ldr	r0, [pc, #28]	@ (8006910 <httpd_init+0x3c>)
 80068f2:	f00a fd7d 	bl	80113f0 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 80068f6:	2150      	movs	r1, #80	@ 0x50
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f7ff ffa7 	bl	800684c <httpd_init_pcb>
}
 80068fe:	bf00      	nop
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	0801231c 	.word	0x0801231c
 800690c:	080124e0 	.word	0x080124e0
 8006910:	08012364 	.word	0x08012364

08006914 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d106      	bne.n	8006932 <http_set_cgi_handlers+0x1e>
 8006924:	4b0d      	ldr	r3, [pc, #52]	@ (800695c <http_set_cgi_handlers+0x48>)
 8006926:	f640 22b2 	movw	r2, #2738	@ 0xab2
 800692a:	490d      	ldr	r1, [pc, #52]	@ (8006960 <http_set_cgi_handlers+0x4c>)
 800692c:	480d      	ldr	r0, [pc, #52]	@ (8006964 <http_set_cgi_handlers+0x50>)
 800692e:	f00a fd5f 	bl	80113f0 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	dc06      	bgt.n	8006946 <http_set_cgi_handlers+0x32>
 8006938:	4b08      	ldr	r3, [pc, #32]	@ (800695c <http_set_cgi_handlers+0x48>)
 800693a:	f640 22b3 	movw	r2, #2739	@ 0xab3
 800693e:	490a      	ldr	r1, [pc, #40]	@ (8006968 <http_set_cgi_handlers+0x54>)
 8006940:	4808      	ldr	r0, [pc, #32]	@ (8006964 <http_set_cgi_handlers+0x50>)
 8006942:	f00a fd55 	bl	80113f0 <iprintf>

  httpd_cgis = cgis;
 8006946:	4a09      	ldr	r2, [pc, #36]	@ (800696c <http_set_cgi_handlers+0x58>)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 800694c:	4a08      	ldr	r2, [pc, #32]	@ (8006970 <http_set_cgi_handlers+0x5c>)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	6013      	str	r3, [r2, #0]
}
 8006952:	bf00      	nop
 8006954:	3708      	adds	r7, #8
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	0801231c 	.word	0x0801231c
 8006960:	080124fc 	.word	0x080124fc
 8006964:	08012364 	.word	0x08012364
 8006968:	0801250c 	.word	0x0801250c
 800696c:	20005680 	.word	0x20005680
 8006970:	20005684 	.word	0x20005684

08006974 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	4603      	mov	r3, r0
 800697c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800697e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006982:	021b      	lsls	r3, r3, #8
 8006984:	b21a      	sxth	r2, r3
 8006986:	88fb      	ldrh	r3, [r7, #6]
 8006988:	0a1b      	lsrs	r3, r3, #8
 800698a:	b29b      	uxth	r3, r3
 800698c:	b21b      	sxth	r3, r3
 800698e:	4313      	orrs	r3, r2
 8006990:	b21b      	sxth	r3, r3
 8006992:	b29b      	uxth	r3, r3
}
 8006994:	4618      	mov	r0, r3
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	061a      	lsls	r2, r3, #24
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	021b      	lsls	r3, r3, #8
 80069b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80069b4:	431a      	orrs	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	0a1b      	lsrs	r3, r3, #8
 80069ba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80069be:	431a      	orrs	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	0e1b      	lsrs	r3, r3, #24
 80069c4:	4313      	orrs	r3, r2
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b086      	sub	sp, #24
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	60f8      	str	r0, [r7, #12]
 80069da:	60b9      	str	r1, [r7, #8]
 80069dc:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 80069de:	68b8      	ldr	r0, [r7, #8]
 80069e0:	f7f9 fc38 	bl	8000254 <strlen>
 80069e4:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d101      	bne.n	80069f0 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	e022      	b.n	8006a36 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	617b      	str	r3, [r7, #20]
 80069f4:	e012      	b.n	8006a1c <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	781a      	ldrb	r2, [r3, #0]
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d109      	bne.n	8006a16 <lwip_strnstr+0x44>
 8006a02:	693a      	ldr	r2, [r7, #16]
 8006a04:	68b9      	ldr	r1, [r7, #8]
 8006a06:	6978      	ldr	r0, [r7, #20]
 8006a08:	f00a fd6c 	bl	80114e4 <strncmp>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	e00f      	b.n	8006a36 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	617b      	str	r3, [r7, #20]
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d007      	beq.n	8006a34 <lwip_strnstr+0x62>
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	441a      	add	r2, r3
 8006a2a:	68f9      	ldr	r1, [r7, #12]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	440b      	add	r3, r1
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d9e0      	bls.n	80069f6 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3718      	adds	r7, #24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b082      	sub	sp, #8
 8006a42:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8006a44:	2300      	movs	r3, #0
 8006a46:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8006a48:	f000 f8d4 	bl	8006bf4 <mem_init>
  memp_init();
 8006a4c:	f000 fbd6 	bl	80071fc <memp_init>
  pbuf_init();
  netif_init();
 8006a50:	f000 fcd4 	bl	80073fc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006a54:	f007 ff4c 	bl	800e8f0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006a58:	f001 fdaa 	bl	80085b0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006a5c:	f007 febe 	bl	800e7dc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006a60:	bf00      	nop
 8006a62:	3708      	adds	r7, #8
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	4603      	mov	r3, r0
 8006a70:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8006a72:	4b05      	ldr	r3, [pc, #20]	@ (8006a88 <ptr_to_mem+0x20>)
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	88fb      	ldrh	r3, [r7, #6]
 8006a78:	4413      	add	r3, r2
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	200056a4 	.word	0x200056a4

08006a8c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8006a94:	4b05      	ldr	r3, [pc, #20]	@ (8006aac <mem_to_ptr+0x20>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	b29b      	uxth	r3, r3
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	370c      	adds	r7, #12
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	200056a4 	.word	0x200056a4

08006ab0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006ab0:	b590      	push	{r4, r7, lr}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006ab8:	4b45      	ldr	r3, [pc, #276]	@ (8006bd0 <plug_holes+0x120>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d206      	bcs.n	8006ad0 <plug_holes+0x20>
 8006ac2:	4b44      	ldr	r3, [pc, #272]	@ (8006bd4 <plug_holes+0x124>)
 8006ac4:	f240 12df 	movw	r2, #479	@ 0x1df
 8006ac8:	4943      	ldr	r1, [pc, #268]	@ (8006bd8 <plug_holes+0x128>)
 8006aca:	4844      	ldr	r0, [pc, #272]	@ (8006bdc <plug_holes+0x12c>)
 8006acc:	f00a fc90 	bl	80113f0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006ad0:	4b43      	ldr	r3, [pc, #268]	@ (8006be0 <plug_holes+0x130>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d306      	bcc.n	8006ae8 <plug_holes+0x38>
 8006ada:	4b3e      	ldr	r3, [pc, #248]	@ (8006bd4 <plug_holes+0x124>)
 8006adc:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8006ae0:	4940      	ldr	r1, [pc, #256]	@ (8006be4 <plug_holes+0x134>)
 8006ae2:	483e      	ldr	r0, [pc, #248]	@ (8006bdc <plug_holes+0x12c>)
 8006ae4:	f00a fc84 	bl	80113f0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	791b      	ldrb	r3, [r3, #4]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d006      	beq.n	8006afe <plug_holes+0x4e>
 8006af0:	4b38      	ldr	r3, [pc, #224]	@ (8006bd4 <plug_holes+0x124>)
 8006af2:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8006af6:	493c      	ldr	r1, [pc, #240]	@ (8006be8 <plug_holes+0x138>)
 8006af8:	4838      	ldr	r0, [pc, #224]	@ (8006bdc <plug_holes+0x12c>)
 8006afa:	f00a fc79 	bl	80113f0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	881b      	ldrh	r3, [r3, #0]
 8006b02:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006b06:	d906      	bls.n	8006b16 <plug_holes+0x66>
 8006b08:	4b32      	ldr	r3, [pc, #200]	@ (8006bd4 <plug_holes+0x124>)
 8006b0a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8006b0e:	4937      	ldr	r1, [pc, #220]	@ (8006bec <plug_holes+0x13c>)
 8006b10:	4832      	ldr	r0, [pc, #200]	@ (8006bdc <plug_holes+0x12c>)
 8006b12:	f00a fc6d 	bl	80113f0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	881b      	ldrh	r3, [r3, #0]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7ff ffa4 	bl	8006a68 <ptr_to_mem>
 8006b20:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d024      	beq.n	8006b74 <plug_holes+0xc4>
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	791b      	ldrb	r3, [r3, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d120      	bne.n	8006b74 <plug_holes+0xc4>
 8006b32:	4b2b      	ldr	r3, [pc, #172]	@ (8006be0 <plug_holes+0x130>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d01b      	beq.n	8006b74 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8006b3c:	4b2c      	ldr	r3, [pc, #176]	@ (8006bf0 <plug_holes+0x140>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d102      	bne.n	8006b4c <plug_holes+0x9c>
      lfree = mem;
 8006b46:	4a2a      	ldr	r2, [pc, #168]	@ (8006bf0 <plug_holes+0x140>)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	881a      	ldrh	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	881b      	ldrh	r3, [r3, #0]
 8006b58:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006b5c:	d00a      	beq.n	8006b74 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	881b      	ldrh	r3, [r3, #0]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7ff ff80 	bl	8006a68 <ptr_to_mem>
 8006b68:	4604      	mov	r4, r0
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7ff ff8e 	bl	8006a8c <mem_to_ptr>
 8006b70:	4603      	mov	r3, r0
 8006b72:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	885b      	ldrh	r3, [r3, #2]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7ff ff75 	bl	8006a68 <ptr_to_mem>
 8006b7e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006b80:	68ba      	ldr	r2, [r7, #8]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d01f      	beq.n	8006bc8 <plug_holes+0x118>
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	791b      	ldrb	r3, [r3, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d11b      	bne.n	8006bc8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006b90:	4b17      	ldr	r3, [pc, #92]	@ (8006bf0 <plug_holes+0x140>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d102      	bne.n	8006ba0 <plug_holes+0xf0>
      lfree = pmem;
 8006b9a:	4a15      	ldr	r2, [pc, #84]	@ (8006bf0 <plug_holes+0x140>)
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	881a      	ldrh	r2, [r3, #0]
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006bb0:	d00a      	beq.n	8006bc8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7ff ff56 	bl	8006a68 <ptr_to_mem>
 8006bbc:	4604      	mov	r4, r0
 8006bbe:	68b8      	ldr	r0, [r7, #8]
 8006bc0:	f7ff ff64 	bl	8006a8c <mem_to_ptr>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8006bc8:	bf00      	nop
 8006bca:	3714      	adds	r7, #20
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd90      	pop	{r4, r7, pc}
 8006bd0:	200056a4 	.word	0x200056a4
 8006bd4:	08012528 	.word	0x08012528
 8006bd8:	08012558 	.word	0x08012558
 8006bdc:	08012570 	.word	0x08012570
 8006be0:	200056a8 	.word	0x200056a8
 8006be4:	08012598 	.word	0x08012598
 8006be8:	080125b4 	.word	0x080125b4
 8006bec:	080125d0 	.word	0x080125d0
 8006bf0:	200056ac 	.word	0x200056ac

08006bf4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006bfa:	4b16      	ldr	r3, [pc, #88]	@ (8006c54 <mem_init+0x60>)
 8006bfc:	4a16      	ldr	r2, [pc, #88]	@ (8006c58 <mem_init+0x64>)
 8006bfe:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8006c00:	4b14      	ldr	r3, [pc, #80]	@ (8006c54 <mem_init+0x60>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8006c0c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8006c1a:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8006c1e:	f7ff ff23 	bl	8006a68 <ptr_to_mem>
 8006c22:	4603      	mov	r3, r0
 8006c24:	4a0d      	ldr	r2, [pc, #52]	@ (8006c5c <mem_init+0x68>)
 8006c26:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8006c28:	4b0c      	ldr	r3, [pc, #48]	@ (8006c5c <mem_init+0x68>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006c30:	4b0a      	ldr	r3, [pc, #40]	@ (8006c5c <mem_init+0x68>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8006c38:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8006c3a:	4b08      	ldr	r3, [pc, #32]	@ (8006c5c <mem_init+0x68>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8006c42:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006c44:	4b03      	ldr	r3, [pc, #12]	@ (8006c54 <mem_init+0x60>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a05      	ldr	r2, [pc, #20]	@ (8006c60 <mem_init+0x6c>)
 8006c4a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8006c4c:	bf00      	nop
 8006c4e:	3708      	adds	r7, #8
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	200056a4 	.word	0x200056a4
 8006c58:	20048000 	.word	0x20048000
 8006c5c:	200056a8 	.word	0x200056a8
 8006c60:	200056ac 	.word	0x200056ac

08006c64 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f7ff ff0d 	bl	8006a8c <mem_to_ptr>
 8006c72:	4603      	mov	r3, r0
 8006c74:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	881b      	ldrh	r3, [r3, #0]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7ff fef4 	bl	8006a68 <ptr_to_mem>
 8006c80:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	885b      	ldrh	r3, [r3, #2]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7ff feee 	bl	8006a68 <ptr_to_mem>
 8006c8c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	881b      	ldrh	r3, [r3, #0]
 8006c92:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006c96:	d818      	bhi.n	8006cca <mem_link_valid+0x66>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	885b      	ldrh	r3, [r3, #2]
 8006c9c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006ca0:	d813      	bhi.n	8006cca <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8006ca6:	8afa      	ldrh	r2, [r7, #22]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d004      	beq.n	8006cb6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	881b      	ldrh	r3, [r3, #0]
 8006cb0:	8afa      	ldrh	r2, [r7, #22]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d109      	bne.n	8006cca <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006cb6:	4b08      	ldr	r3, [pc, #32]	@ (8006cd8 <mem_link_valid+0x74>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d006      	beq.n	8006cce <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	885b      	ldrh	r3, [r3, #2]
 8006cc4:	8afa      	ldrh	r2, [r7, #22]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d001      	beq.n	8006cce <mem_link_valid+0x6a>
    return 0;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	e000      	b.n	8006cd0 <mem_link_valid+0x6c>
  }
  return 1;
 8006cce:	2301      	movs	r3, #1
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3718      	adds	r7, #24
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	200056a8 	.word	0x200056a8

08006cdc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d04c      	beq.n	8006d84 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f003 0303 	and.w	r3, r3, #3
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d007      	beq.n	8006d04 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8006cf4:	4b25      	ldr	r3, [pc, #148]	@ (8006d8c <mem_free+0xb0>)
 8006cf6:	f240 2273 	movw	r2, #627	@ 0x273
 8006cfa:	4925      	ldr	r1, [pc, #148]	@ (8006d90 <mem_free+0xb4>)
 8006cfc:	4825      	ldr	r0, [pc, #148]	@ (8006d94 <mem_free+0xb8>)
 8006cfe:	f00a fb77 	bl	80113f0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006d02:	e040      	b.n	8006d86 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	3b08      	subs	r3, #8
 8006d08:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8006d0a:	4b23      	ldr	r3, [pc, #140]	@ (8006d98 <mem_free+0xbc>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d306      	bcc.n	8006d22 <mem_free+0x46>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f103 020c 	add.w	r2, r3, #12
 8006d1a:	4b20      	ldr	r3, [pc, #128]	@ (8006d9c <mem_free+0xc0>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d907      	bls.n	8006d32 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8006d22:	4b1a      	ldr	r3, [pc, #104]	@ (8006d8c <mem_free+0xb0>)
 8006d24:	f240 227f 	movw	r2, #639	@ 0x27f
 8006d28:	491d      	ldr	r1, [pc, #116]	@ (8006da0 <mem_free+0xc4>)
 8006d2a:	481a      	ldr	r0, [pc, #104]	@ (8006d94 <mem_free+0xb8>)
 8006d2c:	f00a fb60 	bl	80113f0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006d30:	e029      	b.n	8006d86 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	791b      	ldrb	r3, [r3, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d107      	bne.n	8006d4a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8006d3a:	4b14      	ldr	r3, [pc, #80]	@ (8006d8c <mem_free+0xb0>)
 8006d3c:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8006d40:	4918      	ldr	r1, [pc, #96]	@ (8006da4 <mem_free+0xc8>)
 8006d42:	4814      	ldr	r0, [pc, #80]	@ (8006d94 <mem_free+0xb8>)
 8006d44:	f00a fb54 	bl	80113f0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006d48:	e01d      	b.n	8006d86 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f7ff ff8a 	bl	8006c64 <mem_link_valid>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d107      	bne.n	8006d66 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8006d56:	4b0d      	ldr	r3, [pc, #52]	@ (8006d8c <mem_free+0xb0>)
 8006d58:	f240 2295 	movw	r2, #661	@ 0x295
 8006d5c:	4912      	ldr	r1, [pc, #72]	@ (8006da8 <mem_free+0xcc>)
 8006d5e:	480d      	ldr	r0, [pc, #52]	@ (8006d94 <mem_free+0xb8>)
 8006d60:	f00a fb46 	bl	80113f0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006d64:	e00f      	b.n	8006d86 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8006d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8006dac <mem_free+0xd0>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d202      	bcs.n	8006d7c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8006d76:	4a0d      	ldr	r2, [pc, #52]	@ (8006dac <mem_free+0xd0>)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f7ff fe97 	bl	8006ab0 <plug_holes>
 8006d82:	e000      	b.n	8006d86 <mem_free+0xaa>
    return;
 8006d84:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	08012528 	.word	0x08012528
 8006d90:	080125fc 	.word	0x080125fc
 8006d94:	08012570 	.word	0x08012570
 8006d98:	200056a4 	.word	0x200056a4
 8006d9c:	200056a8 	.word	0x200056a8
 8006da0:	08012620 	.word	0x08012620
 8006da4:	0801263c 	.word	0x0801263c
 8006da8:	08012664 	.word	0x08012664
 8006dac:	200056ac 	.word	0x200056ac

08006db0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b088      	sub	sp, #32
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	460b      	mov	r3, r1
 8006dba:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8006dbc:	887b      	ldrh	r3, [r7, #2]
 8006dbe:	3303      	adds	r3, #3
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	f023 0303 	bic.w	r3, r3, #3
 8006dc6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8006dc8:	8bfb      	ldrh	r3, [r7, #30]
 8006dca:	2b0b      	cmp	r3, #11
 8006dcc:	d801      	bhi.n	8006dd2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8006dce:	230c      	movs	r3, #12
 8006dd0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8006dd2:	8bfb      	ldrh	r3, [r7, #30]
 8006dd4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006dd8:	d803      	bhi.n	8006de2 <mem_trim+0x32>
 8006dda:	8bfa      	ldrh	r2, [r7, #30]
 8006ddc:	887b      	ldrh	r3, [r7, #2]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d201      	bcs.n	8006de6 <mem_trim+0x36>
    return NULL;
 8006de2:	2300      	movs	r3, #0
 8006de4:	e0cc      	b.n	8006f80 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006de6:	4b68      	ldr	r3, [pc, #416]	@ (8006f88 <mem_trim+0x1d8>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d304      	bcc.n	8006dfa <mem_trim+0x4a>
 8006df0:	4b66      	ldr	r3, [pc, #408]	@ (8006f8c <mem_trim+0x1dc>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d306      	bcc.n	8006e08 <mem_trim+0x58>
 8006dfa:	4b65      	ldr	r3, [pc, #404]	@ (8006f90 <mem_trim+0x1e0>)
 8006dfc:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8006e00:	4964      	ldr	r1, [pc, #400]	@ (8006f94 <mem_trim+0x1e4>)
 8006e02:	4865      	ldr	r0, [pc, #404]	@ (8006f98 <mem_trim+0x1e8>)
 8006e04:	f00a faf4 	bl	80113f0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006e08:	4b5f      	ldr	r3, [pc, #380]	@ (8006f88 <mem_trim+0x1d8>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d304      	bcc.n	8006e1c <mem_trim+0x6c>
 8006e12:	4b5e      	ldr	r3, [pc, #376]	@ (8006f8c <mem_trim+0x1dc>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d301      	bcc.n	8006e20 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	e0af      	b.n	8006f80 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	3b08      	subs	r3, #8
 8006e24:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8006e26:	69b8      	ldr	r0, [r7, #24]
 8006e28:	f7ff fe30 	bl	8006a8c <mem_to_ptr>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	881a      	ldrh	r2, [r3, #0]
 8006e34:	8afb      	ldrh	r3, [r7, #22]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	3b08      	subs	r3, #8
 8006e3c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006e3e:	8bfa      	ldrh	r2, [r7, #30]
 8006e40:	8abb      	ldrh	r3, [r7, #20]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d906      	bls.n	8006e54 <mem_trim+0xa4>
 8006e46:	4b52      	ldr	r3, [pc, #328]	@ (8006f90 <mem_trim+0x1e0>)
 8006e48:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8006e4c:	4953      	ldr	r1, [pc, #332]	@ (8006f9c <mem_trim+0x1ec>)
 8006e4e:	4852      	ldr	r0, [pc, #328]	@ (8006f98 <mem_trim+0x1e8>)
 8006e50:	f00a face 	bl	80113f0 <iprintf>
  if (newsize > size) {
 8006e54:	8bfa      	ldrh	r2, [r7, #30]
 8006e56:	8abb      	ldrh	r3, [r7, #20]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d901      	bls.n	8006e60 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	e08f      	b.n	8006f80 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8006e60:	8bfa      	ldrh	r2, [r7, #30]
 8006e62:	8abb      	ldrh	r3, [r7, #20]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d101      	bne.n	8006e6c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	e089      	b.n	8006f80 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	881b      	ldrh	r3, [r3, #0]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7ff fdf9 	bl	8006a68 <ptr_to_mem>
 8006e76:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	791b      	ldrb	r3, [r3, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d13f      	bne.n	8006f00 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	881b      	ldrh	r3, [r3, #0]
 8006e84:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006e88:	d106      	bne.n	8006e98 <mem_trim+0xe8>
 8006e8a:	4b41      	ldr	r3, [pc, #260]	@ (8006f90 <mem_trim+0x1e0>)
 8006e8c:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8006e90:	4943      	ldr	r1, [pc, #268]	@ (8006fa0 <mem_trim+0x1f0>)
 8006e92:	4841      	ldr	r0, [pc, #260]	@ (8006f98 <mem_trim+0x1e8>)
 8006e94:	f00a faac 	bl	80113f0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	881b      	ldrh	r3, [r3, #0]
 8006e9c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006e9e:	8afa      	ldrh	r2, [r7, #22]
 8006ea0:	8bfb      	ldrh	r3, [r7, #30]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	3308      	adds	r3, #8
 8006ea8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8006eaa:	4b3e      	ldr	r3, [pc, #248]	@ (8006fa4 <mem_trim+0x1f4>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	693a      	ldr	r2, [r7, #16]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d106      	bne.n	8006ec2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8006eb4:	89fb      	ldrh	r3, [r7, #14]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7ff fdd6 	bl	8006a68 <ptr_to_mem>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	4a39      	ldr	r2, [pc, #228]	@ (8006fa4 <mem_trim+0x1f4>)
 8006ec0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8006ec2:	89fb      	ldrh	r3, [r7, #14]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7ff fdcf 	bl	8006a68 <ptr_to_mem>
 8006eca:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	89ba      	ldrh	r2, [r7, #12]
 8006ed6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	8afa      	ldrh	r2, [r7, #22]
 8006edc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	89fa      	ldrh	r2, [r7, #14]
 8006ee2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	881b      	ldrh	r3, [r3, #0]
 8006ee8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006eec:	d047      	beq.n	8006f7e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	881b      	ldrh	r3, [r3, #0]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7ff fdb8 	bl	8006a68 <ptr_to_mem>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	89fb      	ldrh	r3, [r7, #14]
 8006efc:	8053      	strh	r3, [r2, #2]
 8006efe:	e03e      	b.n	8006f7e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006f00:	8bfb      	ldrh	r3, [r7, #30]
 8006f02:	f103 0214 	add.w	r2, r3, #20
 8006f06:	8abb      	ldrh	r3, [r7, #20]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d838      	bhi.n	8006f7e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006f0c:	8afa      	ldrh	r2, [r7, #22]
 8006f0e:	8bfb      	ldrh	r3, [r7, #30]
 8006f10:	4413      	add	r3, r2
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	3308      	adds	r3, #8
 8006f16:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	881b      	ldrh	r3, [r3, #0]
 8006f1c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006f20:	d106      	bne.n	8006f30 <mem_trim+0x180>
 8006f22:	4b1b      	ldr	r3, [pc, #108]	@ (8006f90 <mem_trim+0x1e0>)
 8006f24:	f240 3216 	movw	r2, #790	@ 0x316
 8006f28:	491d      	ldr	r1, [pc, #116]	@ (8006fa0 <mem_trim+0x1f0>)
 8006f2a:	481b      	ldr	r0, [pc, #108]	@ (8006f98 <mem_trim+0x1e8>)
 8006f2c:	f00a fa60 	bl	80113f0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8006f30:	89fb      	ldrh	r3, [r7, #14]
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7ff fd98 	bl	8006a68 <ptr_to_mem>
 8006f38:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8006f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8006fa4 <mem_trim+0x1f4>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	693a      	ldr	r2, [r7, #16]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d202      	bcs.n	8006f4a <mem_trim+0x19a>
      lfree = mem2;
 8006f44:	4a17      	ldr	r2, [pc, #92]	@ (8006fa4 <mem_trim+0x1f4>)
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	881a      	ldrh	r2, [r3, #0]
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	8afa      	ldrh	r2, [r7, #22]
 8006f5c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	89fa      	ldrh	r2, [r7, #14]
 8006f62:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	881b      	ldrh	r3, [r3, #0]
 8006f68:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006f6c:	d007      	beq.n	8006f7e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	881b      	ldrh	r3, [r3, #0]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7ff fd78 	bl	8006a68 <ptr_to_mem>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	89fb      	ldrh	r3, [r7, #14]
 8006f7c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8006f7e:	687b      	ldr	r3, [r7, #4]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3720      	adds	r7, #32
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	200056a4 	.word	0x200056a4
 8006f8c:	200056a8 	.word	0x200056a8
 8006f90:	08012528 	.word	0x08012528
 8006f94:	08012698 	.word	0x08012698
 8006f98:	08012570 	.word	0x08012570
 8006f9c:	080126b0 	.word	0x080126b0
 8006fa0:	080126d0 	.word	0x080126d0
 8006fa4:	200056ac 	.word	0x200056ac

08006fa8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b088      	sub	sp, #32
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	4603      	mov	r3, r0
 8006fb0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8006fb2:	88fb      	ldrh	r3, [r7, #6]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d101      	bne.n	8006fbc <mem_malloc+0x14>
    return NULL;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	e0d9      	b.n	8007170 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006fbc:	88fb      	ldrh	r3, [r7, #6]
 8006fbe:	3303      	adds	r3, #3
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	f023 0303 	bic.w	r3, r3, #3
 8006fc6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006fc8:	8bbb      	ldrh	r3, [r7, #28]
 8006fca:	2b0b      	cmp	r3, #11
 8006fcc:	d801      	bhi.n	8006fd2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8006fce:	230c      	movs	r3, #12
 8006fd0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006fd2:	8bbb      	ldrh	r3, [r7, #28]
 8006fd4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006fd8:	d803      	bhi.n	8006fe2 <mem_malloc+0x3a>
 8006fda:	8bba      	ldrh	r2, [r7, #28]
 8006fdc:	88fb      	ldrh	r3, [r7, #6]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d201      	bcs.n	8006fe6 <mem_malloc+0x3e>
    return NULL;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	e0c4      	b.n	8007170 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006fe6:	4b64      	ldr	r3, [pc, #400]	@ (8007178 <mem_malloc+0x1d0>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7ff fd4e 	bl	8006a8c <mem_to_ptr>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	83fb      	strh	r3, [r7, #30]
 8006ff4:	e0b4      	b.n	8007160 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8006ff6:	8bfb      	ldrh	r3, [r7, #30]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7ff fd35 	bl	8006a68 <ptr_to_mem>
 8006ffe:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	791b      	ldrb	r3, [r3, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	f040 80a4 	bne.w	8007152 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	8bfb      	ldrh	r3, [r7, #30]
 8007012:	1ad3      	subs	r3, r2, r3
 8007014:	f1a3 0208 	sub.w	r2, r3, #8
 8007018:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800701a:	429a      	cmp	r2, r3
 800701c:	f0c0 8099 	bcc.w	8007152 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	881b      	ldrh	r3, [r3, #0]
 8007024:	461a      	mov	r2, r3
 8007026:	8bfb      	ldrh	r3, [r7, #30]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	f1a3 0208 	sub.w	r2, r3, #8
 800702e:	8bbb      	ldrh	r3, [r7, #28]
 8007030:	3314      	adds	r3, #20
 8007032:	429a      	cmp	r2, r3
 8007034:	d333      	bcc.n	800709e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007036:	8bfa      	ldrh	r2, [r7, #30]
 8007038:	8bbb      	ldrh	r3, [r7, #28]
 800703a:	4413      	add	r3, r2
 800703c:	b29b      	uxth	r3, r3
 800703e:	3308      	adds	r3, #8
 8007040:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007042:	8a7b      	ldrh	r3, [r7, #18]
 8007044:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007048:	d106      	bne.n	8007058 <mem_malloc+0xb0>
 800704a:	4b4c      	ldr	r3, [pc, #304]	@ (800717c <mem_malloc+0x1d4>)
 800704c:	f240 3287 	movw	r2, #903	@ 0x387
 8007050:	494b      	ldr	r1, [pc, #300]	@ (8007180 <mem_malloc+0x1d8>)
 8007052:	484c      	ldr	r0, [pc, #304]	@ (8007184 <mem_malloc+0x1dc>)
 8007054:	f00a f9cc 	bl	80113f0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8007058:	8a7b      	ldrh	r3, [r7, #18]
 800705a:	4618      	mov	r0, r3
 800705c:	f7ff fd04 	bl	8006a68 <ptr_to_mem>
 8007060:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2200      	movs	r2, #0
 8007066:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	881a      	ldrh	r2, [r3, #0]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	8bfa      	ldrh	r2, [r7, #30]
 8007074:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	8a7a      	ldrh	r2, [r7, #18]
 800707a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	2201      	movs	r2, #1
 8007080:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	881b      	ldrh	r3, [r3, #0]
 8007086:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800708a:	d00b      	beq.n	80070a4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	881b      	ldrh	r3, [r3, #0]
 8007090:	4618      	mov	r0, r3
 8007092:	f7ff fce9 	bl	8006a68 <ptr_to_mem>
 8007096:	4602      	mov	r2, r0
 8007098:	8a7b      	ldrh	r3, [r7, #18]
 800709a:	8053      	strh	r3, [r2, #2]
 800709c:	e002      	b.n	80070a4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	2201      	movs	r2, #1
 80070a2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80070a4:	4b34      	ldr	r3, [pc, #208]	@ (8007178 <mem_malloc+0x1d0>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d127      	bne.n	80070fe <mem_malloc+0x156>
          struct mem *cur = lfree;
 80070ae:	4b32      	ldr	r3, [pc, #200]	@ (8007178 <mem_malloc+0x1d0>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80070b4:	e005      	b.n	80070c2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	881b      	ldrh	r3, [r3, #0]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7ff fcd4 	bl	8006a68 <ptr_to_mem>
 80070c0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	791b      	ldrb	r3, [r3, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d004      	beq.n	80070d4 <mem_malloc+0x12c>
 80070ca:	4b2f      	ldr	r3, [pc, #188]	@ (8007188 <mem_malloc+0x1e0>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	69ba      	ldr	r2, [r7, #24]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d1f0      	bne.n	80070b6 <mem_malloc+0x10e>
          }
          lfree = cur;
 80070d4:	4a28      	ldr	r2, [pc, #160]	@ (8007178 <mem_malloc+0x1d0>)
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80070da:	4b27      	ldr	r3, [pc, #156]	@ (8007178 <mem_malloc+0x1d0>)
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	4b2a      	ldr	r3, [pc, #168]	@ (8007188 <mem_malloc+0x1e0>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d00b      	beq.n	80070fe <mem_malloc+0x156>
 80070e6:	4b24      	ldr	r3, [pc, #144]	@ (8007178 <mem_malloc+0x1d0>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	791b      	ldrb	r3, [r3, #4]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d006      	beq.n	80070fe <mem_malloc+0x156>
 80070f0:	4b22      	ldr	r3, [pc, #136]	@ (800717c <mem_malloc+0x1d4>)
 80070f2:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80070f6:	4925      	ldr	r1, [pc, #148]	@ (800718c <mem_malloc+0x1e4>)
 80070f8:	4822      	ldr	r0, [pc, #136]	@ (8007184 <mem_malloc+0x1dc>)
 80070fa:	f00a f979 	bl	80113f0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80070fe:	8bba      	ldrh	r2, [r7, #28]
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	4413      	add	r3, r2
 8007104:	3308      	adds	r3, #8
 8007106:	4a20      	ldr	r2, [pc, #128]	@ (8007188 <mem_malloc+0x1e0>)
 8007108:	6812      	ldr	r2, [r2, #0]
 800710a:	4293      	cmp	r3, r2
 800710c:	d906      	bls.n	800711c <mem_malloc+0x174>
 800710e:	4b1b      	ldr	r3, [pc, #108]	@ (800717c <mem_malloc+0x1d4>)
 8007110:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8007114:	491e      	ldr	r1, [pc, #120]	@ (8007190 <mem_malloc+0x1e8>)
 8007116:	481b      	ldr	r0, [pc, #108]	@ (8007184 <mem_malloc+0x1dc>)
 8007118:	f00a f96a 	bl	80113f0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	f003 0303 	and.w	r3, r3, #3
 8007122:	2b00      	cmp	r3, #0
 8007124:	d006      	beq.n	8007134 <mem_malloc+0x18c>
 8007126:	4b15      	ldr	r3, [pc, #84]	@ (800717c <mem_malloc+0x1d4>)
 8007128:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800712c:	4919      	ldr	r1, [pc, #100]	@ (8007194 <mem_malloc+0x1ec>)
 800712e:	4815      	ldr	r0, [pc, #84]	@ (8007184 <mem_malloc+0x1dc>)
 8007130:	f00a f95e 	bl	80113f0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	f003 0303 	and.w	r3, r3, #3
 800713a:	2b00      	cmp	r3, #0
 800713c:	d006      	beq.n	800714c <mem_malloc+0x1a4>
 800713e:	4b0f      	ldr	r3, [pc, #60]	@ (800717c <mem_malloc+0x1d4>)
 8007140:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8007144:	4914      	ldr	r1, [pc, #80]	@ (8007198 <mem_malloc+0x1f0>)
 8007146:	480f      	ldr	r0, [pc, #60]	@ (8007184 <mem_malloc+0x1dc>)
 8007148:	f00a f952 	bl	80113f0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	3308      	adds	r3, #8
 8007150:	e00e      	b.n	8007170 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8007152:	8bfb      	ldrh	r3, [r7, #30]
 8007154:	4618      	mov	r0, r3
 8007156:	f7ff fc87 	bl	8006a68 <ptr_to_mem>
 800715a:	4603      	mov	r3, r0
 800715c:	881b      	ldrh	r3, [r3, #0]
 800715e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007160:	8bfa      	ldrh	r2, [r7, #30]
 8007162:	8bbb      	ldrh	r3, [r7, #28]
 8007164:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8007168:	429a      	cmp	r2, r3
 800716a:	f4ff af44 	bcc.w	8006ff6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	3720      	adds	r7, #32
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	200056ac 	.word	0x200056ac
 800717c:	08012528 	.word	0x08012528
 8007180:	080126d0 	.word	0x080126d0
 8007184:	08012570 	.word	0x08012570
 8007188:	200056a8 	.word	0x200056a8
 800718c:	080126e4 	.word	0x080126e4
 8007190:	08012700 	.word	0x08012700
 8007194:	08012730 	.word	0x08012730
 8007198:	08012760 	.word	0x08012760

0800719c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	2200      	movs	r2, #0
 80071aa:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	3303      	adds	r3, #3
 80071b2:	f023 0303 	bic.w	r3, r3, #3
 80071b6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80071b8:	2300      	movs	r3, #0
 80071ba:	60fb      	str	r3, [r7, #12]
 80071bc:	e011      	b.n	80071e2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	881b      	ldrh	r3, [r3, #0]
 80071d4:	461a      	mov	r2, r3
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	4413      	add	r3, r2
 80071da:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	3301      	adds	r3, #1
 80071e0:	60fb      	str	r3, [r7, #12]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	885b      	ldrh	r3, [r3, #2]
 80071e6:	461a      	mov	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	4293      	cmp	r3, r2
 80071ec:	dbe7      	blt.n	80071be <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80071ee:	bf00      	nop
 80071f0:	bf00      	nop
 80071f2:	3714      	adds	r7, #20
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007202:	2300      	movs	r3, #0
 8007204:	80fb      	strh	r3, [r7, #6]
 8007206:	e009      	b.n	800721c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007208:	88fb      	ldrh	r3, [r7, #6]
 800720a:	4a08      	ldr	r2, [pc, #32]	@ (800722c <memp_init+0x30>)
 800720c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007210:	4618      	mov	r0, r3
 8007212:	f7ff ffc3 	bl	800719c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007216:	88fb      	ldrh	r3, [r7, #6]
 8007218:	3301      	adds	r3, #1
 800721a:	80fb      	strh	r3, [r7, #6]
 800721c:	88fb      	ldrh	r3, [r7, #6]
 800721e:	2b08      	cmp	r3, #8
 8007220:	d9f2      	bls.n	8007208 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8007222:	bf00      	nop
 8007224:	bf00      	nop
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	080153b0 	.word	0x080153b0

08007230 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d012      	beq.n	800726c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	6812      	ldr	r2, [r2, #0]
 800724e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f003 0303 	and.w	r3, r3, #3
 8007256:	2b00      	cmp	r3, #0
 8007258:	d006      	beq.n	8007268 <do_memp_malloc_pool+0x38>
 800725a:	4b07      	ldr	r3, [pc, #28]	@ (8007278 <do_memp_malloc_pool+0x48>)
 800725c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8007260:	4906      	ldr	r1, [pc, #24]	@ (800727c <do_memp_malloc_pool+0x4c>)
 8007262:	4807      	ldr	r0, [pc, #28]	@ (8007280 <do_memp_malloc_pool+0x50>)
 8007264:	f00a f8c4 	bl	80113f0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	e000      	b.n	800726e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	08012784 	.word	0x08012784
 800727c:	080127b4 	.word	0x080127b4
 8007280:	080127d8 	.word	0x080127d8

08007284 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d106      	bne.n	80072a0 <memp_malloc_pool+0x1c>
 8007292:	4b0a      	ldr	r3, [pc, #40]	@ (80072bc <memp_malloc_pool+0x38>)
 8007294:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8007298:	4909      	ldr	r1, [pc, #36]	@ (80072c0 <memp_malloc_pool+0x3c>)
 800729a:	480a      	ldr	r0, [pc, #40]	@ (80072c4 <memp_malloc_pool+0x40>)
 800729c:	f00a f8a8 	bl	80113f0 <iprintf>
  if (desc == NULL) {
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d101      	bne.n	80072aa <memp_malloc_pool+0x26>
    return NULL;
 80072a6:	2300      	movs	r3, #0
 80072a8:	e003      	b.n	80072b2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f7ff ffc0 	bl	8007230 <do_memp_malloc_pool>
 80072b0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3708      	adds	r7, #8
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	08012784 	.word	0x08012784
 80072c0:	08012800 	.word	0x08012800
 80072c4:	080127d8 	.word	0x080127d8

080072c8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	4603      	mov	r3, r0
 80072d0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80072d2:	79fb      	ldrb	r3, [r7, #7]
 80072d4:	2b08      	cmp	r3, #8
 80072d6:	d908      	bls.n	80072ea <memp_malloc+0x22>
 80072d8:	4b0a      	ldr	r3, [pc, #40]	@ (8007304 <memp_malloc+0x3c>)
 80072da:	f240 1257 	movw	r2, #343	@ 0x157
 80072de:	490a      	ldr	r1, [pc, #40]	@ (8007308 <memp_malloc+0x40>)
 80072e0:	480a      	ldr	r0, [pc, #40]	@ (800730c <memp_malloc+0x44>)
 80072e2:	f00a f885 	bl	80113f0 <iprintf>
 80072e6:	2300      	movs	r3, #0
 80072e8:	e008      	b.n	80072fc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80072ea:	79fb      	ldrb	r3, [r7, #7]
 80072ec:	4a08      	ldr	r2, [pc, #32]	@ (8007310 <memp_malloc+0x48>)
 80072ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7ff ff9c 	bl	8007230 <do_memp_malloc_pool>
 80072f8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80072fa:	68fb      	ldr	r3, [r7, #12]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	08012784 	.word	0x08012784
 8007308:	08012814 	.word	0x08012814
 800730c:	080127d8 	.word	0x080127d8
 8007310:	080153b0 	.word	0x080153b0

08007314 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	f003 0303 	and.w	r3, r3, #3
 8007324:	2b00      	cmp	r3, #0
 8007326:	d006      	beq.n	8007336 <do_memp_free_pool+0x22>
 8007328:	4b0a      	ldr	r3, [pc, #40]	@ (8007354 <do_memp_free_pool+0x40>)
 800732a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800732e:	490a      	ldr	r1, [pc, #40]	@ (8007358 <do_memp_free_pool+0x44>)
 8007330:	480a      	ldr	r0, [pc, #40]	@ (800735c <do_memp_free_pool+0x48>)
 8007332:	f00a f85d 	bl	80113f0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800734c:	bf00      	nop
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	08012784 	.word	0x08012784
 8007358:	08012834 	.word	0x08012834
 800735c:	080127d8 	.word	0x080127d8

08007360 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d106      	bne.n	800737e <memp_free_pool+0x1e>
 8007370:	4b0a      	ldr	r3, [pc, #40]	@ (800739c <memp_free_pool+0x3c>)
 8007372:	f240 1295 	movw	r2, #405	@ 0x195
 8007376:	490a      	ldr	r1, [pc, #40]	@ (80073a0 <memp_free_pool+0x40>)
 8007378:	480a      	ldr	r0, [pc, #40]	@ (80073a4 <memp_free_pool+0x44>)
 800737a:	f00a f839 	bl	80113f0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d007      	beq.n	8007394 <memp_free_pool+0x34>
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d004      	beq.n	8007394 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800738a:	6839      	ldr	r1, [r7, #0]
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f7ff ffc1 	bl	8007314 <do_memp_free_pool>
 8007392:	e000      	b.n	8007396 <memp_free_pool+0x36>
    return;
 8007394:	bf00      	nop
}
 8007396:	3708      	adds	r7, #8
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	08012784 	.word	0x08012784
 80073a0:	08012800 	.word	0x08012800
 80073a4:	080127d8 	.word	0x080127d8

080073a8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	4603      	mov	r3, r0
 80073b0:	6039      	str	r1, [r7, #0]
 80073b2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80073b4:	79fb      	ldrb	r3, [r7, #7]
 80073b6:	2b08      	cmp	r3, #8
 80073b8:	d907      	bls.n	80073ca <memp_free+0x22>
 80073ba:	4b0c      	ldr	r3, [pc, #48]	@ (80073ec <memp_free+0x44>)
 80073bc:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80073c0:	490b      	ldr	r1, [pc, #44]	@ (80073f0 <memp_free+0x48>)
 80073c2:	480c      	ldr	r0, [pc, #48]	@ (80073f4 <memp_free+0x4c>)
 80073c4:	f00a f814 	bl	80113f0 <iprintf>
 80073c8:	e00c      	b.n	80073e4 <memp_free+0x3c>

  if (mem == NULL) {
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d008      	beq.n	80073e2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80073d0:	79fb      	ldrb	r3, [r7, #7]
 80073d2:	4a09      	ldr	r2, [pc, #36]	@ (80073f8 <memp_free+0x50>)
 80073d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073d8:	6839      	ldr	r1, [r7, #0]
 80073da:	4618      	mov	r0, r3
 80073dc:	f7ff ff9a 	bl	8007314 <do_memp_free_pool>
 80073e0:	e000      	b.n	80073e4 <memp_free+0x3c>
    return;
 80073e2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80073e4:	3708      	adds	r7, #8
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	08012784 	.word	0x08012784
 80073f0:	08012854 	.word	0x08012854
 80073f4:	080127d8 	.word	0x080127d8
 80073f8:	080153b0 	.word	0x080153b0

080073fc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80073fc:	b480      	push	{r7}
 80073fe:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007400:	bf00      	nop
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
	...

0800740c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b086      	sub	sp, #24
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
 8007418:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d108      	bne.n	8007432 <netif_add+0x26>
 8007420:	4b57      	ldr	r3, [pc, #348]	@ (8007580 <netif_add+0x174>)
 8007422:	f240 1227 	movw	r2, #295	@ 0x127
 8007426:	4957      	ldr	r1, [pc, #348]	@ (8007584 <netif_add+0x178>)
 8007428:	4857      	ldr	r0, [pc, #348]	@ (8007588 <netif_add+0x17c>)
 800742a:	f009 ffe1 	bl	80113f0 <iprintf>
 800742e:	2300      	movs	r3, #0
 8007430:	e0a2      	b.n	8007578 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007434:	2b00      	cmp	r3, #0
 8007436:	d108      	bne.n	800744a <netif_add+0x3e>
 8007438:	4b51      	ldr	r3, [pc, #324]	@ (8007580 <netif_add+0x174>)
 800743a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800743e:	4953      	ldr	r1, [pc, #332]	@ (800758c <netif_add+0x180>)
 8007440:	4851      	ldr	r0, [pc, #324]	@ (8007588 <netif_add+0x17c>)
 8007442:	f009 ffd5 	bl	80113f0 <iprintf>
 8007446:	2300      	movs	r3, #0
 8007448:	e096      	b.n	8007578 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d101      	bne.n	8007454 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007450:	4b4f      	ldr	r3, [pc, #316]	@ (8007590 <netif_add+0x184>)
 8007452:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d101      	bne.n	800745e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800745a:	4b4d      	ldr	r3, [pc, #308]	@ (8007590 <netif_add+0x184>)
 800745c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d101      	bne.n	8007468 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007464:	4b4a      	ldr	r3, [pc, #296]	@ (8007590 <netif_add+0x184>)
 8007466:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	4a45      	ldr	r2, [pc, #276]	@ (8007594 <netif_add+0x188>)
 800747e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6a3a      	ldr	r2, [r7, #32]
 8007498:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800749a:	4b3f      	ldr	r3, [pc, #252]	@ (8007598 <netif_add+0x18c>)
 800749c:	781a      	ldrb	r2, [r3, #0]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074a8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	68b9      	ldr	r1, [r7, #8]
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f000 f913 	bl	80076dc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80074b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	4798      	blx	r3
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d001      	beq.n	80074c6 <netif_add+0xba>
    return NULL;
 80074c2:	2300      	movs	r3, #0
 80074c4:	e058      	b.n	8007578 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80074cc:	2bff      	cmp	r3, #255	@ 0xff
 80074ce:	d103      	bne.n	80074d8 <netif_add+0xcc>
        netif->num = 0;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 80074d8:	2300      	movs	r3, #0
 80074da:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80074dc:	4b2f      	ldr	r3, [pc, #188]	@ (800759c <netif_add+0x190>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	617b      	str	r3, [r7, #20]
 80074e2:	e02b      	b.n	800753c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80074e4:	697a      	ldr	r2, [r7, #20]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d106      	bne.n	80074fa <netif_add+0xee>
 80074ec:	4b24      	ldr	r3, [pc, #144]	@ (8007580 <netif_add+0x174>)
 80074ee:	f240 128b 	movw	r2, #395	@ 0x18b
 80074f2:	492b      	ldr	r1, [pc, #172]	@ (80075a0 <netif_add+0x194>)
 80074f4:	4824      	ldr	r0, [pc, #144]	@ (8007588 <netif_add+0x17c>)
 80074f6:	f009 ff7b 	bl	80113f0 <iprintf>
        num_netifs++;
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	3301      	adds	r3, #1
 80074fe:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	2bff      	cmp	r3, #255	@ 0xff
 8007504:	dd06      	ble.n	8007514 <netif_add+0x108>
 8007506:	4b1e      	ldr	r3, [pc, #120]	@ (8007580 <netif_add+0x174>)
 8007508:	f240 128d 	movw	r2, #397	@ 0x18d
 800750c:	4925      	ldr	r1, [pc, #148]	@ (80075a4 <netif_add+0x198>)
 800750e:	481e      	ldr	r0, [pc, #120]	@ (8007588 <netif_add+0x17c>)
 8007510:	f009 ff6e 	bl	80113f0 <iprintf>
        if (netif2->num == netif->num) {
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007520:	429a      	cmp	r2, r3
 8007522:	d108      	bne.n	8007536 <netif_add+0x12a>
          netif->num++;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800752a:	3301      	adds	r3, #1
 800752c:	b2da      	uxtb	r2, r3
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8007534:	e005      	b.n	8007542 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	617b      	str	r3, [r7, #20]
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1d0      	bne.n	80074e4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1be      	bne.n	80074c6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800754e:	2bfe      	cmp	r3, #254	@ 0xfe
 8007550:	d103      	bne.n	800755a <netif_add+0x14e>
    netif_num = 0;
 8007552:	4b11      	ldr	r3, [pc, #68]	@ (8007598 <netif_add+0x18c>)
 8007554:	2200      	movs	r2, #0
 8007556:	701a      	strb	r2, [r3, #0]
 8007558:	e006      	b.n	8007568 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007560:	3301      	adds	r3, #1
 8007562:	b2da      	uxtb	r2, r3
 8007564:	4b0c      	ldr	r3, [pc, #48]	@ (8007598 <netif_add+0x18c>)
 8007566:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007568:	4b0c      	ldr	r3, [pc, #48]	@ (800759c <netif_add+0x190>)
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8007570:	4a0a      	ldr	r2, [pc, #40]	@ (800759c <netif_add+0x190>)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007576:	68fb      	ldr	r3, [r7, #12]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3718      	adds	r7, #24
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	08012870 	.word	0x08012870
 8007584:	08012904 	.word	0x08012904
 8007588:	080128c0 	.word	0x080128c0
 800758c:	08012920 	.word	0x08012920
 8007590:	08015414 	.word	0x08015414
 8007594:	080079b7 	.word	0x080079b7
 8007598:	200085a4 	.word	0x200085a4
 800759c:	2000859c 	.word	0x2000859c
 80075a0:	08012944 	.word	0x08012944
 80075a4:	08012958 	.word	0x08012958

080075a8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80075b2:	6839      	ldr	r1, [r7, #0]
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f002 fdeb 	bl	800a190 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80075ba:	6839      	ldr	r1, [r7, #0]
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f007 fb21 	bl	800ec04 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80075c2:	bf00      	nop
 80075c4:	3708      	adds	r7, #8
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
	...

080075cc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d106      	bne.n	80075ec <netif_do_set_ipaddr+0x20>
 80075de:	4b1d      	ldr	r3, [pc, #116]	@ (8007654 <netif_do_set_ipaddr+0x88>)
 80075e0:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80075e4:	491c      	ldr	r1, [pc, #112]	@ (8007658 <netif_do_set_ipaddr+0x8c>)
 80075e6:	481d      	ldr	r0, [pc, #116]	@ (800765c <netif_do_set_ipaddr+0x90>)
 80075e8:	f009 ff02 	bl	80113f0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d106      	bne.n	8007600 <netif_do_set_ipaddr+0x34>
 80075f2:	4b18      	ldr	r3, [pc, #96]	@ (8007654 <netif_do_set_ipaddr+0x88>)
 80075f4:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80075f8:	4917      	ldr	r1, [pc, #92]	@ (8007658 <netif_do_set_ipaddr+0x8c>)
 80075fa:	4818      	ldr	r0, [pc, #96]	@ (800765c <netif_do_set_ipaddr+0x90>)
 80075fc:	f009 fef8 	bl	80113f0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	3304      	adds	r3, #4
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	429a      	cmp	r2, r3
 800760c:	d01c      	beq.n	8007648 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	3304      	adds	r3, #4
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800761e:	f107 0314 	add.w	r3, r7, #20
 8007622:	4619      	mov	r1, r3
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f7ff ffbf 	bl	80075a8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d002      	beq.n	8007636 <netif_do_set_ipaddr+0x6a>
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	e000      	b.n	8007638 <netif_do_set_ipaddr+0x6c>
 8007636:	2300      	movs	r3, #0
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800763c:	2101      	movs	r1, #1
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	f000 f8d2 	bl	80077e8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007644:	2301      	movs	r3, #1
 8007646:	e000      	b.n	800764a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3718      	adds	r7, #24
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	08012870 	.word	0x08012870
 8007658:	08012988 	.word	0x08012988
 800765c:	080128c0 	.word	0x080128c0

08007660 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	3308      	adds	r3, #8
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	429a      	cmp	r2, r3
 8007678:	d00a      	beq.n	8007690 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d002      	beq.n	8007686 <netif_do_set_netmask+0x26>
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	e000      	b.n	8007688 <netif_do_set_netmask+0x28>
 8007686:	2300      	movs	r3, #0
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800768c:	2301      	movs	r3, #1
 800768e:	e000      	b.n	8007692 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3714      	adds	r7, #20
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800769e:	b480      	push	{r7}
 80076a0:	b085      	sub	sp, #20
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	60f8      	str	r0, [r7, #12]
 80076a6:	60b9      	str	r1, [r7, #8]
 80076a8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	330c      	adds	r3, #12
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d00a      	beq.n	80076ce <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d002      	beq.n	80076c4 <netif_do_set_gw+0x26>
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	e000      	b.n	80076c6 <netif_do_set_gw+0x28>
 80076c4:	2300      	movs	r3, #0
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80076ca:	2301      	movs	r3, #1
 80076cc:	e000      	b.n	80076d0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3714      	adds	r7, #20
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b088      	sub	sp, #32
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
 80076e8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80076ea:	2300      	movs	r3, #0
 80076ec:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80076ee:	2300      	movs	r3, #0
 80076f0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d101      	bne.n	80076fc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80076f8:	4b1c      	ldr	r3, [pc, #112]	@ (800776c <netif_set_addr+0x90>)
 80076fa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d101      	bne.n	8007706 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007702:	4b1a      	ldr	r3, [pc, #104]	@ (800776c <netif_set_addr+0x90>)
 8007704:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d101      	bne.n	8007710 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800770c:	4b17      	ldr	r3, [pc, #92]	@ (800776c <netif_set_addr+0x90>)
 800770e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d003      	beq.n	800771e <netif_set_addr+0x42>
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d101      	bne.n	8007722 <netif_set_addr+0x46>
 800771e:	2301      	movs	r3, #1
 8007720:	e000      	b.n	8007724 <netif_set_addr+0x48>
 8007722:	2300      	movs	r3, #0
 8007724:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d006      	beq.n	800773a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800772c:	f107 0310 	add.w	r3, r7, #16
 8007730:	461a      	mov	r2, r3
 8007732:	68b9      	ldr	r1, [r7, #8]
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f7ff ff49 	bl	80075cc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800773a:	69fa      	ldr	r2, [r7, #28]
 800773c:	6879      	ldr	r1, [r7, #4]
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f7ff ff8e 	bl	8007660 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007744:	69ba      	ldr	r2, [r7, #24]
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f7ff ffa8 	bl	800769e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d106      	bne.n	8007762 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007754:	f107 0310 	add.w	r3, r7, #16
 8007758:	461a      	mov	r2, r3
 800775a:	68b9      	ldr	r1, [r7, #8]
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	f7ff ff35 	bl	80075cc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007762:	bf00      	nop
 8007764:	3720      	adds	r7, #32
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	08015414 	.word	0x08015414

08007770 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007778:	4a04      	ldr	r2, [pc, #16]	@ (800778c <netif_set_default+0x1c>)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800777e:	bf00      	nop
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	200085a0 	.word	0x200085a0

08007790 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d107      	bne.n	80077ae <netif_set_up+0x1e>
 800779e:	4b0f      	ldr	r3, [pc, #60]	@ (80077dc <netif_set_up+0x4c>)
 80077a0:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80077a4:	490e      	ldr	r1, [pc, #56]	@ (80077e0 <netif_set_up+0x50>)
 80077a6:	480f      	ldr	r0, [pc, #60]	@ (80077e4 <netif_set_up+0x54>)
 80077a8:	f009 fe22 	bl	80113f0 <iprintf>
 80077ac:	e013      	b.n	80077d6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80077b4:	f003 0301 	and.w	r3, r3, #1
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10c      	bne.n	80077d6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80077c2:	f043 0301 	orr.w	r3, r3, #1
 80077c6:	b2da      	uxtb	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80077ce:	2103      	movs	r1, #3
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 f809 	bl	80077e8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80077d6:	3708      	adds	r7, #8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	08012870 	.word	0x08012870
 80077e0:	080129f8 	.word	0x080129f8
 80077e4:	080128c0 	.word	0x080128c0

080077e8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	460b      	mov	r3, r1
 80077f2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d106      	bne.n	8007808 <netif_issue_reports+0x20>
 80077fa:	4b18      	ldr	r3, [pc, #96]	@ (800785c <netif_issue_reports+0x74>)
 80077fc:	f240 326d 	movw	r2, #877	@ 0x36d
 8007800:	4917      	ldr	r1, [pc, #92]	@ (8007860 <netif_issue_reports+0x78>)
 8007802:	4818      	ldr	r0, [pc, #96]	@ (8007864 <netif_issue_reports+0x7c>)
 8007804:	f009 fdf4 	bl	80113f0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800780e:	f003 0304 	and.w	r3, r3, #4
 8007812:	2b00      	cmp	r3, #0
 8007814:	d01e      	beq.n	8007854 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800781c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007820:	2b00      	cmp	r3, #0
 8007822:	d017      	beq.n	8007854 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007824:	78fb      	ldrb	r3, [r7, #3]
 8007826:	f003 0301 	and.w	r3, r3, #1
 800782a:	2b00      	cmp	r3, #0
 800782c:	d013      	beq.n	8007856 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	3304      	adds	r3, #4
 8007832:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00e      	beq.n	8007856 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800783e:	f003 0308 	and.w	r3, r3, #8
 8007842:	2b00      	cmp	r3, #0
 8007844:	d007      	beq.n	8007856 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	3304      	adds	r3, #4
 800784a:	4619      	mov	r1, r3
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f008 f943 	bl	800fad8 <etharp_request>
 8007852:	e000      	b.n	8007856 <netif_issue_reports+0x6e>
    return;
 8007854:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007856:	3708      	adds	r7, #8
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	08012870 	.word	0x08012870
 8007860:	08012a14 	.word	0x08012a14
 8007864:	080128c0 	.word	0x080128c0

08007868 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d107      	bne.n	8007886 <netif_set_down+0x1e>
 8007876:	4b12      	ldr	r3, [pc, #72]	@ (80078c0 <netif_set_down+0x58>)
 8007878:	f240 329b 	movw	r2, #923	@ 0x39b
 800787c:	4911      	ldr	r1, [pc, #68]	@ (80078c4 <netif_set_down+0x5c>)
 800787e:	4812      	ldr	r0, [pc, #72]	@ (80078c8 <netif_set_down+0x60>)
 8007880:	f009 fdb6 	bl	80113f0 <iprintf>
 8007884:	e019      	b.n	80078ba <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800788c:	f003 0301 	and.w	r3, r3, #1
 8007890:	2b00      	cmp	r3, #0
 8007892:	d012      	beq.n	80078ba <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800789a:	f023 0301 	bic.w	r3, r3, #1
 800789e:	b2da      	uxtb	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80078ac:	f003 0308 	and.w	r3, r3, #8
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d002      	beq.n	80078ba <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f007 fccd 	bl	800f254 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	08012870 	.word	0x08012870
 80078c4:	08012a38 	.word	0x08012a38
 80078c8:	080128c0 	.word	0x080128c0

080078cc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d107      	bne.n	80078ea <netif_set_link_up+0x1e>
 80078da:	4b13      	ldr	r3, [pc, #76]	@ (8007928 <netif_set_link_up+0x5c>)
 80078dc:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80078e0:	4912      	ldr	r1, [pc, #72]	@ (800792c <netif_set_link_up+0x60>)
 80078e2:	4813      	ldr	r0, [pc, #76]	@ (8007930 <netif_set_link_up+0x64>)
 80078e4:	f009 fd84 	bl	80113f0 <iprintf>
 80078e8:	e01b      	b.n	8007922 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80078f0:	f003 0304 	and.w	r3, r3, #4
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d114      	bne.n	8007922 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80078fe:	f043 0304 	orr.w	r3, r3, #4
 8007902:	b2da      	uxtb	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800790a:	2103      	movs	r1, #3
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f7ff ff6b 	bl	80077e8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	69db      	ldr	r3, [r3, #28]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d003      	beq.n	8007922 <netif_set_link_up+0x56>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	69db      	ldr	r3, [r3, #28]
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	08012870 	.word	0x08012870
 800792c:	08012a58 	.word	0x08012a58
 8007930:	080128c0 	.word	0x080128c0

08007934 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d107      	bne.n	8007952 <netif_set_link_down+0x1e>
 8007942:	4b11      	ldr	r3, [pc, #68]	@ (8007988 <netif_set_link_down+0x54>)
 8007944:	f240 4206 	movw	r2, #1030	@ 0x406
 8007948:	4910      	ldr	r1, [pc, #64]	@ (800798c <netif_set_link_down+0x58>)
 800794a:	4811      	ldr	r0, [pc, #68]	@ (8007990 <netif_set_link_down+0x5c>)
 800794c:	f009 fd50 	bl	80113f0 <iprintf>
 8007950:	e017      	b.n	8007982 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007958:	f003 0304 	and.w	r3, r3, #4
 800795c:	2b00      	cmp	r3, #0
 800795e:	d010      	beq.n	8007982 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007966:	f023 0304 	bic.w	r3, r3, #4
 800796a:	b2da      	uxtb	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	69db      	ldr	r3, [r3, #28]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d003      	beq.n	8007982 <netif_set_link_down+0x4e>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	69db      	ldr	r3, [r3, #28]
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	08012870 	.word	0x08012870
 800798c:	08012a7c 	.word	0x08012a7c
 8007990:	080128c0 	.word	0x080128c0

08007994 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d002      	beq.n	80079aa <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	683a      	ldr	r2, [r7, #0]
 80079a8:	61da      	str	r2, [r3, #28]
  }
}
 80079aa:	bf00      	nop
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b085      	sub	sp, #20
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	60f8      	str	r0, [r7, #12]
 80079be:	60b9      	str	r1, [r7, #8]
 80079c0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80079c2:	f06f 030b 	mvn.w	r3, #11
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3714      	adds	r7, #20
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
	...

080079d4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	4603      	mov	r3, r0
 80079dc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80079de:	79fb      	ldrb	r3, [r7, #7]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d013      	beq.n	8007a0c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80079e4:	4b0d      	ldr	r3, [pc, #52]	@ (8007a1c <netif_get_by_index+0x48>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	60fb      	str	r3, [r7, #12]
 80079ea:	e00c      	b.n	8007a06 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80079f2:	3301      	adds	r3, #1
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	79fa      	ldrb	r2, [r7, #7]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d101      	bne.n	8007a00 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	e006      	b.n	8007a0e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	60fb      	str	r3, [r7, #12]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1ef      	bne.n	80079ec <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3714      	adds	r7, #20
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	2000859c 	.word	0x2000859c

08007a20 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007a26:	4b0c      	ldr	r3, [pc, #48]	@ (8007a58 <pbuf_free_ooseq+0x38>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8007a5c <pbuf_free_ooseq+0x3c>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	607b      	str	r3, [r7, #4]
 8007a32:	e00a      	b.n	8007a4a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d003      	beq.n	8007a44 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f002 fbe5 	bl	800a20c <tcp_free_ooseq>
      return;
 8007a42:	e005      	b.n	8007a50 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	607b      	str	r3, [r7, #4]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1f1      	bne.n	8007a34 <pbuf_free_ooseq+0x14>
    }
  }
}
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	200085a5 	.word	0x200085a5
 8007a5c:	200085b4 	.word	0x200085b4

08007a60 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007a60:	b480      	push	{r7}
 8007a62:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007a64:	4b03      	ldr	r3, [pc, #12]	@ (8007a74 <pbuf_pool_is_empty+0x14>)
 8007a66:	2201      	movs	r2, #1
 8007a68:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8007a6a:	bf00      	nop
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr
 8007a74:	200085a5 	.word	0x200085a5

08007a78 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	4611      	mov	r1, r2
 8007a84:	461a      	mov	r2, r3
 8007a86:	460b      	mov	r3, r1
 8007a88:	80fb      	strh	r3, [r7, #6]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	68ba      	ldr	r2, [r7, #8]
 8007a98:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	88fa      	ldrh	r2, [r7, #6]
 8007a9e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	88ba      	ldrh	r2, [r7, #4]
 8007aa4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8007aa6:	8b3b      	ldrh	r3, [r7, #24]
 8007aa8:	b2da      	uxtb	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	7f3a      	ldrb	r2, [r7, #28]
 8007ab2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	73da      	strb	r2, [r3, #15]
}
 8007ac0:	bf00      	nop
 8007ac2:	3714      	adds	r7, #20
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b08c      	sub	sp, #48	@ 0x30
 8007ad0:	af02      	add	r7, sp, #8
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	71fb      	strb	r3, [r7, #7]
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	80bb      	strh	r3, [r7, #4]
 8007ada:	4613      	mov	r3, r2
 8007adc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8007ade:	79fb      	ldrb	r3, [r7, #7]
 8007ae0:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8007ae2:	887b      	ldrh	r3, [r7, #2]
 8007ae4:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8007ae8:	d07f      	beq.n	8007bea <pbuf_alloc+0x11e>
 8007aea:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8007aee:	f300 80c8 	bgt.w	8007c82 <pbuf_alloc+0x1b6>
 8007af2:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8007af6:	d010      	beq.n	8007b1a <pbuf_alloc+0x4e>
 8007af8:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8007afc:	f300 80c1 	bgt.w	8007c82 <pbuf_alloc+0x1b6>
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d002      	beq.n	8007b0a <pbuf_alloc+0x3e>
 8007b04:	2b41      	cmp	r3, #65	@ 0x41
 8007b06:	f040 80bc 	bne.w	8007c82 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8007b0a:	887a      	ldrh	r2, [r7, #2]
 8007b0c:	88bb      	ldrh	r3, [r7, #4]
 8007b0e:	4619      	mov	r1, r3
 8007b10:	2000      	movs	r0, #0
 8007b12:	f000 f8d1 	bl	8007cb8 <pbuf_alloc_reference>
 8007b16:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8007b18:	e0bd      	b.n	8007c96 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8007b22:	88bb      	ldrh	r3, [r7, #4]
 8007b24:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007b26:	2008      	movs	r0, #8
 8007b28:	f7ff fbce 	bl	80072c8 <memp_malloc>
 8007b2c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d109      	bne.n	8007b48 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8007b34:	f7ff ff94 	bl	8007a60 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8007b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d002      	beq.n	8007b44 <pbuf_alloc+0x78>
            pbuf_free(p);
 8007b3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007b40:	f000 faa8 	bl	8008094 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8007b44:	2300      	movs	r3, #0
 8007b46:	e0a7      	b.n	8007c98 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007b48:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007b4a:	3303      	adds	r3, #3
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	f023 0303 	bic.w	r3, r3, #3
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	8b7a      	ldrh	r2, [r7, #26]
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	bf28      	it	cs
 8007b60:	4613      	movcs	r3, r2
 8007b62:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007b64:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007b66:	3310      	adds	r3, #16
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	3303      	adds	r3, #3
 8007b6e:	f023 0303 	bic.w	r3, r3, #3
 8007b72:	4618      	mov	r0, r3
 8007b74:	89f9      	ldrh	r1, [r7, #14]
 8007b76:	8b7a      	ldrh	r2, [r7, #26]
 8007b78:	2300      	movs	r3, #0
 8007b7a:	9301      	str	r3, [sp, #4]
 8007b7c:	887b      	ldrh	r3, [r7, #2]
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	460b      	mov	r3, r1
 8007b82:	4601      	mov	r1, r0
 8007b84:	6938      	ldr	r0, [r7, #16]
 8007b86:	f7ff ff77 	bl	8007a78 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	f003 0303 	and.w	r3, r3, #3
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d006      	beq.n	8007ba4 <pbuf_alloc+0xd8>
 8007b96:	4b42      	ldr	r3, [pc, #264]	@ (8007ca0 <pbuf_alloc+0x1d4>)
 8007b98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b9c:	4941      	ldr	r1, [pc, #260]	@ (8007ca4 <pbuf_alloc+0x1d8>)
 8007b9e:	4842      	ldr	r0, [pc, #264]	@ (8007ca8 <pbuf_alloc+0x1dc>)
 8007ba0:	f009 fc26 	bl	80113f0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007ba4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007ba6:	3303      	adds	r3, #3
 8007ba8:	f023 0303 	bic.w	r3, r3, #3
 8007bac:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8007bb0:	d106      	bne.n	8007bc0 <pbuf_alloc+0xf4>
 8007bb2:	4b3b      	ldr	r3, [pc, #236]	@ (8007ca0 <pbuf_alloc+0x1d4>)
 8007bb4:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8007bb8:	493c      	ldr	r1, [pc, #240]	@ (8007cac <pbuf_alloc+0x1e0>)
 8007bba:	483b      	ldr	r0, [pc, #236]	@ (8007ca8 <pbuf_alloc+0x1dc>)
 8007bbc:	f009 fc18 	bl	80113f0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8007bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d102      	bne.n	8007bcc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bca:	e002      	b.n	8007bd2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	693a      	ldr	r2, [r7, #16]
 8007bd0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8007bd6:	8b7a      	ldrh	r2, [r7, #26]
 8007bd8:	89fb      	ldrh	r3, [r7, #14]
 8007bda:	1ad3      	subs	r3, r2, r3
 8007bdc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8007bde:	2300      	movs	r3, #0
 8007be0:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8007be2:	8b7b      	ldrh	r3, [r7, #26]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d19e      	bne.n	8007b26 <pbuf_alloc+0x5a>
      break;
 8007be8:	e055      	b.n	8007c96 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8007bea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007bec:	3303      	adds	r3, #3
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	f023 0303 	bic.w	r3, r3, #3
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	88bb      	ldrh	r3, [r7, #4]
 8007bf8:	3303      	adds	r3, #3
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	f023 0303 	bic.w	r3, r3, #3
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	4413      	add	r3, r2
 8007c04:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007c06:	8b3b      	ldrh	r3, [r7, #24]
 8007c08:	3310      	adds	r3, #16
 8007c0a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007c0c:	8b3a      	ldrh	r2, [r7, #24]
 8007c0e:	88bb      	ldrh	r3, [r7, #4]
 8007c10:	3303      	adds	r3, #3
 8007c12:	f023 0303 	bic.w	r3, r3, #3
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d306      	bcc.n	8007c28 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8007c1a:	8afa      	ldrh	r2, [r7, #22]
 8007c1c:	88bb      	ldrh	r3, [r7, #4]
 8007c1e:	3303      	adds	r3, #3
 8007c20:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d201      	bcs.n	8007c2c <pbuf_alloc+0x160>
        return NULL;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	e035      	b.n	8007c98 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8007c2c:	8afb      	ldrh	r3, [r7, #22]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7ff f9ba 	bl	8006fa8 <mem_malloc>
 8007c34:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8007c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d101      	bne.n	8007c40 <pbuf_alloc+0x174>
        return NULL;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	e02b      	b.n	8007c98 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007c40:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007c42:	3310      	adds	r3, #16
 8007c44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c46:	4413      	add	r3, r2
 8007c48:	3303      	adds	r3, #3
 8007c4a:	f023 0303 	bic.w	r3, r3, #3
 8007c4e:	4618      	mov	r0, r3
 8007c50:	88b9      	ldrh	r1, [r7, #4]
 8007c52:	88ba      	ldrh	r2, [r7, #4]
 8007c54:	2300      	movs	r3, #0
 8007c56:	9301      	str	r3, [sp, #4]
 8007c58:	887b      	ldrh	r3, [r7, #2]
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	4601      	mov	r1, r0
 8007c60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007c62:	f7ff ff09 	bl	8007a78 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	f003 0303 	and.w	r3, r3, #3
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d010      	beq.n	8007c94 <pbuf_alloc+0x1c8>
 8007c72:	4b0b      	ldr	r3, [pc, #44]	@ (8007ca0 <pbuf_alloc+0x1d4>)
 8007c74:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8007c78:	490d      	ldr	r1, [pc, #52]	@ (8007cb0 <pbuf_alloc+0x1e4>)
 8007c7a:	480b      	ldr	r0, [pc, #44]	@ (8007ca8 <pbuf_alloc+0x1dc>)
 8007c7c:	f009 fbb8 	bl	80113f0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8007c80:	e008      	b.n	8007c94 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007c82:	4b07      	ldr	r3, [pc, #28]	@ (8007ca0 <pbuf_alloc+0x1d4>)
 8007c84:	f240 1227 	movw	r2, #295	@ 0x127
 8007c88:	490a      	ldr	r1, [pc, #40]	@ (8007cb4 <pbuf_alloc+0x1e8>)
 8007c8a:	4807      	ldr	r0, [pc, #28]	@ (8007ca8 <pbuf_alloc+0x1dc>)
 8007c8c:	f009 fbb0 	bl	80113f0 <iprintf>
      return NULL;
 8007c90:	2300      	movs	r3, #0
 8007c92:	e001      	b.n	8007c98 <pbuf_alloc+0x1cc>
      break;
 8007c94:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8007c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3728      	adds	r7, #40	@ 0x28
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	08012aa0 	.word	0x08012aa0
 8007ca4:	08012ad0 	.word	0x08012ad0
 8007ca8:	08012b00 	.word	0x08012b00
 8007cac:	08012b28 	.word	0x08012b28
 8007cb0:	08012b5c 	.word	0x08012b5c
 8007cb4:	08012b88 	.word	0x08012b88

08007cb8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b086      	sub	sp, #24
 8007cbc:	af02      	add	r7, sp, #8
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	807b      	strh	r3, [r7, #2]
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007cc8:	883b      	ldrh	r3, [r7, #0]
 8007cca:	2b41      	cmp	r3, #65	@ 0x41
 8007ccc:	d009      	beq.n	8007ce2 <pbuf_alloc_reference+0x2a>
 8007cce:	883b      	ldrh	r3, [r7, #0]
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d006      	beq.n	8007ce2 <pbuf_alloc_reference+0x2a>
 8007cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8007d14 <pbuf_alloc_reference+0x5c>)
 8007cd6:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8007cda:	490f      	ldr	r1, [pc, #60]	@ (8007d18 <pbuf_alloc_reference+0x60>)
 8007cdc:	480f      	ldr	r0, [pc, #60]	@ (8007d1c <pbuf_alloc_reference+0x64>)
 8007cde:	f009 fb87 	bl	80113f0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007ce2:	2007      	movs	r0, #7
 8007ce4:	f7ff faf0 	bl	80072c8 <memp_malloc>
 8007ce8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d101      	bne.n	8007cf4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	e00b      	b.n	8007d0c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8007cf4:	8879      	ldrh	r1, [r7, #2]
 8007cf6:	887a      	ldrh	r2, [r7, #2]
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	9301      	str	r3, [sp, #4]
 8007cfc:	883b      	ldrh	r3, [r7, #0]
 8007cfe:	9300      	str	r3, [sp, #0]
 8007d00:	460b      	mov	r3, r1
 8007d02:	6879      	ldr	r1, [r7, #4]
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f7ff feb7 	bl	8007a78 <pbuf_init_alloced_pbuf>
  return p;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	08012aa0 	.word	0x08012aa0
 8007d18:	08012ba4 	.word	0x08012ba4
 8007d1c:	08012b00 	.word	0x08012b00

08007d20 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b088      	sub	sp, #32
 8007d24:	af02      	add	r7, sp, #8
 8007d26:	607b      	str	r3, [r7, #4]
 8007d28:	4603      	mov	r3, r0
 8007d2a:	73fb      	strb	r3, [r7, #15]
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	81bb      	strh	r3, [r7, #12]
 8007d30:	4613      	mov	r3, r2
 8007d32:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8007d34:	7bfb      	ldrb	r3, [r7, #15]
 8007d36:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007d38:	8a7b      	ldrh	r3, [r7, #18]
 8007d3a:	3303      	adds	r3, #3
 8007d3c:	f023 0203 	bic.w	r2, r3, #3
 8007d40:	89bb      	ldrh	r3, [r7, #12]
 8007d42:	441a      	add	r2, r3
 8007d44:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d901      	bls.n	8007d4e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	e018      	b.n	8007d80 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8007d4e:	6a3b      	ldr	r3, [r7, #32]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d007      	beq.n	8007d64 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007d54:	8a7b      	ldrh	r3, [r7, #18]
 8007d56:	3303      	adds	r3, #3
 8007d58:	f023 0303 	bic.w	r3, r3, #3
 8007d5c:	6a3a      	ldr	r2, [r7, #32]
 8007d5e:	4413      	add	r3, r2
 8007d60:	617b      	str	r3, [r7, #20]
 8007d62:	e001      	b.n	8007d68 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8007d64:	2300      	movs	r3, #0
 8007d66:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	89b9      	ldrh	r1, [r7, #12]
 8007d6c:	89ba      	ldrh	r2, [r7, #12]
 8007d6e:	2302      	movs	r3, #2
 8007d70:	9301      	str	r3, [sp, #4]
 8007d72:	897b      	ldrh	r3, [r7, #10]
 8007d74:	9300      	str	r3, [sp, #0]
 8007d76:	460b      	mov	r3, r1
 8007d78:	6979      	ldr	r1, [r7, #20]
 8007d7a:	f7ff fe7d 	bl	8007a78 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8007d7e:	687b      	ldr	r3, [r7, #4]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3718      	adds	r7, #24
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	460b      	mov	r3, r1
 8007d92:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d106      	bne.n	8007da8 <pbuf_realloc+0x20>
 8007d9a:	4b3a      	ldr	r3, [pc, #232]	@ (8007e84 <pbuf_realloc+0xfc>)
 8007d9c:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8007da0:	4939      	ldr	r1, [pc, #228]	@ (8007e88 <pbuf_realloc+0x100>)
 8007da2:	483a      	ldr	r0, [pc, #232]	@ (8007e8c <pbuf_realloc+0x104>)
 8007da4:	f009 fb24 	bl	80113f0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	891b      	ldrh	r3, [r3, #8]
 8007dac:	887a      	ldrh	r2, [r7, #2]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d263      	bcs.n	8007e7a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	891a      	ldrh	r2, [r3, #8]
 8007db6:	887b      	ldrh	r3, [r7, #2]
 8007db8:	1ad3      	subs	r3, r2, r3
 8007dba:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8007dbc:	887b      	ldrh	r3, [r7, #2]
 8007dbe:	817b      	strh	r3, [r7, #10]
  q = p;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8007dc4:	e018      	b.n	8007df8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	895b      	ldrh	r3, [r3, #10]
 8007dca:	897a      	ldrh	r2, [r7, #10]
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	891a      	ldrh	r2, [r3, #8]
 8007dd4:	893b      	ldrh	r3, [r7, #8]
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d106      	bne.n	8007df8 <pbuf_realloc+0x70>
 8007dea:	4b26      	ldr	r3, [pc, #152]	@ (8007e84 <pbuf_realloc+0xfc>)
 8007dec:	f240 12af 	movw	r2, #431	@ 0x1af
 8007df0:	4927      	ldr	r1, [pc, #156]	@ (8007e90 <pbuf_realloc+0x108>)
 8007df2:	4826      	ldr	r0, [pc, #152]	@ (8007e8c <pbuf_realloc+0x104>)
 8007df4:	f009 fafc 	bl	80113f0 <iprintf>
  while (rem_len > q->len) {
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	895b      	ldrh	r3, [r3, #10]
 8007dfc:	897a      	ldrh	r2, [r7, #10]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d8e1      	bhi.n	8007dc6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	7b1b      	ldrb	r3, [r3, #12]
 8007e06:	f003 030f 	and.w	r3, r3, #15
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d121      	bne.n	8007e52 <pbuf_realloc+0xca>
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	895b      	ldrh	r3, [r3, #10]
 8007e12:	897a      	ldrh	r2, [r7, #10]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d01c      	beq.n	8007e52 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	7b5b      	ldrb	r3, [r3, #13]
 8007e1c:	f003 0302 	and.w	r3, r3, #2
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d116      	bne.n	8007e52 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	685a      	ldr	r2, [r3, #4]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	1ad3      	subs	r3, r2, r3
 8007e2c:	b29a      	uxth	r2, r3
 8007e2e:	897b      	ldrh	r3, [r7, #10]
 8007e30:	4413      	add	r3, r2
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	4619      	mov	r1, r3
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f7fe ffba 	bl	8006db0 <mem_trim>
 8007e3c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d106      	bne.n	8007e52 <pbuf_realloc+0xca>
 8007e44:	4b0f      	ldr	r3, [pc, #60]	@ (8007e84 <pbuf_realloc+0xfc>)
 8007e46:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8007e4a:	4912      	ldr	r1, [pc, #72]	@ (8007e94 <pbuf_realloc+0x10c>)
 8007e4c:	480f      	ldr	r0, [pc, #60]	@ (8007e8c <pbuf_realloc+0x104>)
 8007e4e:	f009 facf 	bl	80113f0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	897a      	ldrh	r2, [r7, #10]
 8007e56:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	895a      	ldrh	r2, [r3, #10]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d004      	beq.n	8007e72 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f000 f911 	bl	8008094 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2200      	movs	r2, #0
 8007e76:	601a      	str	r2, [r3, #0]
 8007e78:	e000      	b.n	8007e7c <pbuf_realloc+0xf4>
    return;
 8007e7a:	bf00      	nop

}
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	08012aa0 	.word	0x08012aa0
 8007e88:	08012bb8 	.word	0x08012bb8
 8007e8c:	08012b00 	.word	0x08012b00
 8007e90:	08012bd0 	.word	0x08012bd0
 8007e94:	08012be8 	.word	0x08012be8

08007e98 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b086      	sub	sp, #24
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d106      	bne.n	8007eba <pbuf_add_header_impl+0x22>
 8007eac:	4b2b      	ldr	r3, [pc, #172]	@ (8007f5c <pbuf_add_header_impl+0xc4>)
 8007eae:	f240 12df 	movw	r2, #479	@ 0x1df
 8007eb2:	492b      	ldr	r1, [pc, #172]	@ (8007f60 <pbuf_add_header_impl+0xc8>)
 8007eb4:	482b      	ldr	r0, [pc, #172]	@ (8007f64 <pbuf_add_header_impl+0xcc>)
 8007eb6:	f009 fa9b 	bl	80113f0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d003      	beq.n	8007ec8 <pbuf_add_header_impl+0x30>
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ec6:	d301      	bcc.n	8007ecc <pbuf_add_header_impl+0x34>
    return 1;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e043      	b.n	8007f54 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d101      	bne.n	8007ed6 <pbuf_add_header_impl+0x3e>
    return 0;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	e03e      	b.n	8007f54 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	891a      	ldrh	r2, [r3, #8]
 8007ede:	8a7b      	ldrh	r3, [r7, #18]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	8a7a      	ldrh	r2, [r7, #18]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d901      	bls.n	8007eee <pbuf_add_header_impl+0x56>
    return 1;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e032      	b.n	8007f54 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	7b1b      	ldrb	r3, [r3, #12]
 8007ef2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007ef4:	8a3b      	ldrh	r3, [r7, #16]
 8007ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00c      	beq.n	8007f18 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	685a      	ldr	r2, [r3, #4]
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	425b      	negs	r3, r3
 8007f06:	4413      	add	r3, r2
 8007f08:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	3310      	adds	r3, #16
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d20d      	bcs.n	8007f30 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8007f14:	2301      	movs	r3, #1
 8007f16:	e01d      	b.n	8007f54 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8007f18:	79fb      	ldrb	r3, [r7, #7]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d006      	beq.n	8007f2c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	685a      	ldr	r2, [r3, #4]
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	425b      	negs	r3, r3
 8007f26:	4413      	add	r3, r2
 8007f28:	617b      	str	r3, [r7, #20]
 8007f2a:	e001      	b.n	8007f30 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e011      	b.n	8007f54 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	697a      	ldr	r2, [r7, #20]
 8007f34:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	895a      	ldrh	r2, [r3, #10]
 8007f3a:	8a7b      	ldrh	r3, [r7, #18]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	891a      	ldrh	r2, [r3, #8]
 8007f48:	8a7b      	ldrh	r3, [r7, #18]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	811a      	strh	r2, [r3, #8]


  return 0;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3718      	adds	r7, #24
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	08012aa0 	.word	0x08012aa0
 8007f60:	08012c04 	.word	0x08012c04
 8007f64:	08012b00 	.word	0x08012b00

08007f68 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007f72:	2200      	movs	r2, #0
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7ff ff8e 	bl	8007e98 <pbuf_add_header_impl>
 8007f7c:	4603      	mov	r3, r0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
	...

08007f88 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d106      	bne.n	8007fa6 <pbuf_remove_header+0x1e>
 8007f98:	4b20      	ldr	r3, [pc, #128]	@ (800801c <pbuf_remove_header+0x94>)
 8007f9a:	f240 224b 	movw	r2, #587	@ 0x24b
 8007f9e:	4920      	ldr	r1, [pc, #128]	@ (8008020 <pbuf_remove_header+0x98>)
 8007fa0:	4820      	ldr	r0, [pc, #128]	@ (8008024 <pbuf_remove_header+0x9c>)
 8007fa2:	f009 fa25 	bl	80113f0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d003      	beq.n	8007fb4 <pbuf_remove_header+0x2c>
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fb2:	d301      	bcc.n	8007fb8 <pbuf_remove_header+0x30>
    return 1;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e02c      	b.n	8008012 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d101      	bne.n	8007fc2 <pbuf_remove_header+0x3a>
    return 0;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	e027      	b.n	8008012 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	895b      	ldrh	r3, [r3, #10]
 8007fca:	89fa      	ldrh	r2, [r7, #14]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d908      	bls.n	8007fe2 <pbuf_remove_header+0x5a>
 8007fd0:	4b12      	ldr	r3, [pc, #72]	@ (800801c <pbuf_remove_header+0x94>)
 8007fd2:	f240 2255 	movw	r2, #597	@ 0x255
 8007fd6:	4914      	ldr	r1, [pc, #80]	@ (8008028 <pbuf_remove_header+0xa0>)
 8007fd8:	4812      	ldr	r0, [pc, #72]	@ (8008024 <pbuf_remove_header+0x9c>)
 8007fda:	f009 fa09 	bl	80113f0 <iprintf>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e017      	b.n	8008012 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	685a      	ldr	r2, [r3, #4]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	441a      	add	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	895a      	ldrh	r2, [r3, #10]
 8007ff8:	89fb      	ldrh	r3, [r7, #14]
 8007ffa:	1ad3      	subs	r3, r2, r3
 8007ffc:	b29a      	uxth	r2, r3
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	891a      	ldrh	r2, [r3, #8]
 8008006:	89fb      	ldrh	r3, [r7, #14]
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	b29a      	uxth	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	08012aa0 	.word	0x08012aa0
 8008020:	08012c04 	.word	0x08012c04
 8008024:	08012b00 	.word	0x08012b00
 8008028:	08012c10 	.word	0x08012c10

0800802c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	460b      	mov	r3, r1
 8008036:	807b      	strh	r3, [r7, #2]
 8008038:	4613      	mov	r3, r2
 800803a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800803c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008040:	2b00      	cmp	r3, #0
 8008042:	da08      	bge.n	8008056 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8008044:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008048:	425b      	negs	r3, r3
 800804a:	4619      	mov	r1, r3
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f7ff ff9b 	bl	8007f88 <pbuf_remove_header>
 8008052:	4603      	mov	r3, r0
 8008054:	e007      	b.n	8008066 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8008056:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800805a:	787a      	ldrb	r2, [r7, #1]
 800805c:	4619      	mov	r1, r3
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f7ff ff1a 	bl	8007e98 <pbuf_add_header_impl>
 8008064:	4603      	mov	r3, r0
  }
}
 8008066:	4618      	mov	r0, r3
 8008068:	3708      	adds	r7, #8
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b082      	sub	sp, #8
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
 8008076:	460b      	mov	r3, r1
 8008078:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800807a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800807e:	2201      	movs	r2, #1
 8008080:	4619      	mov	r1, r3
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f7ff ffd2 	bl	800802c <pbuf_header_impl>
 8008088:	4603      	mov	r3, r0
}
 800808a:	4618      	mov	r0, r3
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
	...

08008094 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b086      	sub	sp, #24
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10b      	bne.n	80080ba <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d106      	bne.n	80080b6 <pbuf_free+0x22>
 80080a8:	4b38      	ldr	r3, [pc, #224]	@ (800818c <pbuf_free+0xf8>)
 80080aa:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 80080ae:	4938      	ldr	r1, [pc, #224]	@ (8008190 <pbuf_free+0xfc>)
 80080b0:	4838      	ldr	r0, [pc, #224]	@ (8008194 <pbuf_free+0x100>)
 80080b2:	f009 f99d 	bl	80113f0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80080b6:	2300      	movs	r3, #0
 80080b8:	e063      	b.n	8008182 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80080ba:	2300      	movs	r3, #0
 80080bc:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80080be:	e05c      	b.n	800817a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	7b9b      	ldrb	r3, [r3, #14]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d106      	bne.n	80080d6 <pbuf_free+0x42>
 80080c8:	4b30      	ldr	r3, [pc, #192]	@ (800818c <pbuf_free+0xf8>)
 80080ca:	f240 22f1 	movw	r2, #753	@ 0x2f1
 80080ce:	4932      	ldr	r1, [pc, #200]	@ (8008198 <pbuf_free+0x104>)
 80080d0:	4830      	ldr	r0, [pc, #192]	@ (8008194 <pbuf_free+0x100>)
 80080d2:	f009 f98d 	bl	80113f0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	7b9b      	ldrb	r3, [r3, #14]
 80080da:	3b01      	subs	r3, #1
 80080dc:	b2da      	uxtb	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	739a      	strb	r2, [r3, #14]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	7b9b      	ldrb	r3, [r3, #14]
 80080e6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80080e8:	7dbb      	ldrb	r3, [r7, #22]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d143      	bne.n	8008176 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	7b1b      	ldrb	r3, [r3, #12]
 80080f8:	f003 030f 	and.w	r3, r3, #15
 80080fc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	7b5b      	ldrb	r3, [r3, #13]
 8008102:	f003 0302 	and.w	r3, r3, #2
 8008106:	2b00      	cmp	r3, #0
 8008108:	d011      	beq.n	800812e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	691b      	ldr	r3, [r3, #16]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d106      	bne.n	8008124 <pbuf_free+0x90>
 8008116:	4b1d      	ldr	r3, [pc, #116]	@ (800818c <pbuf_free+0xf8>)
 8008118:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800811c:	491f      	ldr	r1, [pc, #124]	@ (800819c <pbuf_free+0x108>)
 800811e:	481d      	ldr	r0, [pc, #116]	@ (8008194 <pbuf_free+0x100>)
 8008120:	f009 f966 	bl	80113f0 <iprintf>
        pc->custom_free_function(p);
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	4798      	blx	r3
 800812c:	e01d      	b.n	800816a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800812e:	7bfb      	ldrb	r3, [r7, #15]
 8008130:	2b02      	cmp	r3, #2
 8008132:	d104      	bne.n	800813e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8008134:	6879      	ldr	r1, [r7, #4]
 8008136:	2008      	movs	r0, #8
 8008138:	f7ff f936 	bl	80073a8 <memp_free>
 800813c:	e015      	b.n	800816a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800813e:	7bfb      	ldrb	r3, [r7, #15]
 8008140:	2b01      	cmp	r3, #1
 8008142:	d104      	bne.n	800814e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8008144:	6879      	ldr	r1, [r7, #4]
 8008146:	2007      	movs	r0, #7
 8008148:	f7ff f92e 	bl	80073a8 <memp_free>
 800814c:	e00d      	b.n	800816a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800814e:	7bfb      	ldrb	r3, [r7, #15]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d103      	bne.n	800815c <pbuf_free+0xc8>
          mem_free(p);
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f7fe fdc1 	bl	8006cdc <mem_free>
 800815a:	e006      	b.n	800816a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800815c:	4b0b      	ldr	r3, [pc, #44]	@ (800818c <pbuf_free+0xf8>)
 800815e:	f240 320f 	movw	r2, #783	@ 0x30f
 8008162:	490f      	ldr	r1, [pc, #60]	@ (80081a0 <pbuf_free+0x10c>)
 8008164:	480b      	ldr	r0, [pc, #44]	@ (8008194 <pbuf_free+0x100>)
 8008166:	f009 f943 	bl	80113f0 <iprintf>
        }
      }
      count++;
 800816a:	7dfb      	ldrb	r3, [r7, #23]
 800816c:	3301      	adds	r3, #1
 800816e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	607b      	str	r3, [r7, #4]
 8008174:	e001      	b.n	800817a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8008176:	2300      	movs	r3, #0
 8008178:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d19f      	bne.n	80080c0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008180:	7dfb      	ldrb	r3, [r7, #23]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3718      	adds	r7, #24
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	08012aa0 	.word	0x08012aa0
 8008190:	08012c04 	.word	0x08012c04
 8008194:	08012b00 	.word	0x08012b00
 8008198:	08012c30 	.word	0x08012c30
 800819c:	08012c48 	.word	0x08012c48
 80081a0:	08012c6c 	.word	0x08012c6c

080081a4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80081ac:	2300      	movs	r3, #0
 80081ae:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80081b0:	e005      	b.n	80081be <pbuf_clen+0x1a>
    ++len;
 80081b2:	89fb      	ldrh	r3, [r7, #14]
 80081b4:	3301      	adds	r3, #1
 80081b6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1f6      	bne.n	80081b2 <pbuf_clen+0xe>
  }
  return len;
 80081c4:	89fb      	ldrh	r3, [r7, #14]
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3714      	adds	r7, #20
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
	...

080081d4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d010      	beq.n	8008204 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	7b9b      	ldrb	r3, [r3, #14]
 80081e6:	3301      	adds	r3, #1
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	7b9b      	ldrb	r3, [r3, #14]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d106      	bne.n	8008204 <pbuf_ref+0x30>
 80081f6:	4b05      	ldr	r3, [pc, #20]	@ (800820c <pbuf_ref+0x38>)
 80081f8:	f240 3242 	movw	r2, #834	@ 0x342
 80081fc:	4904      	ldr	r1, [pc, #16]	@ (8008210 <pbuf_ref+0x3c>)
 80081fe:	4805      	ldr	r0, [pc, #20]	@ (8008214 <pbuf_ref+0x40>)
 8008200:	f009 f8f6 	bl	80113f0 <iprintf>
  }
}
 8008204:	bf00      	nop
 8008206:	3708      	adds	r7, #8
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}
 800820c:	08012aa0 	.word	0x08012aa0
 8008210:	08012c80 	.word	0x08012c80
 8008214:	08012b00 	.word	0x08012b00

08008218 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d002      	beq.n	800822e <pbuf_cat+0x16>
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d107      	bne.n	800823e <pbuf_cat+0x26>
 800822e:	4b20      	ldr	r3, [pc, #128]	@ (80082b0 <pbuf_cat+0x98>)
 8008230:	f240 3259 	movw	r2, #857	@ 0x359
 8008234:	491f      	ldr	r1, [pc, #124]	@ (80082b4 <pbuf_cat+0x9c>)
 8008236:	4820      	ldr	r0, [pc, #128]	@ (80082b8 <pbuf_cat+0xa0>)
 8008238:	f009 f8da 	bl	80113f0 <iprintf>
 800823c:	e034      	b.n	80082a8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	60fb      	str	r3, [r7, #12]
 8008242:	e00a      	b.n	800825a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	891a      	ldrh	r2, [r3, #8]
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	891b      	ldrh	r3, [r3, #8]
 800824c:	4413      	add	r3, r2
 800824e:	b29a      	uxth	r2, r3
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	60fb      	str	r3, [r7, #12]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1f0      	bne.n	8008244 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	891a      	ldrh	r2, [r3, #8]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	895b      	ldrh	r3, [r3, #10]
 800826a:	429a      	cmp	r2, r3
 800826c:	d006      	beq.n	800827c <pbuf_cat+0x64>
 800826e:	4b10      	ldr	r3, [pc, #64]	@ (80082b0 <pbuf_cat+0x98>)
 8008270:	f240 3262 	movw	r2, #866	@ 0x362
 8008274:	4911      	ldr	r1, [pc, #68]	@ (80082bc <pbuf_cat+0xa4>)
 8008276:	4810      	ldr	r0, [pc, #64]	@ (80082b8 <pbuf_cat+0xa0>)
 8008278:	f009 f8ba 	bl	80113f0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d006      	beq.n	8008292 <pbuf_cat+0x7a>
 8008284:	4b0a      	ldr	r3, [pc, #40]	@ (80082b0 <pbuf_cat+0x98>)
 8008286:	f240 3263 	movw	r2, #867	@ 0x363
 800828a:	490d      	ldr	r1, [pc, #52]	@ (80082c0 <pbuf_cat+0xa8>)
 800828c:	480a      	ldr	r0, [pc, #40]	@ (80082b8 <pbuf_cat+0xa0>)
 800828e:	f009 f8af 	bl	80113f0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	891a      	ldrh	r2, [r3, #8]
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	891b      	ldrh	r3, [r3, #8]
 800829a:	4413      	add	r3, r2
 800829c:	b29a      	uxth	r2, r3
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	683a      	ldr	r2, [r7, #0]
 80082a6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	08012aa0 	.word	0x08012aa0
 80082b4:	08012c94 	.word	0x08012c94
 80082b8:	08012b00 	.word	0x08012b00
 80082bc:	08012ccc 	.word	0x08012ccc
 80082c0:	08012cfc 	.word	0x08012cfc

080082c4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b086      	sub	sp, #24
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80082ce:	2300      	movs	r3, #0
 80082d0:	617b      	str	r3, [r7, #20]
 80082d2:	2300      	movs	r3, #0
 80082d4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d008      	beq.n	80082ee <pbuf_copy+0x2a>
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d005      	beq.n	80082ee <pbuf_copy+0x2a>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	891a      	ldrh	r2, [r3, #8]
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	891b      	ldrh	r3, [r3, #8]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d209      	bcs.n	8008302 <pbuf_copy+0x3e>
 80082ee:	4b57      	ldr	r3, [pc, #348]	@ (800844c <pbuf_copy+0x188>)
 80082f0:	f240 32c9 	movw	r2, #969	@ 0x3c9
 80082f4:	4956      	ldr	r1, [pc, #344]	@ (8008450 <pbuf_copy+0x18c>)
 80082f6:	4857      	ldr	r0, [pc, #348]	@ (8008454 <pbuf_copy+0x190>)
 80082f8:	f009 f87a 	bl	80113f0 <iprintf>
 80082fc:	f06f 030f 	mvn.w	r3, #15
 8008300:	e09f      	b.n	8008442 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	895b      	ldrh	r3, [r3, #10]
 8008306:	461a      	mov	r2, r3
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	1ad2      	subs	r2, r2, r3
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	895b      	ldrh	r3, [r3, #10]
 8008310:	4619      	mov	r1, r3
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	1acb      	subs	r3, r1, r3
 8008316:	429a      	cmp	r2, r3
 8008318:	d306      	bcc.n	8008328 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	895b      	ldrh	r3, [r3, #10]
 800831e:	461a      	mov	r2, r3
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	1ad3      	subs	r3, r2, r3
 8008324:	60fb      	str	r3, [r7, #12]
 8008326:	e005      	b.n	8008334 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	895b      	ldrh	r3, [r3, #10]
 800832c:	461a      	mov	r2, r3
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	685a      	ldr	r2, [r3, #4]
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	18d0      	adds	r0, r2, r3
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	685a      	ldr	r2, [r3, #4]
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	4413      	add	r3, r2
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	4619      	mov	r1, r3
 8008348:	f009 f94b 	bl	80115e2 <memcpy>
    offset_to += len;
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	4413      	add	r3, r2
 8008352:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8008354:	693a      	ldr	r2, [r7, #16]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	4413      	add	r3, r2
 800835a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	895b      	ldrh	r3, [r3, #10]
 8008360:	461a      	mov	r2, r3
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	4293      	cmp	r3, r2
 8008366:	d906      	bls.n	8008376 <pbuf_copy+0xb2>
 8008368:	4b38      	ldr	r3, [pc, #224]	@ (800844c <pbuf_copy+0x188>)
 800836a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800836e:	493a      	ldr	r1, [pc, #232]	@ (8008458 <pbuf_copy+0x194>)
 8008370:	4838      	ldr	r0, [pc, #224]	@ (8008454 <pbuf_copy+0x190>)
 8008372:	f009 f83d 	bl	80113f0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	895b      	ldrh	r3, [r3, #10]
 800837a:	461a      	mov	r2, r3
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	4293      	cmp	r3, r2
 8008380:	d906      	bls.n	8008390 <pbuf_copy+0xcc>
 8008382:	4b32      	ldr	r3, [pc, #200]	@ (800844c <pbuf_copy+0x188>)
 8008384:	f240 32da 	movw	r2, #986	@ 0x3da
 8008388:	4934      	ldr	r1, [pc, #208]	@ (800845c <pbuf_copy+0x198>)
 800838a:	4832      	ldr	r0, [pc, #200]	@ (8008454 <pbuf_copy+0x190>)
 800838c:	f009 f830 	bl	80113f0 <iprintf>
    if (offset_from >= p_from->len) {
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	895b      	ldrh	r3, [r3, #10]
 8008394:	461a      	mov	r2, r3
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	4293      	cmp	r3, r2
 800839a:	d304      	bcc.n	80083a6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800839c:	2300      	movs	r3, #0
 800839e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	895b      	ldrh	r3, [r3, #10]
 80083aa:	461a      	mov	r2, r3
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d114      	bne.n	80083dc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80083b2:	2300      	movs	r3, #0
 80083b4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10c      	bne.n	80083dc <pbuf_copy+0x118>
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d009      	beq.n	80083dc <pbuf_copy+0x118>
 80083c8:	4b20      	ldr	r3, [pc, #128]	@ (800844c <pbuf_copy+0x188>)
 80083ca:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80083ce:	4924      	ldr	r1, [pc, #144]	@ (8008460 <pbuf_copy+0x19c>)
 80083d0:	4820      	ldr	r0, [pc, #128]	@ (8008454 <pbuf_copy+0x190>)
 80083d2:	f009 f80d 	bl	80113f0 <iprintf>
 80083d6:	f06f 030f 	mvn.w	r3, #15
 80083da:	e032      	b.n	8008442 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d013      	beq.n	800840a <pbuf_copy+0x146>
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	895a      	ldrh	r2, [r3, #10]
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	891b      	ldrh	r3, [r3, #8]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d10d      	bne.n	800840a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d009      	beq.n	800840a <pbuf_copy+0x146>
 80083f6:	4b15      	ldr	r3, [pc, #84]	@ (800844c <pbuf_copy+0x188>)
 80083f8:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80083fc:	4919      	ldr	r1, [pc, #100]	@ (8008464 <pbuf_copy+0x1a0>)
 80083fe:	4815      	ldr	r0, [pc, #84]	@ (8008454 <pbuf_copy+0x190>)
 8008400:	f008 fff6 	bl	80113f0 <iprintf>
 8008404:	f06f 0305 	mvn.w	r3, #5
 8008408:	e01b      	b.n	8008442 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d013      	beq.n	8008438 <pbuf_copy+0x174>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	895a      	ldrh	r2, [r3, #10]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	891b      	ldrh	r3, [r3, #8]
 8008418:	429a      	cmp	r2, r3
 800841a:	d10d      	bne.n	8008438 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d009      	beq.n	8008438 <pbuf_copy+0x174>
 8008424:	4b09      	ldr	r3, [pc, #36]	@ (800844c <pbuf_copy+0x188>)
 8008426:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800842a:	490e      	ldr	r1, [pc, #56]	@ (8008464 <pbuf_copy+0x1a0>)
 800842c:	4809      	ldr	r0, [pc, #36]	@ (8008454 <pbuf_copy+0x190>)
 800842e:	f008 ffdf 	bl	80113f0 <iprintf>
 8008432:	f06f 0305 	mvn.w	r3, #5
 8008436:	e004      	b.n	8008442 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	f47f af61 	bne.w	8008302 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3718      	adds	r7, #24
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	08012aa0 	.word	0x08012aa0
 8008450:	08012d48 	.word	0x08012d48
 8008454:	08012b00 	.word	0x08012b00
 8008458:	08012d78 	.word	0x08012d78
 800845c:	08012d90 	.word	0x08012d90
 8008460:	08012dac 	.word	0x08012dac
 8008464:	08012dbc 	.word	0x08012dbc

08008468 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b088      	sub	sp, #32
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	4611      	mov	r1, r2
 8008474:	461a      	mov	r2, r3
 8008476:	460b      	mov	r3, r1
 8008478:	80fb      	strh	r3, [r7, #6]
 800847a:	4613      	mov	r3, r2
 800847c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800847e:	2300      	movs	r3, #0
 8008480:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008482:	2300      	movs	r3, #0
 8008484:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d108      	bne.n	800849e <pbuf_copy_partial+0x36>
 800848c:	4b2b      	ldr	r3, [pc, #172]	@ (800853c <pbuf_copy_partial+0xd4>)
 800848e:	f240 420a 	movw	r2, #1034	@ 0x40a
 8008492:	492b      	ldr	r1, [pc, #172]	@ (8008540 <pbuf_copy_partial+0xd8>)
 8008494:	482b      	ldr	r0, [pc, #172]	@ (8008544 <pbuf_copy_partial+0xdc>)
 8008496:	f008 ffab 	bl	80113f0 <iprintf>
 800849a:	2300      	movs	r3, #0
 800849c:	e04a      	b.n	8008534 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d108      	bne.n	80084b6 <pbuf_copy_partial+0x4e>
 80084a4:	4b25      	ldr	r3, [pc, #148]	@ (800853c <pbuf_copy_partial+0xd4>)
 80084a6:	f240 420b 	movw	r2, #1035	@ 0x40b
 80084aa:	4927      	ldr	r1, [pc, #156]	@ (8008548 <pbuf_copy_partial+0xe0>)
 80084ac:	4825      	ldr	r0, [pc, #148]	@ (8008544 <pbuf_copy_partial+0xdc>)
 80084ae:	f008 ff9f 	bl	80113f0 <iprintf>
 80084b2:	2300      	movs	r3, #0
 80084b4:	e03e      	b.n	8008534 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	61fb      	str	r3, [r7, #28]
 80084ba:	e034      	b.n	8008526 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80084bc:	88bb      	ldrh	r3, [r7, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00a      	beq.n	80084d8 <pbuf_copy_partial+0x70>
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	895b      	ldrh	r3, [r3, #10]
 80084c6:	88ba      	ldrh	r2, [r7, #4]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d305      	bcc.n	80084d8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	895b      	ldrh	r3, [r3, #10]
 80084d0:	88ba      	ldrh	r2, [r7, #4]
 80084d2:	1ad3      	subs	r3, r2, r3
 80084d4:	80bb      	strh	r3, [r7, #4]
 80084d6:	e023      	b.n	8008520 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	895a      	ldrh	r2, [r3, #10]
 80084dc:	88bb      	ldrh	r3, [r7, #4]
 80084de:	1ad3      	subs	r3, r2, r3
 80084e0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80084e2:	8b3a      	ldrh	r2, [r7, #24]
 80084e4:	88fb      	ldrh	r3, [r7, #6]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d901      	bls.n	80084ee <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80084ea:	88fb      	ldrh	r3, [r7, #6]
 80084ec:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80084ee:	8b7b      	ldrh	r3, [r7, #26]
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	18d0      	adds	r0, r2, r3
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	685a      	ldr	r2, [r3, #4]
 80084f8:	88bb      	ldrh	r3, [r7, #4]
 80084fa:	4413      	add	r3, r2
 80084fc:	8b3a      	ldrh	r2, [r7, #24]
 80084fe:	4619      	mov	r1, r3
 8008500:	f009 f86f 	bl	80115e2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008504:	8afa      	ldrh	r2, [r7, #22]
 8008506:	8b3b      	ldrh	r3, [r7, #24]
 8008508:	4413      	add	r3, r2
 800850a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800850c:	8b7a      	ldrh	r2, [r7, #26]
 800850e:	8b3b      	ldrh	r3, [r7, #24]
 8008510:	4413      	add	r3, r2
 8008512:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008514:	88fa      	ldrh	r2, [r7, #6]
 8008516:	8b3b      	ldrh	r3, [r7, #24]
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800851c:	2300      	movs	r3, #0
 800851e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	61fb      	str	r3, [r7, #28]
 8008526:	88fb      	ldrh	r3, [r7, #6]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d002      	beq.n	8008532 <pbuf_copy_partial+0xca>
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1c4      	bne.n	80084bc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8008532:	8afb      	ldrh	r3, [r7, #22]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3720      	adds	r7, #32
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	08012aa0 	.word	0x08012aa0
 8008540:	08012de8 	.word	0x08012de8
 8008544:	08012b00 	.word	0x08012b00
 8008548:	08012e08 	.word	0x08012e08

0800854c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	4603      	mov	r3, r0
 8008554:	603a      	str	r2, [r7, #0]
 8008556:	71fb      	strb	r3, [r7, #7]
 8008558:	460b      	mov	r3, r1
 800855a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	8919      	ldrh	r1, [r3, #8]
 8008560:	88ba      	ldrh	r2, [r7, #4]
 8008562:	79fb      	ldrb	r3, [r7, #7]
 8008564:	4618      	mov	r0, r3
 8008566:	f7ff fab1 	bl	8007acc <pbuf_alloc>
 800856a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d101      	bne.n	8008576 <pbuf_clone+0x2a>
    return NULL;
 8008572:	2300      	movs	r3, #0
 8008574:	e011      	b.n	800859a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8008576:	6839      	ldr	r1, [r7, #0]
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	f7ff fea3 	bl	80082c4 <pbuf_copy>
 800857e:	4603      	mov	r3, r0
 8008580:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008582:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d006      	beq.n	8008598 <pbuf_clone+0x4c>
 800858a:	4b06      	ldr	r3, [pc, #24]	@ (80085a4 <pbuf_clone+0x58>)
 800858c:	f240 5224 	movw	r2, #1316	@ 0x524
 8008590:	4905      	ldr	r1, [pc, #20]	@ (80085a8 <pbuf_clone+0x5c>)
 8008592:	4806      	ldr	r0, [pc, #24]	@ (80085ac <pbuf_clone+0x60>)
 8008594:	f008 ff2c 	bl	80113f0 <iprintf>
  return q;
 8008598:	68fb      	ldr	r3, [r7, #12]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	08012aa0 	.word	0x08012aa0
 80085a8:	08012f14 	.word	0x08012f14
 80085ac:	08012b00 	.word	0x08012b00

080085b0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80085b4:	f008 fe1c 	bl	80111f0 <rand>
 80085b8:	4603      	mov	r3, r0
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80085c6:	b29a      	uxth	r2, r3
 80085c8:	4b01      	ldr	r3, [pc, #4]	@ (80085d0 <tcp_init+0x20>)
 80085ca:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80085cc:	bf00      	nop
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	20000020 	.word	0x20000020

080085d4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	7d1b      	ldrb	r3, [r3, #20]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d105      	bne.n	80085f0 <tcp_free+0x1c>
 80085e4:	4b06      	ldr	r3, [pc, #24]	@ (8008600 <tcp_free+0x2c>)
 80085e6:	22d4      	movs	r2, #212	@ 0xd4
 80085e8:	4906      	ldr	r1, [pc, #24]	@ (8008604 <tcp_free+0x30>)
 80085ea:	4807      	ldr	r0, [pc, #28]	@ (8008608 <tcp_free+0x34>)
 80085ec:	f008 ff00 	bl	80113f0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80085f0:	6879      	ldr	r1, [r7, #4]
 80085f2:	2001      	movs	r0, #1
 80085f4:	f7fe fed8 	bl	80073a8 <memp_free>
}
 80085f8:	bf00      	nop
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	08012fa0 	.word	0x08012fa0
 8008604:	08012fd0 	.word	0x08012fd0
 8008608:	08012fe4 	.word	0x08012fe4

0800860c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	7d1b      	ldrb	r3, [r3, #20]
 8008618:	2b01      	cmp	r3, #1
 800861a:	d105      	bne.n	8008628 <tcp_free_listen+0x1c>
 800861c:	4b06      	ldr	r3, [pc, #24]	@ (8008638 <tcp_free_listen+0x2c>)
 800861e:	22df      	movs	r2, #223	@ 0xdf
 8008620:	4906      	ldr	r1, [pc, #24]	@ (800863c <tcp_free_listen+0x30>)
 8008622:	4807      	ldr	r0, [pc, #28]	@ (8008640 <tcp_free_listen+0x34>)
 8008624:	f008 fee4 	bl	80113f0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008628:	6879      	ldr	r1, [r7, #4]
 800862a:	2002      	movs	r0, #2
 800862c:	f7fe febc 	bl	80073a8 <memp_free>
}
 8008630:	bf00      	nop
 8008632:	3708      	adds	r7, #8
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	08012fa0 	.word	0x08012fa0
 800863c:	0801300c 	.word	0x0801300c
 8008640:	08012fe4 	.word	0x08012fe4

08008644 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008648:	f001 f85e 	bl	8009708 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800864c:	4b07      	ldr	r3, [pc, #28]	@ (800866c <tcp_tmr+0x28>)
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	3301      	adds	r3, #1
 8008652:	b2da      	uxtb	r2, r3
 8008654:	4b05      	ldr	r3, [pc, #20]	@ (800866c <tcp_tmr+0x28>)
 8008656:	701a      	strb	r2, [r3, #0]
 8008658:	4b04      	ldr	r3, [pc, #16]	@ (800866c <tcp_tmr+0x28>)
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	f003 0301 	and.w	r3, r3, #1
 8008660:	2b00      	cmp	r3, #0
 8008662:	d001      	beq.n	8008668 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008664:	f000 fd0e 	bl	8009084 <tcp_slowtmr>
  }
}
 8008668:	bf00      	nop
 800866a:	bd80      	pop	{r7, pc}
 800866c:	200085bd 	.word	0x200085bd

08008670 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d105      	bne.n	800868c <tcp_remove_listener+0x1c>
 8008680:	4b0d      	ldr	r3, [pc, #52]	@ (80086b8 <tcp_remove_listener+0x48>)
 8008682:	22ff      	movs	r2, #255	@ 0xff
 8008684:	490d      	ldr	r1, [pc, #52]	@ (80086bc <tcp_remove_listener+0x4c>)
 8008686:	480e      	ldr	r0, [pc, #56]	@ (80086c0 <tcp_remove_listener+0x50>)
 8008688:	f008 feb2 	bl	80113f0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	60fb      	str	r3, [r7, #12]
 8008690:	e00a      	b.n	80086a8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008696:	683a      	ldr	r2, [r7, #0]
 8008698:	429a      	cmp	r2, r3
 800869a:	d102      	bne.n	80086a2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2200      	movs	r2, #0
 80086a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	60fb      	str	r3, [r7, #12]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1f1      	bne.n	8008692 <tcp_remove_listener+0x22>
    }
  }
}
 80086ae:	bf00      	nop
 80086b0:	bf00      	nop
 80086b2:	3710      	adds	r7, #16
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	08012fa0 	.word	0x08012fa0
 80086bc:	08013028 	.word	0x08013028
 80086c0:	08012fe4 	.word	0x08012fe4

080086c4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d106      	bne.n	80086e0 <tcp_listen_closed+0x1c>
 80086d2:	4b14      	ldr	r3, [pc, #80]	@ (8008724 <tcp_listen_closed+0x60>)
 80086d4:	f240 1211 	movw	r2, #273	@ 0x111
 80086d8:	4913      	ldr	r1, [pc, #76]	@ (8008728 <tcp_listen_closed+0x64>)
 80086da:	4814      	ldr	r0, [pc, #80]	@ (800872c <tcp_listen_closed+0x68>)
 80086dc:	f008 fe88 	bl	80113f0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	7d1b      	ldrb	r3, [r3, #20]
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d006      	beq.n	80086f6 <tcp_listen_closed+0x32>
 80086e8:	4b0e      	ldr	r3, [pc, #56]	@ (8008724 <tcp_listen_closed+0x60>)
 80086ea:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80086ee:	4910      	ldr	r1, [pc, #64]	@ (8008730 <tcp_listen_closed+0x6c>)
 80086f0:	480e      	ldr	r0, [pc, #56]	@ (800872c <tcp_listen_closed+0x68>)
 80086f2:	f008 fe7d 	bl	80113f0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80086f6:	2301      	movs	r3, #1
 80086f8:	60fb      	str	r3, [r7, #12]
 80086fa:	e00b      	b.n	8008714 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80086fc:	4a0d      	ldr	r2, [pc, #52]	@ (8008734 <tcp_listen_closed+0x70>)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	6879      	ldr	r1, [r7, #4]
 8008708:	4618      	mov	r0, r3
 800870a:	f7ff ffb1 	bl	8008670 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	3301      	adds	r3, #1
 8008712:	60fb      	str	r3, [r7, #12]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2b03      	cmp	r3, #3
 8008718:	d9f0      	bls.n	80086fc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800871a:	bf00      	nop
 800871c:	bf00      	nop
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}
 8008724:	08012fa0 	.word	0x08012fa0
 8008728:	08013050 	.word	0x08013050
 800872c:	08012fe4 	.word	0x08012fe4
 8008730:	0801305c 	.word	0x0801305c
 8008734:	080153ec 	.word	0x080153ec

08008738 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008738:	b5b0      	push	{r4, r5, r7, lr}
 800873a:	b088      	sub	sp, #32
 800873c:	af04      	add	r7, sp, #16
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	460b      	mov	r3, r1
 8008742:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d106      	bne.n	8008758 <tcp_close_shutdown+0x20>
 800874a:	4b63      	ldr	r3, [pc, #396]	@ (80088d8 <tcp_close_shutdown+0x1a0>)
 800874c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8008750:	4962      	ldr	r1, [pc, #392]	@ (80088dc <tcp_close_shutdown+0x1a4>)
 8008752:	4863      	ldr	r0, [pc, #396]	@ (80088e0 <tcp_close_shutdown+0x1a8>)
 8008754:	f008 fe4c 	bl	80113f0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008758:	78fb      	ldrb	r3, [r7, #3]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d066      	beq.n	800882c <tcp_close_shutdown+0xf4>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	7d1b      	ldrb	r3, [r3, #20]
 8008762:	2b04      	cmp	r3, #4
 8008764:	d003      	beq.n	800876e <tcp_close_shutdown+0x36>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	7d1b      	ldrb	r3, [r3, #20]
 800876a:	2b07      	cmp	r3, #7
 800876c:	d15e      	bne.n	800882c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008772:	2b00      	cmp	r3, #0
 8008774:	d104      	bne.n	8008780 <tcp_close_shutdown+0x48>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800877a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800877e:	d055      	beq.n	800882c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	8b5b      	ldrh	r3, [r3, #26]
 8008784:	f003 0310 	and.w	r3, r3, #16
 8008788:	2b00      	cmp	r3, #0
 800878a:	d106      	bne.n	800879a <tcp_close_shutdown+0x62>
 800878c:	4b52      	ldr	r3, [pc, #328]	@ (80088d8 <tcp_close_shutdown+0x1a0>)
 800878e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8008792:	4954      	ldr	r1, [pc, #336]	@ (80088e4 <tcp_close_shutdown+0x1ac>)
 8008794:	4852      	ldr	r0, [pc, #328]	@ (80088e0 <tcp_close_shutdown+0x1a8>)
 8008796:	f008 fe2b 	bl	80113f0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80087a2:	687d      	ldr	r5, [r7, #4]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	3304      	adds	r3, #4
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	8ad2      	ldrh	r2, [r2, #22]
 80087ac:	6879      	ldr	r1, [r7, #4]
 80087ae:	8b09      	ldrh	r1, [r1, #24]
 80087b0:	9102      	str	r1, [sp, #8]
 80087b2:	9201      	str	r2, [sp, #4]
 80087b4:	9300      	str	r3, [sp, #0]
 80087b6:	462b      	mov	r3, r5
 80087b8:	4622      	mov	r2, r4
 80087ba:	4601      	mov	r1, r0
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f005 fd8b 	bl	800e2d8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f001 fb6e 	bl	8009ea4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80087c8:	4b47      	ldr	r3, [pc, #284]	@ (80088e8 <tcp_close_shutdown+0x1b0>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d105      	bne.n	80087de <tcp_close_shutdown+0xa6>
 80087d2:	4b45      	ldr	r3, [pc, #276]	@ (80088e8 <tcp_close_shutdown+0x1b0>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	4a43      	ldr	r2, [pc, #268]	@ (80088e8 <tcp_close_shutdown+0x1b0>)
 80087da:	6013      	str	r3, [r2, #0]
 80087dc:	e013      	b.n	8008806 <tcp_close_shutdown+0xce>
 80087de:	4b42      	ldr	r3, [pc, #264]	@ (80088e8 <tcp_close_shutdown+0x1b0>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	60fb      	str	r3, [r7, #12]
 80087e4:	e00c      	b.n	8008800 <tcp_close_shutdown+0xc8>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d104      	bne.n	80087fa <tcp_close_shutdown+0xc2>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	68da      	ldr	r2, [r3, #12]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	60da      	str	r2, [r3, #12]
 80087f8:	e005      	b.n	8008806 <tcp_close_shutdown+0xce>
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	60fb      	str	r3, [r7, #12]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1ef      	bne.n	80087e6 <tcp_close_shutdown+0xae>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	60da      	str	r2, [r3, #12]
 800880c:	4b37      	ldr	r3, [pc, #220]	@ (80088ec <tcp_close_shutdown+0x1b4>)
 800880e:	2201      	movs	r2, #1
 8008810:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008812:	4b37      	ldr	r3, [pc, #220]	@ (80088f0 <tcp_close_shutdown+0x1b8>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	429a      	cmp	r2, r3
 800881a:	d102      	bne.n	8008822 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800881c:	f004 f802 	bl	800c824 <tcp_trigger_input_pcb_close>
 8008820:	e002      	b.n	8008828 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f7ff fed6 	bl	80085d4 <tcp_free>
      }
      return ERR_OK;
 8008828:	2300      	movs	r3, #0
 800882a:	e050      	b.n	80088ce <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	7d1b      	ldrb	r3, [r3, #20]
 8008830:	2b02      	cmp	r3, #2
 8008832:	d03b      	beq.n	80088ac <tcp_close_shutdown+0x174>
 8008834:	2b02      	cmp	r3, #2
 8008836:	dc44      	bgt.n	80088c2 <tcp_close_shutdown+0x18a>
 8008838:	2b00      	cmp	r3, #0
 800883a:	d002      	beq.n	8008842 <tcp_close_shutdown+0x10a>
 800883c:	2b01      	cmp	r3, #1
 800883e:	d02a      	beq.n	8008896 <tcp_close_shutdown+0x15e>
 8008840:	e03f      	b.n	80088c2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	8adb      	ldrh	r3, [r3, #22]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d021      	beq.n	800888e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800884a:	4b2a      	ldr	r3, [pc, #168]	@ (80088f4 <tcp_close_shutdown+0x1bc>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	429a      	cmp	r2, r3
 8008852:	d105      	bne.n	8008860 <tcp_close_shutdown+0x128>
 8008854:	4b27      	ldr	r3, [pc, #156]	@ (80088f4 <tcp_close_shutdown+0x1bc>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	4a26      	ldr	r2, [pc, #152]	@ (80088f4 <tcp_close_shutdown+0x1bc>)
 800885c:	6013      	str	r3, [r2, #0]
 800885e:	e013      	b.n	8008888 <tcp_close_shutdown+0x150>
 8008860:	4b24      	ldr	r3, [pc, #144]	@ (80088f4 <tcp_close_shutdown+0x1bc>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	60bb      	str	r3, [r7, #8]
 8008866:	e00c      	b.n	8008882 <tcp_close_shutdown+0x14a>
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	429a      	cmp	r2, r3
 8008870:	d104      	bne.n	800887c <tcp_close_shutdown+0x144>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	68da      	ldr	r2, [r3, #12]
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	60da      	str	r2, [r3, #12]
 800887a:	e005      	b.n	8008888 <tcp_close_shutdown+0x150>
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	60bb      	str	r3, [r7, #8]
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1ef      	bne.n	8008868 <tcp_close_shutdown+0x130>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f7ff fea0 	bl	80085d4 <tcp_free>
      break;
 8008894:	e01a      	b.n	80088cc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f7ff ff14 	bl	80086c4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800889c:	6879      	ldr	r1, [r7, #4]
 800889e:	4816      	ldr	r0, [pc, #88]	@ (80088f8 <tcp_close_shutdown+0x1c0>)
 80088a0:	f001 fb50 	bl	8009f44 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f7ff feb1 	bl	800860c <tcp_free_listen>
      break;
 80088aa:	e00f      	b.n	80088cc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80088ac:	6879      	ldr	r1, [r7, #4]
 80088ae:	480e      	ldr	r0, [pc, #56]	@ (80088e8 <tcp_close_shutdown+0x1b0>)
 80088b0:	f001 fb48 	bl	8009f44 <tcp_pcb_remove>
 80088b4:	4b0d      	ldr	r3, [pc, #52]	@ (80088ec <tcp_close_shutdown+0x1b4>)
 80088b6:	2201      	movs	r2, #1
 80088b8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f7ff fe8a 	bl	80085d4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80088c0:	e004      	b.n	80088cc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 f81a 	bl	80088fc <tcp_close_shutdown_fin>
 80088c8:	4603      	mov	r3, r0
 80088ca:	e000      	b.n	80088ce <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bdb0      	pop	{r4, r5, r7, pc}
 80088d6:	bf00      	nop
 80088d8:	08012fa0 	.word	0x08012fa0
 80088dc:	08013074 	.word	0x08013074
 80088e0:	08012fe4 	.word	0x08012fe4
 80088e4:	08013094 	.word	0x08013094
 80088e8:	200085b4 	.word	0x200085b4
 80088ec:	200085bc 	.word	0x200085bc
 80088f0:	200085f4 	.word	0x200085f4
 80088f4:	200085ac 	.word	0x200085ac
 80088f8:	200085b0 	.word	0x200085b0

080088fc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d106      	bne.n	8008918 <tcp_close_shutdown_fin+0x1c>
 800890a:	4b2e      	ldr	r3, [pc, #184]	@ (80089c4 <tcp_close_shutdown_fin+0xc8>)
 800890c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8008910:	492d      	ldr	r1, [pc, #180]	@ (80089c8 <tcp_close_shutdown_fin+0xcc>)
 8008912:	482e      	ldr	r0, [pc, #184]	@ (80089cc <tcp_close_shutdown_fin+0xd0>)
 8008914:	f008 fd6c 	bl	80113f0 <iprintf>

  switch (pcb->state) {
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	7d1b      	ldrb	r3, [r3, #20]
 800891c:	2b07      	cmp	r3, #7
 800891e:	d020      	beq.n	8008962 <tcp_close_shutdown_fin+0x66>
 8008920:	2b07      	cmp	r3, #7
 8008922:	dc2b      	bgt.n	800897c <tcp_close_shutdown_fin+0x80>
 8008924:	2b03      	cmp	r3, #3
 8008926:	d002      	beq.n	800892e <tcp_close_shutdown_fin+0x32>
 8008928:	2b04      	cmp	r3, #4
 800892a:	d00d      	beq.n	8008948 <tcp_close_shutdown_fin+0x4c>
 800892c:	e026      	b.n	800897c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f004 fde0 	bl	800d4f4 <tcp_send_fin>
 8008934:	4603      	mov	r3, r0
 8008936:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008938:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d11f      	bne.n	8008980 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2205      	movs	r2, #5
 8008944:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008946:	e01b      	b.n	8008980 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f004 fdd3 	bl	800d4f4 <tcp_send_fin>
 800894e:	4603      	mov	r3, r0
 8008950:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d114      	bne.n	8008984 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2205      	movs	r2, #5
 800895e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008960:	e010      	b.n	8008984 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f004 fdc6 	bl	800d4f4 <tcp_send_fin>
 8008968:	4603      	mov	r3, r0
 800896a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800896c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d109      	bne.n	8008988 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2209      	movs	r2, #9
 8008978:	751a      	strb	r2, [r3, #20]
      }
      break;
 800897a:	e005      	b.n	8008988 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800897c:	2300      	movs	r3, #0
 800897e:	e01c      	b.n	80089ba <tcp_close_shutdown_fin+0xbe>
      break;
 8008980:	bf00      	nop
 8008982:	e002      	b.n	800898a <tcp_close_shutdown_fin+0x8e>
      break;
 8008984:	bf00      	nop
 8008986:	e000      	b.n	800898a <tcp_close_shutdown_fin+0x8e>
      break;
 8008988:	bf00      	nop
  }

  if (err == ERR_OK) {
 800898a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d103      	bne.n	800899a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f004 feec 	bl	800d770 <tcp_output>
 8008998:	e00d      	b.n	80089b6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800899a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800899e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a2:	d108      	bne.n	80089b6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	8b5b      	ldrh	r3, [r3, #26]
 80089a8:	f043 0308 	orr.w	r3, r3, #8
 80089ac:	b29a      	uxth	r2, r3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80089b2:	2300      	movs	r3, #0
 80089b4:	e001      	b.n	80089ba <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80089b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	08012fa0 	.word	0x08012fa0
 80089c8:	08013050 	.word	0x08013050
 80089cc:	08012fe4 	.word	0x08012fe4

080089d0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d109      	bne.n	80089f2 <tcp_close+0x22>
 80089de:	4b0f      	ldr	r3, [pc, #60]	@ (8008a1c <tcp_close+0x4c>)
 80089e0:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80089e4:	490e      	ldr	r1, [pc, #56]	@ (8008a20 <tcp_close+0x50>)
 80089e6:	480f      	ldr	r0, [pc, #60]	@ (8008a24 <tcp_close+0x54>)
 80089e8:	f008 fd02 	bl	80113f0 <iprintf>
 80089ec:	f06f 030f 	mvn.w	r3, #15
 80089f0:	e00f      	b.n	8008a12 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	7d1b      	ldrb	r3, [r3, #20]
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d006      	beq.n	8008a08 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	8b5b      	ldrh	r3, [r3, #26]
 80089fe:	f043 0310 	orr.w	r3, r3, #16
 8008a02:	b29a      	uxth	r2, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8008a08:	2101      	movs	r1, #1
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f7ff fe94 	bl	8008738 <tcp_close_shutdown>
 8008a10:	4603      	mov	r3, r0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3708      	adds	r7, #8
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	08012fa0 	.word	0x08012fa0
 8008a20:	080130b0 	.word	0x080130b0
 8008a24:	08012fe4 	.word	0x08012fe4

08008a28 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b08e      	sub	sp, #56	@ 0x38
 8008a2c:	af04      	add	r7, sp, #16
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d107      	bne.n	8008a48 <tcp_abandon+0x20>
 8008a38:	4b52      	ldr	r3, [pc, #328]	@ (8008b84 <tcp_abandon+0x15c>)
 8008a3a:	f240 223d 	movw	r2, #573	@ 0x23d
 8008a3e:	4952      	ldr	r1, [pc, #328]	@ (8008b88 <tcp_abandon+0x160>)
 8008a40:	4852      	ldr	r0, [pc, #328]	@ (8008b8c <tcp_abandon+0x164>)
 8008a42:	f008 fcd5 	bl	80113f0 <iprintf>
 8008a46:	e099      	b.n	8008b7c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	7d1b      	ldrb	r3, [r3, #20]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d106      	bne.n	8008a5e <tcp_abandon+0x36>
 8008a50:	4b4c      	ldr	r3, [pc, #304]	@ (8008b84 <tcp_abandon+0x15c>)
 8008a52:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8008a56:	494e      	ldr	r1, [pc, #312]	@ (8008b90 <tcp_abandon+0x168>)
 8008a58:	484c      	ldr	r0, [pc, #304]	@ (8008b8c <tcp_abandon+0x164>)
 8008a5a:	f008 fcc9 	bl	80113f0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	7d1b      	ldrb	r3, [r3, #20]
 8008a62:	2b0a      	cmp	r3, #10
 8008a64:	d107      	bne.n	8008a76 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008a66:	6879      	ldr	r1, [r7, #4]
 8008a68:	484a      	ldr	r0, [pc, #296]	@ (8008b94 <tcp_abandon+0x16c>)
 8008a6a:	f001 fa6b 	bl	8009f44 <tcp_pcb_remove>
    tcp_free(pcb);
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f7ff fdb0 	bl	80085d4 <tcp_free>
 8008a74:	e082      	b.n	8008b7c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8008a76:	2300      	movs	r3, #0
 8008a78:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a82:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a88:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a90:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	691b      	ldr	r3, [r3, #16]
 8008a96:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	7d1b      	ldrb	r3, [r3, #20]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d126      	bne.n	8008aee <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	8adb      	ldrh	r3, [r3, #22]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d02e      	beq.n	8008b06 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008aa8:	4b3b      	ldr	r3, [pc, #236]	@ (8008b98 <tcp_abandon+0x170>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d105      	bne.n	8008abe <tcp_abandon+0x96>
 8008ab2:	4b39      	ldr	r3, [pc, #228]	@ (8008b98 <tcp_abandon+0x170>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	4a37      	ldr	r2, [pc, #220]	@ (8008b98 <tcp_abandon+0x170>)
 8008aba:	6013      	str	r3, [r2, #0]
 8008abc:	e013      	b.n	8008ae6 <tcp_abandon+0xbe>
 8008abe:	4b36      	ldr	r3, [pc, #216]	@ (8008b98 <tcp_abandon+0x170>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	61fb      	str	r3, [r7, #28]
 8008ac4:	e00c      	b.n	8008ae0 <tcp_abandon+0xb8>
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d104      	bne.n	8008ada <tcp_abandon+0xb2>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	68da      	ldr	r2, [r3, #12]
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	60da      	str	r2, [r3, #12]
 8008ad8:	e005      	b.n	8008ae6 <tcp_abandon+0xbe>
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	61fb      	str	r3, [r7, #28]
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1ef      	bne.n	8008ac6 <tcp_abandon+0x9e>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	60da      	str	r2, [r3, #12]
 8008aec:	e00b      	b.n	8008b06 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	8adb      	ldrh	r3, [r3, #22]
 8008af6:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008af8:	6879      	ldr	r1, [r7, #4]
 8008afa:	4828      	ldr	r0, [pc, #160]	@ (8008b9c <tcp_abandon+0x174>)
 8008afc:	f001 fa22 	bl	8009f44 <tcp_pcb_remove>
 8008b00:	4b27      	ldr	r3, [pc, #156]	@ (8008ba0 <tcp_abandon+0x178>)
 8008b02:	2201      	movs	r2, #1
 8008b04:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d004      	beq.n	8008b18 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b12:	4618      	mov	r0, r3
 8008b14:	f000 fed8 	bl	80098c8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d004      	beq.n	8008b2a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b24:	4618      	mov	r0, r3
 8008b26:	f000 fecf 	bl	80098c8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d004      	beq.n	8008b3c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b36:	4618      	mov	r0, r3
 8008b38:	f000 fec6 	bl	80098c8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d00e      	beq.n	8008b60 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008b42:	6879      	ldr	r1, [r7, #4]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	3304      	adds	r3, #4
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	8b12      	ldrh	r2, [r2, #24]
 8008b4c:	9202      	str	r2, [sp, #8]
 8008b4e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008b50:	9201      	str	r2, [sp, #4]
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	460b      	mov	r3, r1
 8008b56:	697a      	ldr	r2, [r7, #20]
 8008b58:	69b9      	ldr	r1, [r7, #24]
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f005 fbbc 	bl	800e2d8 <tcp_rst>
    }
    last_state = pcb->state;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	7d1b      	ldrb	r3, [r3, #20]
 8008b64:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f7ff fd34 	bl	80085d4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d004      	beq.n	8008b7c <tcp_abandon+0x154>
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	f06f 010c 	mvn.w	r1, #12
 8008b78:	68f8      	ldr	r0, [r7, #12]
 8008b7a:	4798      	blx	r3
  }
}
 8008b7c:	3728      	adds	r7, #40	@ 0x28
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	08012fa0 	.word	0x08012fa0
 8008b88:	080130e4 	.word	0x080130e4
 8008b8c:	08012fe4 	.word	0x08012fe4
 8008b90:	08013100 	.word	0x08013100
 8008b94:	200085b8 	.word	0x200085b8
 8008b98:	200085ac 	.word	0x200085ac
 8008b9c:	200085b4 	.word	0x200085b4
 8008ba0:	200085bc 	.word	0x200085bc

08008ba4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8008bac:	2101      	movs	r1, #1
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f7ff ff3a 	bl	8008a28 <tcp_abandon>
}
 8008bb4:	bf00      	nop
 8008bb6:	3708      	adds	r7, #8
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b088      	sub	sp, #32
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8008bca:	2304      	movs	r3, #4
 8008bcc:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d101      	bne.n	8008bd8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8008bd4:	4b3e      	ldr	r3, [pc, #248]	@ (8008cd0 <tcp_bind+0x114>)
 8008bd6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d109      	bne.n	8008bf2 <tcp_bind+0x36>
 8008bde:	4b3d      	ldr	r3, [pc, #244]	@ (8008cd4 <tcp_bind+0x118>)
 8008be0:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8008be4:	493c      	ldr	r1, [pc, #240]	@ (8008cd8 <tcp_bind+0x11c>)
 8008be6:	483d      	ldr	r0, [pc, #244]	@ (8008cdc <tcp_bind+0x120>)
 8008be8:	f008 fc02 	bl	80113f0 <iprintf>
 8008bec:	f06f 030f 	mvn.w	r3, #15
 8008bf0:	e06a      	b.n	8008cc8 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	7d1b      	ldrb	r3, [r3, #20]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d009      	beq.n	8008c0e <tcp_bind+0x52>
 8008bfa:	4b36      	ldr	r3, [pc, #216]	@ (8008cd4 <tcp_bind+0x118>)
 8008bfc:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8008c00:	4937      	ldr	r1, [pc, #220]	@ (8008ce0 <tcp_bind+0x124>)
 8008c02:	4836      	ldr	r0, [pc, #216]	@ (8008cdc <tcp_bind+0x120>)
 8008c04:	f008 fbf4 	bl	80113f0 <iprintf>
 8008c08:	f06f 0305 	mvn.w	r3, #5
 8008c0c:	e05c      	b.n	8008cc8 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8008c0e:	88fb      	ldrh	r3, [r7, #6]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d109      	bne.n	8008c28 <tcp_bind+0x6c>
    port = tcp_new_port();
 8008c14:	f000 f9f0 	bl	8008ff8 <tcp_new_port>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8008c1c:	88fb      	ldrh	r3, [r7, #6]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d135      	bne.n	8008c8e <tcp_bind+0xd2>
      return ERR_BUF;
 8008c22:	f06f 0301 	mvn.w	r3, #1
 8008c26:	e04f      	b.n	8008cc8 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8008c28:	2300      	movs	r3, #0
 8008c2a:	61fb      	str	r3, [r7, #28]
 8008c2c:	e02b      	b.n	8008c86 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008c2e:	4a2d      	ldr	r2, [pc, #180]	@ (8008ce4 <tcp_bind+0x128>)
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	61bb      	str	r3, [r7, #24]
 8008c3a:	e01e      	b.n	8008c7a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	8adb      	ldrh	r3, [r3, #22]
 8008c40:	88fa      	ldrh	r2, [r7, #6]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d116      	bne.n	8008c74 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8008c46:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d010      	beq.n	8008c6e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8008c4c:	69bb      	ldr	r3, [r7, #24]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00c      	beq.n	8008c6e <tcp_bind+0xb2>
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d009      	beq.n	8008c6e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d005      	beq.n	8008c6e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8008c62:	69bb      	ldr	r3, [r7, #24]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d102      	bne.n	8008c74 <tcp_bind+0xb8>
              return ERR_USE;
 8008c6e:	f06f 0307 	mvn.w	r3, #7
 8008c72:	e029      	b.n	8008cc8 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008c74:	69bb      	ldr	r3, [r7, #24]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	61bb      	str	r3, [r7, #24]
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d1dd      	bne.n	8008c3c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	3301      	adds	r3, #1
 8008c84:	61fb      	str	r3, [r7, #28]
 8008c86:	69fa      	ldr	r2, [r7, #28]
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	dbcf      	blt.n	8008c2e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00c      	beq.n	8008cae <tcp_bind+0xf2>
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d008      	beq.n	8008cae <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d002      	beq.n	8008ca8 <tcp_bind+0xec>
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	e000      	b.n	8008caa <tcp_bind+0xee>
 8008ca8:	2300      	movs	r3, #0
 8008caa:	68fa      	ldr	r2, [r7, #12]
 8008cac:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	88fa      	ldrh	r2, [r7, #6]
 8008cb2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8008cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8008ce8 <tcp_bind+0x12c>)
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	60da      	str	r2, [r3, #12]
 8008cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8008ce8 <tcp_bind+0x12c>)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	6013      	str	r3, [r2, #0]
 8008cc2:	f005 fccb 	bl	800e65c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8008cc6:	2300      	movs	r3, #0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3720      	adds	r7, #32
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	08015414 	.word	0x08015414
 8008cd4:	08012fa0 	.word	0x08012fa0
 8008cd8:	08013134 	.word	0x08013134
 8008cdc:	08012fe4 	.word	0x08012fe4
 8008ce0:	0801314c 	.word	0x0801314c
 8008ce4:	080153ec 	.word	0x080153ec
 8008ce8:	200085ac 	.word	0x200085ac

08008cec <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d106      	bne.n	8008d0e <tcp_accept_null+0x22>
 8008d00:	4b07      	ldr	r3, [pc, #28]	@ (8008d20 <tcp_accept_null+0x34>)
 8008d02:	f240 320f 	movw	r2, #783	@ 0x30f
 8008d06:	4907      	ldr	r1, [pc, #28]	@ (8008d24 <tcp_accept_null+0x38>)
 8008d08:	4807      	ldr	r0, [pc, #28]	@ (8008d28 <tcp_accept_null+0x3c>)
 8008d0a:	f008 fb71 	bl	80113f0 <iprintf>

  tcp_abort(pcb);
 8008d0e:	68b8      	ldr	r0, [r7, #8]
 8008d10:	f7ff ff48 	bl	8008ba4 <tcp_abort>

  return ERR_ABRT;
 8008d14:	f06f 030c 	mvn.w	r3, #12
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	08012fa0 	.word	0x08012fa0
 8008d24:	08013174 	.word	0x08013174
 8008d28:	08012fe4 	.word	0x08012fe4

08008d2c <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	460b      	mov	r3, r1
 8008d36:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8008d38:	78fb      	ldrb	r3, [r7, #3]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 f806 	bl	8008d50 <tcp_listen_with_backlog_and_err>
 8008d44:	4603      	mov	r3, r0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3708      	adds	r7, #8
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
	...

08008d50 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b088      	sub	sp, #32
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	460b      	mov	r3, r1
 8008d5a:	607a      	str	r2, [r7, #4]
 8008d5c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d109      	bne.n	8008d7c <tcp_listen_with_backlog_and_err+0x2c>
 8008d68:	4b47      	ldr	r3, [pc, #284]	@ (8008e88 <tcp_listen_with_backlog_and_err+0x138>)
 8008d6a:	f240 3259 	movw	r2, #857	@ 0x359
 8008d6e:	4947      	ldr	r1, [pc, #284]	@ (8008e8c <tcp_listen_with_backlog_and_err+0x13c>)
 8008d70:	4847      	ldr	r0, [pc, #284]	@ (8008e90 <tcp_listen_with_backlog_and_err+0x140>)
 8008d72:	f008 fb3d 	bl	80113f0 <iprintf>
 8008d76:	23f0      	movs	r3, #240	@ 0xf0
 8008d78:	76fb      	strb	r3, [r7, #27]
 8008d7a:	e079      	b.n	8008e70 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	7d1b      	ldrb	r3, [r3, #20]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d009      	beq.n	8008d98 <tcp_listen_with_backlog_and_err+0x48>
 8008d84:	4b40      	ldr	r3, [pc, #256]	@ (8008e88 <tcp_listen_with_backlog_and_err+0x138>)
 8008d86:	f240 325a 	movw	r2, #858	@ 0x35a
 8008d8a:	4942      	ldr	r1, [pc, #264]	@ (8008e94 <tcp_listen_with_backlog_and_err+0x144>)
 8008d8c:	4840      	ldr	r0, [pc, #256]	@ (8008e90 <tcp_listen_with_backlog_and_err+0x140>)
 8008d8e:	f008 fb2f 	bl	80113f0 <iprintf>
 8008d92:	23f1      	movs	r3, #241	@ 0xf1
 8008d94:	76fb      	strb	r3, [r7, #27]
 8008d96:	e06b      	b.n	8008e70 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	7d1b      	ldrb	r3, [r3, #20]
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d104      	bne.n	8008daa <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8008da4:	23f7      	movs	r3, #247	@ 0xf7
 8008da6:	76fb      	strb	r3, [r7, #27]
    goto done;
 8008da8:	e062      	b.n	8008e70 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8008daa:	2002      	movs	r0, #2
 8008dac:	f7fe fa8c 	bl	80072c8 <memp_malloc>
 8008db0:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d102      	bne.n	8008dbe <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8008db8:	23ff      	movs	r3, #255	@ 0xff
 8008dba:	76fb      	strb	r3, [r7, #27]
    goto done;
 8008dbc:	e058      	b.n	8008e70 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	691a      	ldr	r2, [r3, #16]
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	8ada      	ldrh	r2, [r3, #22]
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8008dce:	69fb      	ldr	r3, [r7, #28]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	7d5a      	ldrb	r2, [r3, #21]
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	7a5a      	ldrb	r2, [r3, #9]
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	2200      	movs	r2, #0
 8008de8:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	7ada      	ldrb	r2, [r3, #11]
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	7a9a      	ldrb	r2, [r3, #10]
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	69fb      	ldr	r3, [r7, #28]
 8008e00:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	8adb      	ldrh	r3, [r3, #22]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d021      	beq.n	8008e4e <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008e0a:	4b23      	ldr	r3, [pc, #140]	@ (8008e98 <tcp_listen_with_backlog_and_err+0x148>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	68fa      	ldr	r2, [r7, #12]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d105      	bne.n	8008e20 <tcp_listen_with_backlog_and_err+0xd0>
 8008e14:	4b20      	ldr	r3, [pc, #128]	@ (8008e98 <tcp_listen_with_backlog_and_err+0x148>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	4a1f      	ldr	r2, [pc, #124]	@ (8008e98 <tcp_listen_with_backlog_and_err+0x148>)
 8008e1c:	6013      	str	r3, [r2, #0]
 8008e1e:	e013      	b.n	8008e48 <tcp_listen_with_backlog_and_err+0xf8>
 8008e20:	4b1d      	ldr	r3, [pc, #116]	@ (8008e98 <tcp_listen_with_backlog_and_err+0x148>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	617b      	str	r3, [r7, #20]
 8008e26:	e00c      	b.n	8008e42 <tcp_listen_with_backlog_and_err+0xf2>
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	68fa      	ldr	r2, [r7, #12]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d104      	bne.n	8008e3c <tcp_listen_with_backlog_and_err+0xec>
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	68da      	ldr	r2, [r3, #12]
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	60da      	str	r2, [r3, #12]
 8008e3a:	e005      	b.n	8008e48 <tcp_listen_with_backlog_and_err+0xf8>
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	617b      	str	r3, [r7, #20]
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d1ef      	bne.n	8008e28 <tcp_listen_with_backlog_and_err+0xd8>
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	f7ff fbc0 	bl	80085d4 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	4a11      	ldr	r2, [pc, #68]	@ (8008e9c <tcp_listen_with_backlog_and_err+0x14c>)
 8008e58:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8008e5a:	4b11      	ldr	r3, [pc, #68]	@ (8008ea0 <tcp_listen_with_backlog_and_err+0x150>)
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	60da      	str	r2, [r3, #12]
 8008e62:	4a0f      	ldr	r2, [pc, #60]	@ (8008ea0 <tcp_listen_with_backlog_and_err+0x150>)
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	6013      	str	r3, [r2, #0]
 8008e68:	f005 fbf8 	bl	800e65c <tcp_timer_needed>
  res = ERR_OK;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d002      	beq.n	8008e7c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	7efa      	ldrb	r2, [r7, #27]
 8008e7a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8008e7c:	69fb      	ldr	r3, [r7, #28]
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3720      	adds	r7, #32
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	08012fa0 	.word	0x08012fa0
 8008e8c:	08013194 	.word	0x08013194
 8008e90:	08012fe4 	.word	0x08012fe4
 8008e94:	080131c4 	.word	0x080131c4
 8008e98:	200085ac 	.word	0x200085ac
 8008e9c:	08008ced 	.word	0x08008ced
 8008ea0:	200085b0 	.word	0x200085b0

08008ea4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d106      	bne.n	8008ec0 <tcp_update_rcv_ann_wnd+0x1c>
 8008eb2:	4b25      	ldr	r3, [pc, #148]	@ (8008f48 <tcp_update_rcv_ann_wnd+0xa4>)
 8008eb4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8008eb8:	4924      	ldr	r1, [pc, #144]	@ (8008f4c <tcp_update_rcv_ann_wnd+0xa8>)
 8008eba:	4825      	ldr	r0, [pc, #148]	@ (8008f50 <tcp_update_rcv_ann_wnd+0xac>)
 8008ebc:	f008 fa98 	bl	80113f0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8008ec8:	4413      	add	r3, r2
 8008eca:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8008ed4:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8008ed8:	bf28      	it	cs
 8008eda:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8008ede:	b292      	uxth	r2, r2
 8008ee0:	4413      	add	r3, r2
 8008ee2:	68fa      	ldr	r2, [r7, #12]
 8008ee4:	1ad3      	subs	r3, r2, r3
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	db08      	blt.n	8008efc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ef6:	68fa      	ldr	r2, [r7, #12]
 8008ef8:	1ad3      	subs	r3, r2, r3
 8008efa:	e020      	b.n	8008f3e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f04:	1ad3      	subs	r3, r2, r3
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	dd03      	ble.n	8008f12 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008f10:	e014      	b.n	8008f3c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f1a:	1ad3      	subs	r3, r2, r3
 8008f1c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f24:	d306      	bcc.n	8008f34 <tcp_update_rcv_ann_wnd+0x90>
 8008f26:	4b08      	ldr	r3, [pc, #32]	@ (8008f48 <tcp_update_rcv_ann_wnd+0xa4>)
 8008f28:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8008f2c:	4909      	ldr	r1, [pc, #36]	@ (8008f54 <tcp_update_rcv_ann_wnd+0xb0>)
 8008f2e:	4808      	ldr	r0, [pc, #32]	@ (8008f50 <tcp_update_rcv_ann_wnd+0xac>)
 8008f30:	f008 fa5e 	bl	80113f0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8008f3c:	2300      	movs	r3, #0
  }
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	08012fa0 	.word	0x08012fa0
 8008f4c:	080131fc 	.word	0x080131fc
 8008f50:	08012fe4 	.word	0x08012fe4
 8008f54:	08013220 	.word	0x08013220

08008f58 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	460b      	mov	r3, r1
 8008f62:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d107      	bne.n	8008f7a <tcp_recved+0x22>
 8008f6a:	4b1f      	ldr	r3, [pc, #124]	@ (8008fe8 <tcp_recved+0x90>)
 8008f6c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8008f70:	491e      	ldr	r1, [pc, #120]	@ (8008fec <tcp_recved+0x94>)
 8008f72:	481f      	ldr	r0, [pc, #124]	@ (8008ff0 <tcp_recved+0x98>)
 8008f74:	f008 fa3c 	bl	80113f0 <iprintf>
 8008f78:	e032      	b.n	8008fe0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	7d1b      	ldrb	r3, [r3, #20]
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d106      	bne.n	8008f90 <tcp_recved+0x38>
 8008f82:	4b19      	ldr	r3, [pc, #100]	@ (8008fe8 <tcp_recved+0x90>)
 8008f84:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8008f88:	491a      	ldr	r1, [pc, #104]	@ (8008ff4 <tcp_recved+0x9c>)
 8008f8a:	4819      	ldr	r0, [pc, #100]	@ (8008ff0 <tcp_recved+0x98>)
 8008f8c:	f008 fa30 	bl	80113f0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008f94:	887b      	ldrh	r3, [r7, #2]
 8008f96:	4413      	add	r3, r2
 8008f98:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8008f9a:	89fb      	ldrh	r3, [r7, #14]
 8008f9c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8008fa0:	d804      	bhi.n	8008fac <tcp_recved+0x54>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fa6:	89fa      	ldrh	r2, [r7, #14]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d204      	bcs.n	8008fb6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8008fb2:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008fb4:	e002      	b.n	8008fbc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	89fa      	ldrh	r2, [r7, #14]
 8008fba:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f7ff ff71 	bl	8008ea4 <tcp_update_rcv_ann_wnd>
 8008fc2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8008fca:	d309      	bcc.n	8008fe0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	8b5b      	ldrh	r3, [r3, #26]
 8008fd0:	f043 0302 	orr.w	r3, r3, #2
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f004 fbc8 	bl	800d770 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	08012fa0 	.word	0x08012fa0
 8008fec:	0801323c 	.word	0x0801323c
 8008ff0:	08012fe4 	.word	0x08012fe4
 8008ff4:	08013254 	.word	0x08013254

08008ff8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8008ffe:	2300      	movs	r3, #0
 8009000:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8009002:	4b1e      	ldr	r3, [pc, #120]	@ (800907c <tcp_new_port+0x84>)
 8009004:	881b      	ldrh	r3, [r3, #0]
 8009006:	3301      	adds	r3, #1
 8009008:	b29a      	uxth	r2, r3
 800900a:	4b1c      	ldr	r3, [pc, #112]	@ (800907c <tcp_new_port+0x84>)
 800900c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800900e:	4b1b      	ldr	r3, [pc, #108]	@ (800907c <tcp_new_port+0x84>)
 8009010:	881b      	ldrh	r3, [r3, #0]
 8009012:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009016:	4293      	cmp	r3, r2
 8009018:	d103      	bne.n	8009022 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800901a:	4b18      	ldr	r3, [pc, #96]	@ (800907c <tcp_new_port+0x84>)
 800901c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8009020:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8009022:	2300      	movs	r3, #0
 8009024:	71fb      	strb	r3, [r7, #7]
 8009026:	e01e      	b.n	8009066 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009028:	79fb      	ldrb	r3, [r7, #7]
 800902a:	4a15      	ldr	r2, [pc, #84]	@ (8009080 <tcp_new_port+0x88>)
 800902c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	603b      	str	r3, [r7, #0]
 8009034:	e011      	b.n	800905a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	8ada      	ldrh	r2, [r3, #22]
 800903a:	4b10      	ldr	r3, [pc, #64]	@ (800907c <tcp_new_port+0x84>)
 800903c:	881b      	ldrh	r3, [r3, #0]
 800903e:	429a      	cmp	r2, r3
 8009040:	d108      	bne.n	8009054 <tcp_new_port+0x5c>
        n++;
 8009042:	88bb      	ldrh	r3, [r7, #4]
 8009044:	3301      	adds	r3, #1
 8009046:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8009048:	88bb      	ldrh	r3, [r7, #4]
 800904a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800904e:	d3d8      	bcc.n	8009002 <tcp_new_port+0xa>
          return 0;
 8009050:	2300      	movs	r3, #0
 8009052:	e00d      	b.n	8009070 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	603b      	str	r3, [r7, #0]
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d1ea      	bne.n	8009036 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8009060:	79fb      	ldrb	r3, [r7, #7]
 8009062:	3301      	adds	r3, #1
 8009064:	71fb      	strb	r3, [r7, #7]
 8009066:	79fb      	ldrb	r3, [r7, #7]
 8009068:	2b03      	cmp	r3, #3
 800906a:	d9dd      	bls.n	8009028 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800906c:	4b03      	ldr	r3, [pc, #12]	@ (800907c <tcp_new_port+0x84>)
 800906e:	881b      	ldrh	r3, [r3, #0]
}
 8009070:	4618      	mov	r0, r3
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr
 800907c:	20000020 	.word	0x20000020
 8009080:	080153ec 	.word	0x080153ec

08009084 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009084:	b5b0      	push	{r4, r5, r7, lr}
 8009086:	b090      	sub	sp, #64	@ 0x40
 8009088:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800908a:	2300      	movs	r3, #0
 800908c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8009090:	4b95      	ldr	r3, [pc, #596]	@ (80092e8 <tcp_slowtmr+0x264>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	3301      	adds	r3, #1
 8009096:	4a94      	ldr	r2, [pc, #592]	@ (80092e8 <tcp_slowtmr+0x264>)
 8009098:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800909a:	4b94      	ldr	r3, [pc, #592]	@ (80092ec <tcp_slowtmr+0x268>)
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	3301      	adds	r3, #1
 80090a0:	b2da      	uxtb	r2, r3
 80090a2:	4b92      	ldr	r3, [pc, #584]	@ (80092ec <tcp_slowtmr+0x268>)
 80090a4:	701a      	strb	r2, [r3, #0]
 80090a6:	e000      	b.n	80090aa <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80090a8:	bf00      	nop
  prev = NULL;
 80090aa:	2300      	movs	r3, #0
 80090ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80090ae:	4b90      	ldr	r3, [pc, #576]	@ (80092f0 <tcp_slowtmr+0x26c>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80090b4:	e29d      	b.n	80095f2 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80090b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090b8:	7d1b      	ldrb	r3, [r3, #20]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d106      	bne.n	80090cc <tcp_slowtmr+0x48>
 80090be:	4b8d      	ldr	r3, [pc, #564]	@ (80092f4 <tcp_slowtmr+0x270>)
 80090c0:	f240 42be 	movw	r2, #1214	@ 0x4be
 80090c4:	498c      	ldr	r1, [pc, #560]	@ (80092f8 <tcp_slowtmr+0x274>)
 80090c6:	488d      	ldr	r0, [pc, #564]	@ (80092fc <tcp_slowtmr+0x278>)
 80090c8:	f008 f992 	bl	80113f0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80090cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ce:	7d1b      	ldrb	r3, [r3, #20]
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d106      	bne.n	80090e2 <tcp_slowtmr+0x5e>
 80090d4:	4b87      	ldr	r3, [pc, #540]	@ (80092f4 <tcp_slowtmr+0x270>)
 80090d6:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80090da:	4989      	ldr	r1, [pc, #548]	@ (8009300 <tcp_slowtmr+0x27c>)
 80090dc:	4887      	ldr	r0, [pc, #540]	@ (80092fc <tcp_slowtmr+0x278>)
 80090de:	f008 f987 	bl	80113f0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80090e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090e4:	7d1b      	ldrb	r3, [r3, #20]
 80090e6:	2b0a      	cmp	r3, #10
 80090e8:	d106      	bne.n	80090f8 <tcp_slowtmr+0x74>
 80090ea:	4b82      	ldr	r3, [pc, #520]	@ (80092f4 <tcp_slowtmr+0x270>)
 80090ec:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80090f0:	4984      	ldr	r1, [pc, #528]	@ (8009304 <tcp_slowtmr+0x280>)
 80090f2:	4882      	ldr	r0, [pc, #520]	@ (80092fc <tcp_slowtmr+0x278>)
 80090f4:	f008 f97c 	bl	80113f0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80090f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090fa:	7f9a      	ldrb	r2, [r3, #30]
 80090fc:	4b7b      	ldr	r3, [pc, #492]	@ (80092ec <tcp_slowtmr+0x268>)
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	429a      	cmp	r2, r3
 8009102:	d105      	bne.n	8009110 <tcp_slowtmr+0x8c>
      prev = pcb;
 8009104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009106:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8009108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800910e:	e270      	b.n	80095f2 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8009110:	4b76      	ldr	r3, [pc, #472]	@ (80092ec <tcp_slowtmr+0x268>)
 8009112:	781a      	ldrb	r2, [r3, #0]
 8009114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009116:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8009118:	2300      	movs	r3, #0
 800911a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800911e:	2300      	movs	r3, #0
 8009120:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009126:	7d1b      	ldrb	r3, [r3, #20]
 8009128:	2b02      	cmp	r3, #2
 800912a:	d10a      	bne.n	8009142 <tcp_slowtmr+0xbe>
 800912c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800912e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009132:	2b05      	cmp	r3, #5
 8009134:	d905      	bls.n	8009142 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8009136:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800913a:	3301      	adds	r3, #1
 800913c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009140:	e11e      	b.n	8009380 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8009142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009144:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009148:	2b0b      	cmp	r3, #11
 800914a:	d905      	bls.n	8009158 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800914c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009150:	3301      	adds	r3, #1
 8009152:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009156:	e113      	b.n	8009380 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8009158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800915a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800915e:	2b00      	cmp	r3, #0
 8009160:	d075      	beq.n	800924e <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8009162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009166:	2b00      	cmp	r3, #0
 8009168:	d006      	beq.n	8009178 <tcp_slowtmr+0xf4>
 800916a:	4b62      	ldr	r3, [pc, #392]	@ (80092f4 <tcp_slowtmr+0x270>)
 800916c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8009170:	4965      	ldr	r1, [pc, #404]	@ (8009308 <tcp_slowtmr+0x284>)
 8009172:	4862      	ldr	r0, [pc, #392]	@ (80092fc <tcp_slowtmr+0x278>)
 8009174:	f008 f93c 	bl	80113f0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800917a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800917c:	2b00      	cmp	r3, #0
 800917e:	d106      	bne.n	800918e <tcp_slowtmr+0x10a>
 8009180:	4b5c      	ldr	r3, [pc, #368]	@ (80092f4 <tcp_slowtmr+0x270>)
 8009182:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8009186:	4961      	ldr	r1, [pc, #388]	@ (800930c <tcp_slowtmr+0x288>)
 8009188:	485c      	ldr	r0, [pc, #368]	@ (80092fc <tcp_slowtmr+0x278>)
 800918a:	f008 f931 	bl	80113f0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800918e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009190:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8009194:	2b0b      	cmp	r3, #11
 8009196:	d905      	bls.n	80091a4 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8009198:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800919c:	3301      	adds	r3, #1
 800919e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80091a2:	e0ed      	b.n	8009380 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80091a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091a6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80091aa:	3b01      	subs	r3, #1
 80091ac:	4a58      	ldr	r2, [pc, #352]	@ (8009310 <tcp_slowtmr+0x28c>)
 80091ae:	5cd3      	ldrb	r3, [r2, r3]
 80091b0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80091b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091b4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80091b8:	7c7a      	ldrb	r2, [r7, #17]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d907      	bls.n	80091ce <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80091be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091c0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80091c4:	3301      	adds	r3, #1
 80091c6:	b2da      	uxtb	r2, r3
 80091c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ca:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80091ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091d0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80091d4:	7c7a      	ldrb	r2, [r7, #17]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	f200 80d2 	bhi.w	8009380 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80091dc:	2301      	movs	r3, #1
 80091de:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80091e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d108      	bne.n	80091fc <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80091ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80091ec:	f005 f968 	bl	800e4c0 <tcp_zero_window_probe>
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d014      	beq.n	8009220 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 80091f6:	2300      	movs	r3, #0
 80091f8:	623b      	str	r3, [r7, #32]
 80091fa:	e011      	b.n	8009220 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80091fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009202:	4619      	mov	r1, r3
 8009204:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009206:	f004 f82d 	bl	800d264 <tcp_split_unsent_seg>
 800920a:	4603      	mov	r3, r0
 800920c:	2b00      	cmp	r3, #0
 800920e:	d107      	bne.n	8009220 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8009210:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009212:	f004 faad 	bl	800d770 <tcp_output>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d101      	bne.n	8009220 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800921c:	2300      	movs	r3, #0
 800921e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8009220:	6a3b      	ldr	r3, [r7, #32]
 8009222:	2b00      	cmp	r3, #0
 8009224:	f000 80ac 	beq.w	8009380 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8009228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800922a:	2200      	movs	r2, #0
 800922c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009232:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009236:	2b06      	cmp	r3, #6
 8009238:	f200 80a2 	bhi.w	8009380 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800923c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800923e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009242:	3301      	adds	r3, #1
 8009244:	b2da      	uxtb	r2, r3
 8009246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009248:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800924c:	e098      	b.n	8009380 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800924e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009250:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009254:	2b00      	cmp	r3, #0
 8009256:	db0f      	blt.n	8009278 <tcp_slowtmr+0x1f4>
 8009258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800925a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800925e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8009262:	4293      	cmp	r3, r2
 8009264:	d008      	beq.n	8009278 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8009266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009268:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800926c:	b29b      	uxth	r3, r3
 800926e:	3301      	adds	r3, #1
 8009270:	b29b      	uxth	r3, r3
 8009272:	b21a      	sxth	r2, r3
 8009274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009276:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8009278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800927a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800927e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009280:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8009284:	429a      	cmp	r2, r3
 8009286:	db7b      	blt.n	8009380 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009288:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800928a:	f004 fd65 	bl	800dd58 <tcp_rexmit_rto_prepare>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d007      	beq.n	80092a4 <tcp_slowtmr+0x220>
 8009294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009298:	2b00      	cmp	r3, #0
 800929a:	d171      	bne.n	8009380 <tcp_slowtmr+0x2fc>
 800929c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800929e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d06d      	beq.n	8009380 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80092a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092a6:	7d1b      	ldrb	r3, [r3, #20]
 80092a8:	2b02      	cmp	r3, #2
 80092aa:	d03a      	beq.n	8009322 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80092ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80092b2:	2b0c      	cmp	r3, #12
 80092b4:	bf28      	it	cs
 80092b6:	230c      	movcs	r3, #12
 80092b8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80092ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80092c0:	10db      	asrs	r3, r3, #3
 80092c2:	b21b      	sxth	r3, r3
 80092c4:	461a      	mov	r2, r3
 80092c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092c8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80092cc:	4413      	add	r3, r2
 80092ce:	7efa      	ldrb	r2, [r7, #27]
 80092d0:	4910      	ldr	r1, [pc, #64]	@ (8009314 <tcp_slowtmr+0x290>)
 80092d2:	5c8a      	ldrb	r2, [r1, r2]
 80092d4:	4093      	lsls	r3, r2
 80092d6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80092de:	4293      	cmp	r3, r2
 80092e0:	dc1a      	bgt.n	8009318 <tcp_slowtmr+0x294>
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	b21a      	sxth	r2, r3
 80092e6:	e019      	b.n	800931c <tcp_slowtmr+0x298>
 80092e8:	200085a8 	.word	0x200085a8
 80092ec:	200085be 	.word	0x200085be
 80092f0:	200085b4 	.word	0x200085b4
 80092f4:	08012fa0 	.word	0x08012fa0
 80092f8:	080132e4 	.word	0x080132e4
 80092fc:	08012fe4 	.word	0x08012fe4
 8009300:	08013310 	.word	0x08013310
 8009304:	0801333c 	.word	0x0801333c
 8009308:	0801336c 	.word	0x0801336c
 800930c:	080133a0 	.word	0x080133a0
 8009310:	080153e4 	.word	0x080153e4
 8009314:	080153d4 	.word	0x080153d4
 8009318:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800931c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800931e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8009322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009324:	2200      	movs	r2, #0
 8009326:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800932a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800932e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009330:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009334:	4293      	cmp	r3, r2
 8009336:	bf28      	it	cs
 8009338:	4613      	movcs	r3, r2
 800933a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800933c:	8a7b      	ldrh	r3, [r7, #18]
 800933e:	085b      	lsrs	r3, r3, #1
 8009340:	b29a      	uxth	r2, r3
 8009342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009344:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800934a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800934e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009350:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009352:	005b      	lsls	r3, r3, #1
 8009354:	b29b      	uxth	r3, r3
 8009356:	429a      	cmp	r2, r3
 8009358:	d206      	bcs.n	8009368 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800935a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800935c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800935e:	005b      	lsls	r3, r3, #1
 8009360:	b29a      	uxth	r2, r3
 8009362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009364:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8009368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800936a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800936c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800936e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8009372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009374:	2200      	movs	r2, #0
 8009376:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800937a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800937c:	f004 fd5c 	bl	800de38 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8009380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009382:	7d1b      	ldrb	r3, [r3, #20]
 8009384:	2b06      	cmp	r3, #6
 8009386:	d111      	bne.n	80093ac <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8009388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800938a:	8b5b      	ldrh	r3, [r3, #26]
 800938c:	f003 0310 	and.w	r3, r3, #16
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00b      	beq.n	80093ac <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009394:	4b9c      	ldr	r3, [pc, #624]	@ (8009608 <tcp_slowtmr+0x584>)
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800939a:	6a1b      	ldr	r3, [r3, #32]
 800939c:	1ad3      	subs	r3, r2, r3
 800939e:	2b28      	cmp	r3, #40	@ 0x28
 80093a0:	d904      	bls.n	80093ac <tcp_slowtmr+0x328>
          ++pcb_remove;
 80093a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80093a6:	3301      	adds	r3, #1
 80093a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80093ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ae:	7a5b      	ldrb	r3, [r3, #9]
 80093b0:	f003 0308 	and.w	r3, r3, #8
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d04a      	beq.n	800944e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80093b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ba:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80093bc:	2b04      	cmp	r3, #4
 80093be:	d003      	beq.n	80093c8 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80093c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093c2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80093c4:	2b07      	cmp	r3, #7
 80093c6:	d142      	bne.n	800944e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80093c8:	4b8f      	ldr	r3, [pc, #572]	@ (8009608 <tcp_slowtmr+0x584>)
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ce:	6a1b      	ldr	r3, [r3, #32]
 80093d0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80093d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093d4:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80093d8:	4b8c      	ldr	r3, [pc, #560]	@ (800960c <tcp_slowtmr+0x588>)
 80093da:	440b      	add	r3, r1
 80093dc:	498c      	ldr	r1, [pc, #560]	@ (8009610 <tcp_slowtmr+0x58c>)
 80093de:	fba1 1303 	umull	r1, r3, r1, r3
 80093e2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d90a      	bls.n	80093fe <tcp_slowtmr+0x37a>
        ++pcb_remove;
 80093e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80093ec:	3301      	adds	r3, #1
 80093ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 80093f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80093f6:	3301      	adds	r3, #1
 80093f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80093fc:	e027      	b.n	800944e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80093fe:	4b82      	ldr	r3, [pc, #520]	@ (8009608 <tcp_slowtmr+0x584>)
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009404:	6a1b      	ldr	r3, [r3, #32]
 8009406:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800940a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800940e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009410:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8009414:	4618      	mov	r0, r3
 8009416:	4b7f      	ldr	r3, [pc, #508]	@ (8009614 <tcp_slowtmr+0x590>)
 8009418:	fb00 f303 	mul.w	r3, r0, r3
 800941c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800941e:	497c      	ldr	r1, [pc, #496]	@ (8009610 <tcp_slowtmr+0x58c>)
 8009420:	fba1 1303 	umull	r1, r3, r1, r3
 8009424:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009426:	429a      	cmp	r2, r3
 8009428:	d911      	bls.n	800944e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800942a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800942c:	f005 f808 	bl	800e440 <tcp_keepalive>
 8009430:	4603      	mov	r3, r0
 8009432:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8009436:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800943a:	2b00      	cmp	r3, #0
 800943c:	d107      	bne.n	800944e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800943e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009440:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8009444:	3301      	adds	r3, #1
 8009446:	b2da      	uxtb	r2, r3
 8009448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800944a:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800944e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009450:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009452:	2b00      	cmp	r3, #0
 8009454:	d011      	beq.n	800947a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009456:	4b6c      	ldr	r3, [pc, #432]	@ (8009608 <tcp_slowtmr+0x584>)
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800945c:	6a1b      	ldr	r3, [r3, #32]
 800945e:	1ad2      	subs	r2, r2, r3
 8009460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009462:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8009466:	4619      	mov	r1, r3
 8009468:	460b      	mov	r3, r1
 800946a:	005b      	lsls	r3, r3, #1
 800946c:	440b      	add	r3, r1
 800946e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8009470:	429a      	cmp	r2, r3
 8009472:	d302      	bcc.n	800947a <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8009474:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009476:	f000 fec9 	bl	800a20c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800947a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800947c:	7d1b      	ldrb	r3, [r3, #20]
 800947e:	2b03      	cmp	r3, #3
 8009480:	d10b      	bne.n	800949a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009482:	4b61      	ldr	r3, [pc, #388]	@ (8009608 <tcp_slowtmr+0x584>)
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009488:	6a1b      	ldr	r3, [r3, #32]
 800948a:	1ad3      	subs	r3, r2, r3
 800948c:	2b28      	cmp	r3, #40	@ 0x28
 800948e:	d904      	bls.n	800949a <tcp_slowtmr+0x416>
        ++pcb_remove;
 8009490:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009494:	3301      	adds	r3, #1
 8009496:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800949a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800949c:	7d1b      	ldrb	r3, [r3, #20]
 800949e:	2b09      	cmp	r3, #9
 80094a0:	d10b      	bne.n	80094ba <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80094a2:	4b59      	ldr	r3, [pc, #356]	@ (8009608 <tcp_slowtmr+0x584>)
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a8:	6a1b      	ldr	r3, [r3, #32]
 80094aa:	1ad3      	subs	r3, r2, r3
 80094ac:	2bf0      	cmp	r3, #240	@ 0xf0
 80094ae:	d904      	bls.n	80094ba <tcp_slowtmr+0x436>
        ++pcb_remove;
 80094b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80094b4:	3301      	adds	r3, #1
 80094b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80094ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d060      	beq.n	8009584 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 80094c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094c8:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80094ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80094cc:	f000 fcea 	bl	8009ea4 <tcp_pcb_purge>
      if (prev != NULL) {
 80094d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d010      	beq.n	80094f8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80094d6:	4b50      	ldr	r3, [pc, #320]	@ (8009618 <tcp_slowtmr+0x594>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094dc:	429a      	cmp	r2, r3
 80094de:	d106      	bne.n	80094ee <tcp_slowtmr+0x46a>
 80094e0:	4b4e      	ldr	r3, [pc, #312]	@ (800961c <tcp_slowtmr+0x598>)
 80094e2:	f240 526d 	movw	r2, #1389	@ 0x56d
 80094e6:	494e      	ldr	r1, [pc, #312]	@ (8009620 <tcp_slowtmr+0x59c>)
 80094e8:	484e      	ldr	r0, [pc, #312]	@ (8009624 <tcp_slowtmr+0x5a0>)
 80094ea:	f007 ff81 	bl	80113f0 <iprintf>
        prev->next = pcb->next;
 80094ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094f0:	68da      	ldr	r2, [r3, #12]
 80094f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094f4:	60da      	str	r2, [r3, #12]
 80094f6:	e00f      	b.n	8009518 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80094f8:	4b47      	ldr	r3, [pc, #284]	@ (8009618 <tcp_slowtmr+0x594>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094fe:	429a      	cmp	r2, r3
 8009500:	d006      	beq.n	8009510 <tcp_slowtmr+0x48c>
 8009502:	4b46      	ldr	r3, [pc, #280]	@ (800961c <tcp_slowtmr+0x598>)
 8009504:	f240 5271 	movw	r2, #1393	@ 0x571
 8009508:	4947      	ldr	r1, [pc, #284]	@ (8009628 <tcp_slowtmr+0x5a4>)
 800950a:	4846      	ldr	r0, [pc, #280]	@ (8009624 <tcp_slowtmr+0x5a0>)
 800950c:	f007 ff70 	bl	80113f0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8009510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	4a40      	ldr	r2, [pc, #256]	@ (8009618 <tcp_slowtmr+0x594>)
 8009516:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8009518:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800951c:	2b00      	cmp	r3, #0
 800951e:	d013      	beq.n	8009548 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009522:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8009524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009526:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8009528:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800952a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800952c:	3304      	adds	r3, #4
 800952e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009530:	8ad2      	ldrh	r2, [r2, #22]
 8009532:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009534:	8b09      	ldrh	r1, [r1, #24]
 8009536:	9102      	str	r1, [sp, #8]
 8009538:	9201      	str	r2, [sp, #4]
 800953a:	9300      	str	r3, [sp, #0]
 800953c:	462b      	mov	r3, r5
 800953e:	4622      	mov	r2, r4
 8009540:	4601      	mov	r1, r0
 8009542:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009544:	f004 fec8 	bl	800e2d8 <tcp_rst>
      err_arg = pcb->callback_arg;
 8009548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800954a:	691b      	ldr	r3, [r3, #16]
 800954c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800954e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009550:	7d1b      	ldrb	r3, [r3, #20]
 8009552:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8009554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009556:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800955e:	6838      	ldr	r0, [r7, #0]
 8009560:	f7ff f838 	bl	80085d4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8009564:	4b31      	ldr	r3, [pc, #196]	@ (800962c <tcp_slowtmr+0x5a8>)
 8009566:	2200      	movs	r2, #0
 8009568:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d004      	beq.n	800957a <tcp_slowtmr+0x4f6>
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f06f 010c 	mvn.w	r1, #12
 8009576:	68b8      	ldr	r0, [r7, #8]
 8009578:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800957a:	4b2c      	ldr	r3, [pc, #176]	@ (800962c <tcp_slowtmr+0x5a8>)
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d037      	beq.n	80095f2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8009582:	e592      	b.n	80090aa <tcp_slowtmr+0x26>
      prev = pcb;
 8009584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009586:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8009588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800958e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009590:	7f1b      	ldrb	r3, [r3, #28]
 8009592:	3301      	adds	r3, #1
 8009594:	b2da      	uxtb	r2, r3
 8009596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009598:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800959a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800959c:	7f1a      	ldrb	r2, [r3, #28]
 800959e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a0:	7f5b      	ldrb	r3, [r3, #29]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d325      	bcc.n	80095f2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80095a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a8:	2200      	movs	r2, #0
 80095aa:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80095ac:	4b1f      	ldr	r3, [pc, #124]	@ (800962c <tcp_slowtmr+0x5a8>)
 80095ae:	2200      	movs	r2, #0
 80095b0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80095b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d00b      	beq.n	80095d4 <tcp_slowtmr+0x550>
 80095bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80095c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80095c4:	6912      	ldr	r2, [r2, #16]
 80095c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80095c8:	4610      	mov	r0, r2
 80095ca:	4798      	blx	r3
 80095cc:	4603      	mov	r3, r0
 80095ce:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80095d2:	e002      	b.n	80095da <tcp_slowtmr+0x556>
 80095d4:	2300      	movs	r3, #0
 80095d6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80095da:	4b14      	ldr	r3, [pc, #80]	@ (800962c <tcp_slowtmr+0x5a8>)
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	f47f ad62 	bne.w	80090a8 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80095e4:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d102      	bne.n	80095f2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80095ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095ee:	f004 f8bf 	bl	800d770 <tcp_output>
  while (pcb != NULL) {
 80095f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	f47f ad5e 	bne.w	80090b6 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80095fa:	2300      	movs	r3, #0
 80095fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 80095fe:	4b0c      	ldr	r3, [pc, #48]	@ (8009630 <tcp_slowtmr+0x5ac>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8009604:	e069      	b.n	80096da <tcp_slowtmr+0x656>
 8009606:	bf00      	nop
 8009608:	200085a8 	.word	0x200085a8
 800960c:	000a4cb8 	.word	0x000a4cb8
 8009610:	10624dd3 	.word	0x10624dd3
 8009614:	000124f8 	.word	0x000124f8
 8009618:	200085b4 	.word	0x200085b4
 800961c:	08012fa0 	.word	0x08012fa0
 8009620:	080133d8 	.word	0x080133d8
 8009624:	08012fe4 	.word	0x08012fe4
 8009628:	08013404 	.word	0x08013404
 800962c:	200085bc 	.word	0x200085bc
 8009630:	200085b8 	.word	0x200085b8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009636:	7d1b      	ldrb	r3, [r3, #20]
 8009638:	2b0a      	cmp	r3, #10
 800963a:	d006      	beq.n	800964a <tcp_slowtmr+0x5c6>
 800963c:	4b2b      	ldr	r3, [pc, #172]	@ (80096ec <tcp_slowtmr+0x668>)
 800963e:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8009642:	492b      	ldr	r1, [pc, #172]	@ (80096f0 <tcp_slowtmr+0x66c>)
 8009644:	482b      	ldr	r0, [pc, #172]	@ (80096f4 <tcp_slowtmr+0x670>)
 8009646:	f007 fed3 	bl	80113f0 <iprintf>
    pcb_remove = 0;
 800964a:	2300      	movs	r3, #0
 800964c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009650:	4b29      	ldr	r3, [pc, #164]	@ (80096f8 <tcp_slowtmr+0x674>)
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009656:	6a1b      	ldr	r3, [r3, #32]
 8009658:	1ad3      	subs	r3, r2, r3
 800965a:	2bf0      	cmp	r3, #240	@ 0xf0
 800965c:	d904      	bls.n	8009668 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800965e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009662:	3301      	adds	r3, #1
 8009664:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009668:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800966c:	2b00      	cmp	r3, #0
 800966e:	d02f      	beq.n	80096d0 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009670:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009672:	f000 fc17 	bl	8009ea4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8009676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009678:	2b00      	cmp	r3, #0
 800967a:	d010      	beq.n	800969e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800967c:	4b1f      	ldr	r3, [pc, #124]	@ (80096fc <tcp_slowtmr+0x678>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009682:	429a      	cmp	r2, r3
 8009684:	d106      	bne.n	8009694 <tcp_slowtmr+0x610>
 8009686:	4b19      	ldr	r3, [pc, #100]	@ (80096ec <tcp_slowtmr+0x668>)
 8009688:	f240 52af 	movw	r2, #1455	@ 0x5af
 800968c:	491c      	ldr	r1, [pc, #112]	@ (8009700 <tcp_slowtmr+0x67c>)
 800968e:	4819      	ldr	r0, [pc, #100]	@ (80096f4 <tcp_slowtmr+0x670>)
 8009690:	f007 feae 	bl	80113f0 <iprintf>
        prev->next = pcb->next;
 8009694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009696:	68da      	ldr	r2, [r3, #12]
 8009698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800969a:	60da      	str	r2, [r3, #12]
 800969c:	e00f      	b.n	80096be <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800969e:	4b17      	ldr	r3, [pc, #92]	@ (80096fc <tcp_slowtmr+0x678>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d006      	beq.n	80096b6 <tcp_slowtmr+0x632>
 80096a8:	4b10      	ldr	r3, [pc, #64]	@ (80096ec <tcp_slowtmr+0x668>)
 80096aa:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80096ae:	4915      	ldr	r1, [pc, #84]	@ (8009704 <tcp_slowtmr+0x680>)
 80096b0:	4810      	ldr	r0, [pc, #64]	@ (80096f4 <tcp_slowtmr+0x670>)
 80096b2:	f007 fe9d 	bl	80113f0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80096b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	4a10      	ldr	r2, [pc, #64]	@ (80096fc <tcp_slowtmr+0x678>)
 80096bc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80096be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096c0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80096c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80096c8:	69f8      	ldr	r0, [r7, #28]
 80096ca:	f7fe ff83 	bl	80085d4 <tcp_free>
 80096ce:	e004      	b.n	80096da <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80096d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80096d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80096da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d1a9      	bne.n	8009634 <tcp_slowtmr+0x5b0>
    }
  }
}
 80096e0:	bf00      	nop
 80096e2:	bf00      	nop
 80096e4:	3730      	adds	r7, #48	@ 0x30
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bdb0      	pop	{r4, r5, r7, pc}
 80096ea:	bf00      	nop
 80096ec:	08012fa0 	.word	0x08012fa0
 80096f0:	08013430 	.word	0x08013430
 80096f4:	08012fe4 	.word	0x08012fe4
 80096f8:	200085a8 	.word	0x200085a8
 80096fc:	200085b8 	.word	0x200085b8
 8009700:	08013460 	.word	0x08013460
 8009704:	08013488 	.word	0x08013488

08009708 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800970e:	4b2d      	ldr	r3, [pc, #180]	@ (80097c4 <tcp_fasttmr+0xbc>)
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	3301      	adds	r3, #1
 8009714:	b2da      	uxtb	r2, r3
 8009716:	4b2b      	ldr	r3, [pc, #172]	@ (80097c4 <tcp_fasttmr+0xbc>)
 8009718:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800971a:	4b2b      	ldr	r3, [pc, #172]	@ (80097c8 <tcp_fasttmr+0xc0>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009720:	e048      	b.n	80097b4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	7f9a      	ldrb	r2, [r3, #30]
 8009726:	4b27      	ldr	r3, [pc, #156]	@ (80097c4 <tcp_fasttmr+0xbc>)
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	429a      	cmp	r2, r3
 800972c:	d03f      	beq.n	80097ae <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800972e:	4b25      	ldr	r3, [pc, #148]	@ (80097c4 <tcp_fasttmr+0xbc>)
 8009730:	781a      	ldrb	r2, [r3, #0]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	8b5b      	ldrh	r3, [r3, #26]
 800973a:	f003 0301 	and.w	r3, r3, #1
 800973e:	2b00      	cmp	r3, #0
 8009740:	d010      	beq.n	8009764 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	8b5b      	ldrh	r3, [r3, #26]
 8009746:	f043 0302 	orr.w	r3, r3, #2
 800974a:	b29a      	uxth	r2, r3
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f004 f80d 	bl	800d770 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	8b5b      	ldrh	r3, [r3, #26]
 800975a:	f023 0303 	bic.w	r3, r3, #3
 800975e:	b29a      	uxth	r2, r3
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	8b5b      	ldrh	r3, [r3, #26]
 8009768:	f003 0308 	and.w	r3, r3, #8
 800976c:	2b00      	cmp	r3, #0
 800976e:	d009      	beq.n	8009784 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	8b5b      	ldrh	r3, [r3, #26]
 8009774:	f023 0308 	bic.w	r3, r3, #8
 8009778:	b29a      	uxth	r2, r3
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f7ff f8bc 	bl	80088fc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800978e:	2b00      	cmp	r3, #0
 8009790:	d00a      	beq.n	80097a8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8009792:	4b0e      	ldr	r3, [pc, #56]	@ (80097cc <tcp_fasttmr+0xc4>)
 8009794:	2200      	movs	r2, #0
 8009796:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 f819 	bl	80097d0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800979e:	4b0b      	ldr	r3, [pc, #44]	@ (80097cc <tcp_fasttmr+0xc4>)
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d000      	beq.n	80097a8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80097a6:	e7b8      	b.n	800971a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	607b      	str	r3, [r7, #4]
 80097ac:	e002      	b.n	80097b4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	68db      	ldr	r3, [r3, #12]
 80097b2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d1b3      	bne.n	8009722 <tcp_fasttmr+0x1a>
    }
  }
}
 80097ba:	bf00      	nop
 80097bc:	bf00      	nop
 80097be:	3708      	adds	r7, #8
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	200085be 	.word	0x200085be
 80097c8:	200085b4 	.word	0x200085b4
 80097cc:	200085bc 	.word	0x200085bc

080097d0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80097d0:	b590      	push	{r4, r7, lr}
 80097d2:	b085      	sub	sp, #20
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d109      	bne.n	80097f2 <tcp_process_refused_data+0x22>
 80097de:	4b37      	ldr	r3, [pc, #220]	@ (80098bc <tcp_process_refused_data+0xec>)
 80097e0:	f240 6209 	movw	r2, #1545	@ 0x609
 80097e4:	4936      	ldr	r1, [pc, #216]	@ (80098c0 <tcp_process_refused_data+0xf0>)
 80097e6:	4837      	ldr	r0, [pc, #220]	@ (80098c4 <tcp_process_refused_data+0xf4>)
 80097e8:	f007 fe02 	bl	80113f0 <iprintf>
 80097ec:	f06f 030f 	mvn.w	r3, #15
 80097f0:	e060      	b.n	80098b4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80097f6:	7b5b      	ldrb	r3, [r3, #13]
 80097f8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80097fe:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800980c:	2b00      	cmp	r3, #0
 800980e:	d00b      	beq.n	8009828 <tcp_process_refused_data+0x58>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6918      	ldr	r0, [r3, #16]
 800981a:	2300      	movs	r3, #0
 800981c:	68ba      	ldr	r2, [r7, #8]
 800981e:	6879      	ldr	r1, [r7, #4]
 8009820:	47a0      	blx	r4
 8009822:	4603      	mov	r3, r0
 8009824:	73fb      	strb	r3, [r7, #15]
 8009826:	e007      	b.n	8009838 <tcp_process_refused_data+0x68>
 8009828:	2300      	movs	r3, #0
 800982a:	68ba      	ldr	r2, [r7, #8]
 800982c:	6879      	ldr	r1, [r7, #4]
 800982e:	2000      	movs	r0, #0
 8009830:	f000 f8c2 	bl	80099b8 <tcp_recv_null>
 8009834:	4603      	mov	r3, r0
 8009836:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d12a      	bne.n	8009896 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009840:	7bbb      	ldrb	r3, [r7, #14]
 8009842:	f003 0320 	and.w	r3, r3, #32
 8009846:	2b00      	cmp	r3, #0
 8009848:	d033      	beq.n	80098b2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800984e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8009852:	d005      	beq.n	8009860 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009858:	3301      	adds	r3, #1
 800985a:	b29a      	uxth	r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00b      	beq.n	8009882 <tcp_process_refused_data+0xb2>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6918      	ldr	r0, [r3, #16]
 8009874:	2300      	movs	r3, #0
 8009876:	2200      	movs	r2, #0
 8009878:	6879      	ldr	r1, [r7, #4]
 800987a:	47a0      	blx	r4
 800987c:	4603      	mov	r3, r0
 800987e:	73fb      	strb	r3, [r7, #15]
 8009880:	e001      	b.n	8009886 <tcp_process_refused_data+0xb6>
 8009882:	2300      	movs	r3, #0
 8009884:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800988a:	f113 0f0d 	cmn.w	r3, #13
 800988e:	d110      	bne.n	80098b2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009890:	f06f 030c 	mvn.w	r3, #12
 8009894:	e00e      	b.n	80098b4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800989a:	f113 0f0d 	cmn.w	r3, #13
 800989e:	d102      	bne.n	80098a6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80098a0:	f06f 030c 	mvn.w	r3, #12
 80098a4:	e006      	b.n	80098b4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	68ba      	ldr	r2, [r7, #8]
 80098aa:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80098ac:	f06f 0304 	mvn.w	r3, #4
 80098b0:	e000      	b.n	80098b4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3714      	adds	r7, #20
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd90      	pop	{r4, r7, pc}
 80098bc:	08012fa0 	.word	0x08012fa0
 80098c0:	080134b0 	.word	0x080134b0
 80098c4:	08012fe4 	.word	0x08012fe4

080098c8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80098d0:	e007      	b.n	80098e2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 f80a 	bl	80098f2 <tcp_seg_free>
    seg = next;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d1f4      	bne.n	80098d2 <tcp_segs_free+0xa>
  }
}
 80098e8:	bf00      	nop
 80098ea:	bf00      	nop
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b082      	sub	sp, #8
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d00c      	beq.n	800991a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d004      	beq.n	8009912 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	4618      	mov	r0, r3
 800990e:	f7fe fbc1 	bl	8008094 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009912:	6879      	ldr	r1, [r7, #4]
 8009914:	2003      	movs	r0, #3
 8009916:	f7fd fd47 	bl	80073a8 <memp_free>
  }
}
 800991a:	bf00      	nop
 800991c:	3708      	adds	r7, #8
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
	...

08009924 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	460b      	mov	r3, r1
 800992e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d107      	bne.n	8009946 <tcp_setprio+0x22>
 8009936:	4b07      	ldr	r3, [pc, #28]	@ (8009954 <tcp_setprio+0x30>)
 8009938:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 800993c:	4906      	ldr	r1, [pc, #24]	@ (8009958 <tcp_setprio+0x34>)
 800993e:	4807      	ldr	r0, [pc, #28]	@ (800995c <tcp_setprio+0x38>)
 8009940:	f007 fd56 	bl	80113f0 <iprintf>
 8009944:	e002      	b.n	800994c <tcp_setprio+0x28>

  pcb->prio = prio;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	78fa      	ldrb	r2, [r7, #3]
 800994a:	755a      	strb	r2, [r3, #21]
}
 800994c:	3708      	adds	r7, #8
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	08012fa0 	.word	0x08012fa0
 8009958:	080134d8 	.word	0x080134d8
 800995c:	08012fe4 	.word	0x08012fe4

08009960 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d106      	bne.n	800997c <tcp_seg_copy+0x1c>
 800996e:	4b0f      	ldr	r3, [pc, #60]	@ (80099ac <tcp_seg_copy+0x4c>)
 8009970:	f240 6282 	movw	r2, #1666	@ 0x682
 8009974:	490e      	ldr	r1, [pc, #56]	@ (80099b0 <tcp_seg_copy+0x50>)
 8009976:	480f      	ldr	r0, [pc, #60]	@ (80099b4 <tcp_seg_copy+0x54>)
 8009978:	f007 fd3a 	bl	80113f0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800997c:	2003      	movs	r0, #3
 800997e:	f7fd fca3 	bl	80072c8 <memp_malloc>
 8009982:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d101      	bne.n	800998e <tcp_seg_copy+0x2e>
    return NULL;
 800998a:	2300      	movs	r3, #0
 800998c:	e00a      	b.n	80099a4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800998e:	2210      	movs	r2, #16
 8009990:	6879      	ldr	r1, [r7, #4]
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f007 fe25 	bl	80115e2 <memcpy>
  pbuf_ref(cseg->p);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	4618      	mov	r0, r3
 800999e:	f7fe fc19 	bl	80081d4 <pbuf_ref>
  return cseg;
 80099a2:	68fb      	ldr	r3, [r7, #12]
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3710      	adds	r7, #16
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	08012fa0 	.word	0x08012fa0
 80099b0:	080134f4 	.word	0x080134f4
 80099b4:	08012fe4 	.word	0x08012fe4

080099b8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	607a      	str	r2, [r7, #4]
 80099c4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d109      	bne.n	80099e0 <tcp_recv_null+0x28>
 80099cc:	4b12      	ldr	r3, [pc, #72]	@ (8009a18 <tcp_recv_null+0x60>)
 80099ce:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80099d2:	4912      	ldr	r1, [pc, #72]	@ (8009a1c <tcp_recv_null+0x64>)
 80099d4:	4812      	ldr	r0, [pc, #72]	@ (8009a20 <tcp_recv_null+0x68>)
 80099d6:	f007 fd0b 	bl	80113f0 <iprintf>
 80099da:	f06f 030f 	mvn.w	r3, #15
 80099de:	e016      	b.n	8009a0e <tcp_recv_null+0x56>

  if (p != NULL) {
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d009      	beq.n	80099fa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	891b      	ldrh	r3, [r3, #8]
 80099ea:	4619      	mov	r1, r3
 80099ec:	68b8      	ldr	r0, [r7, #8]
 80099ee:	f7ff fab3 	bl	8008f58 <tcp_recved>
    pbuf_free(p);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f7fe fb4e 	bl	8008094 <pbuf_free>
 80099f8:	e008      	b.n	8009a0c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80099fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d104      	bne.n	8009a0c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009a02:	68b8      	ldr	r0, [r7, #8]
 8009a04:	f7fe ffe4 	bl	80089d0 <tcp_close>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	e000      	b.n	8009a0e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	08012fa0 	.word	0x08012fa0
 8009a1c:	08013510 	.word	0x08013510
 8009a20:	08012fe4 	.word	0x08012fe4

08009a24 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b086      	sub	sp, #24
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	db01      	blt.n	8009a3a <tcp_kill_prio+0x16>
 8009a36:	79fb      	ldrb	r3, [r7, #7]
 8009a38:	e000      	b.n	8009a3c <tcp_kill_prio+0x18>
 8009a3a:	237f      	movs	r3, #127	@ 0x7f
 8009a3c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8009a3e:	7afb      	ldrb	r3, [r7, #11]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d034      	beq.n	8009aae <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8009a44:	7afb      	ldrb	r3, [r7, #11]
 8009a46:	3b01      	subs	r3, #1
 8009a48:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009a52:	4b19      	ldr	r3, [pc, #100]	@ (8009ab8 <tcp_kill_prio+0x94>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	617b      	str	r3, [r7, #20]
 8009a58:	e01f      	b.n	8009a9a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	7d5b      	ldrb	r3, [r3, #21]
 8009a5e:	7afa      	ldrb	r2, [r7, #11]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d80c      	bhi.n	8009a7e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8009a68:	7afa      	ldrb	r2, [r7, #11]
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d112      	bne.n	8009a94 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009a6e:	4b13      	ldr	r3, [pc, #76]	@ (8009abc <tcp_kill_prio+0x98>)
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	6a1b      	ldr	r3, [r3, #32]
 8009a76:	1ad3      	subs	r3, r2, r3
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d80a      	bhi.n	8009a94 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8009a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8009abc <tcp_kill_prio+0x98>)
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	6a1b      	ldr	r3, [r3, #32]
 8009a86:	1ad3      	subs	r3, r2, r3
 8009a88:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	7d5b      	ldrb	r3, [r3, #21]
 8009a92:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	617b      	str	r3, [r7, #20]
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d1dc      	bne.n	8009a5a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d004      	beq.n	8009ab0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009aa6:	6938      	ldr	r0, [r7, #16]
 8009aa8:	f7ff f87c 	bl	8008ba4 <tcp_abort>
 8009aac:	e000      	b.n	8009ab0 <tcp_kill_prio+0x8c>
    return;
 8009aae:	bf00      	nop
  }
}
 8009ab0:	3718      	adds	r7, #24
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	200085b4 	.word	0x200085b4
 8009abc:	200085a8 	.word	0x200085a8

08009ac0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b086      	sub	sp, #24
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8009aca:	79fb      	ldrb	r3, [r7, #7]
 8009acc:	2b08      	cmp	r3, #8
 8009ace:	d009      	beq.n	8009ae4 <tcp_kill_state+0x24>
 8009ad0:	79fb      	ldrb	r3, [r7, #7]
 8009ad2:	2b09      	cmp	r3, #9
 8009ad4:	d006      	beq.n	8009ae4 <tcp_kill_state+0x24>
 8009ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8009b40 <tcp_kill_state+0x80>)
 8009ad8:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8009adc:	4919      	ldr	r1, [pc, #100]	@ (8009b44 <tcp_kill_state+0x84>)
 8009ade:	481a      	ldr	r0, [pc, #104]	@ (8009b48 <tcp_kill_state+0x88>)
 8009ae0:	f007 fc86 	bl	80113f0 <iprintf>

  inactivity = 0;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009aec:	4b17      	ldr	r3, [pc, #92]	@ (8009b4c <tcp_kill_state+0x8c>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	617b      	str	r3, [r7, #20]
 8009af2:	e017      	b.n	8009b24 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	7d1b      	ldrb	r3, [r3, #20]
 8009af8:	79fa      	ldrb	r2, [r7, #7]
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d10f      	bne.n	8009b1e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009afe:	4b14      	ldr	r3, [pc, #80]	@ (8009b50 <tcp_kill_state+0x90>)
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	6a1b      	ldr	r3, [r3, #32]
 8009b06:	1ad3      	subs	r3, r2, r3
 8009b08:	68fa      	ldr	r2, [r7, #12]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d807      	bhi.n	8009b1e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8009b0e:	4b10      	ldr	r3, [pc, #64]	@ (8009b50 <tcp_kill_state+0x90>)
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	6a1b      	ldr	r3, [r3, #32]
 8009b16:	1ad3      	subs	r3, r2, r3
 8009b18:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	617b      	str	r3, [r7, #20]
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d1e4      	bne.n	8009af4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d003      	beq.n	8009b38 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8009b30:	2100      	movs	r1, #0
 8009b32:	6938      	ldr	r0, [r7, #16]
 8009b34:	f7fe ff78 	bl	8008a28 <tcp_abandon>
  }
}
 8009b38:	bf00      	nop
 8009b3a:	3718      	adds	r7, #24
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}
 8009b40:	08012fa0 	.word	0x08012fa0
 8009b44:	0801352c 	.word	0x0801352c
 8009b48:	08012fe4 	.word	0x08012fe4
 8009b4c:	200085b4 	.word	0x200085b4
 8009b50:	200085a8 	.word	0x200085a8

08009b54 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b62:	4b12      	ldr	r3, [pc, #72]	@ (8009bac <tcp_kill_timewait+0x58>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	60fb      	str	r3, [r7, #12]
 8009b68:	e012      	b.n	8009b90 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009b6a:	4b11      	ldr	r3, [pc, #68]	@ (8009bb0 <tcp_kill_timewait+0x5c>)
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6a1b      	ldr	r3, [r3, #32]
 8009b72:	1ad3      	subs	r3, r2, r3
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	429a      	cmp	r2, r3
 8009b78:	d807      	bhi.n	8009b8a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8009b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8009bb0 <tcp_kill_timewait+0x5c>)
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6a1b      	ldr	r3, [r3, #32]
 8009b82:	1ad3      	subs	r3, r2, r3
 8009b84:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	68db      	ldr	r3, [r3, #12]
 8009b8e:	60fb      	str	r3, [r7, #12]
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d1e9      	bne.n	8009b6a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d002      	beq.n	8009ba2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009b9c:	68b8      	ldr	r0, [r7, #8]
 8009b9e:	f7ff f801 	bl	8008ba4 <tcp_abort>
  }
}
 8009ba2:	bf00      	nop
 8009ba4:	3710      	adds	r7, #16
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	200085b8 	.word	0x200085b8
 8009bb0:	200085a8 	.word	0x200085a8

08009bb4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009bba:	4b10      	ldr	r3, [pc, #64]	@ (8009bfc <tcp_handle_closepend+0x48>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009bc0:	e014      	b.n	8009bec <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	68db      	ldr	r3, [r3, #12]
 8009bc6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	8b5b      	ldrh	r3, [r3, #26]
 8009bcc:	f003 0308 	and.w	r3, r3, #8
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d009      	beq.n	8009be8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	8b5b      	ldrh	r3, [r3, #26]
 8009bd8:	f023 0308 	bic.w	r3, r3, #8
 8009bdc:	b29a      	uxth	r2, r3
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f7fe fe8a 	bl	80088fc <tcp_close_shutdown_fin>
    }
    pcb = next;
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d1e7      	bne.n	8009bc2 <tcp_handle_closepend+0xe>
  }
}
 8009bf2:	bf00      	nop
 8009bf4:	bf00      	nop
 8009bf6:	3708      	adds	r7, #8
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	200085b4 	.word	0x200085b4

08009c00 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	4603      	mov	r3, r0
 8009c08:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009c0a:	2001      	movs	r0, #1
 8009c0c:	f7fd fb5c 	bl	80072c8 <memp_malloc>
 8009c10:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d126      	bne.n	8009c66 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009c18:	f7ff ffcc 	bl	8009bb4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8009c1c:	f7ff ff9a 	bl	8009b54 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009c20:	2001      	movs	r0, #1
 8009c22:	f7fd fb51 	bl	80072c8 <memp_malloc>
 8009c26:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d11b      	bne.n	8009c66 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8009c2e:	2009      	movs	r0, #9
 8009c30:	f7ff ff46 	bl	8009ac0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009c34:	2001      	movs	r0, #1
 8009c36:	f7fd fb47 	bl	80072c8 <memp_malloc>
 8009c3a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d111      	bne.n	8009c66 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8009c42:	2008      	movs	r0, #8
 8009c44:	f7ff ff3c 	bl	8009ac0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009c48:	2001      	movs	r0, #1
 8009c4a:	f7fd fb3d 	bl	80072c8 <memp_malloc>
 8009c4e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d107      	bne.n	8009c66 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8009c56:	79fb      	ldrb	r3, [r7, #7]
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7ff fee3 	bl	8009a24 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009c5e:	2001      	movs	r0, #1
 8009c60:	f7fd fb32 	bl	80072c8 <memp_malloc>
 8009c64:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d03f      	beq.n	8009cec <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8009c6c:	229c      	movs	r2, #156	@ 0x9c
 8009c6e:	2100      	movs	r1, #0
 8009c70:	68f8      	ldr	r0, [r7, #12]
 8009c72:	f007 fc22 	bl	80114ba <memset>
    pcb->prio = prio;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	79fa      	ldrb	r2, [r7, #7]
 8009c7a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8009c82:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8009c8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	22ff      	movs	r2, #255	@ 0xff
 8009c9a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8009ca2:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2206      	movs	r2, #6
 8009ca8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2206      	movs	r2, #6
 8009cb0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009cb8:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8009cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8009cf8 <tcp_alloc+0xf8>)
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8009cca:	4b0c      	ldr	r3, [pc, #48]	@ (8009cfc <tcp_alloc+0xfc>)
 8009ccc:	781a      	ldrb	r2, [r3, #0]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8009cd8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	4a08      	ldr	r2, [pc, #32]	@ (8009d00 <tcp_alloc+0x100>)
 8009ce0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	4a07      	ldr	r2, [pc, #28]	@ (8009d04 <tcp_alloc+0x104>)
 8009ce8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8009cec:	68fb      	ldr	r3, [r7, #12]
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3710      	adds	r7, #16
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	200085a8 	.word	0x200085a8
 8009cfc:	200085be 	.word	0x200085be
 8009d00:	080099b9 	.word	0x080099b9
 8009d04:	006ddd00 	.word	0x006ddd00

08009d08 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	4603      	mov	r3, r0
 8009d10:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8009d12:	2040      	movs	r0, #64	@ 0x40
 8009d14:	f7ff ff74 	bl	8009c00 <tcp_alloc>
 8009d18:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3710      	adds	r7, #16
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d002      	beq.n	8009d3a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	683a      	ldr	r2, [r7, #0]
 8009d38:	611a      	str	r2, [r3, #16]
  }
}
 8009d3a:	bf00      	nop
 8009d3c:	370c      	adds	r7, #12
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr
	...

08009d48 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d00e      	beq.n	8009d76 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	7d1b      	ldrb	r3, [r3, #20]
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d106      	bne.n	8009d6e <tcp_recv+0x26>
 8009d60:	4b07      	ldr	r3, [pc, #28]	@ (8009d80 <tcp_recv+0x38>)
 8009d62:	f240 72df 	movw	r2, #2015	@ 0x7df
 8009d66:	4907      	ldr	r1, [pc, #28]	@ (8009d84 <tcp_recv+0x3c>)
 8009d68:	4807      	ldr	r0, [pc, #28]	@ (8009d88 <tcp_recv+0x40>)
 8009d6a:	f007 fb41 	bl	80113f0 <iprintf>
    pcb->recv = recv;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	683a      	ldr	r2, [r7, #0]
 8009d72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8009d76:	bf00      	nop
 8009d78:	3708      	adds	r7, #8
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	08012fa0 	.word	0x08012fa0
 8009d84:	0801353c 	.word	0x0801353c
 8009d88:	08012fe4 	.word	0x08012fe4

08009d8c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d00e      	beq.n	8009dba <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	7d1b      	ldrb	r3, [r3, #20]
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d106      	bne.n	8009db2 <tcp_sent+0x26>
 8009da4:	4b07      	ldr	r3, [pc, #28]	@ (8009dc4 <tcp_sent+0x38>)
 8009da6:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8009daa:	4907      	ldr	r1, [pc, #28]	@ (8009dc8 <tcp_sent+0x3c>)
 8009dac:	4807      	ldr	r0, [pc, #28]	@ (8009dcc <tcp_sent+0x40>)
 8009dae:	f007 fb1f 	bl	80113f0 <iprintf>
    pcb->sent = sent;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	683a      	ldr	r2, [r7, #0]
 8009db6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8009dba:	bf00      	nop
 8009dbc:	3708      	adds	r7, #8
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	08012fa0 	.word	0x08012fa0
 8009dc8:	08013564 	.word	0x08013564
 8009dcc:	08012fe4 	.word	0x08012fe4

08009dd0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d00e      	beq.n	8009dfe <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	7d1b      	ldrb	r3, [r3, #20]
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d106      	bne.n	8009df6 <tcp_err+0x26>
 8009de8:	4b07      	ldr	r3, [pc, #28]	@ (8009e08 <tcp_err+0x38>)
 8009dea:	f640 020d 	movw	r2, #2061	@ 0x80d
 8009dee:	4907      	ldr	r1, [pc, #28]	@ (8009e0c <tcp_err+0x3c>)
 8009df0:	4807      	ldr	r0, [pc, #28]	@ (8009e10 <tcp_err+0x40>)
 8009df2:	f007 fafd 	bl	80113f0 <iprintf>
    pcb->errf = err;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	683a      	ldr	r2, [r7, #0]
 8009dfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8009dfe:	bf00      	nop
 8009e00:	3708      	adds	r7, #8
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	08012fa0 	.word	0x08012fa0
 8009e0c:	0801358c 	.word	0x0801358c
 8009e10:	08012fe4 	.word	0x08012fe4

08009e14 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d008      	beq.n	8009e36 <tcp_accept+0x22>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	7d1b      	ldrb	r3, [r3, #20]
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d104      	bne.n	8009e36 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	683a      	ldr	r2, [r7, #0]
 8009e34:	619a      	str	r2, [r3, #24]
  }
}
 8009e36:	bf00      	nop
 8009e38:	3714      	adds	r7, #20
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr
	...

08009e44 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	4613      	mov	r3, r2
 8009e50:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d107      	bne.n	8009e68 <tcp_poll+0x24>
 8009e58:	4b0e      	ldr	r3, [pc, #56]	@ (8009e94 <tcp_poll+0x50>)
 8009e5a:	f640 023d 	movw	r2, #2109	@ 0x83d
 8009e5e:	490e      	ldr	r1, [pc, #56]	@ (8009e98 <tcp_poll+0x54>)
 8009e60:	480e      	ldr	r0, [pc, #56]	@ (8009e9c <tcp_poll+0x58>)
 8009e62:	f007 fac5 	bl	80113f0 <iprintf>
 8009e66:	e011      	b.n	8009e8c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	7d1b      	ldrb	r3, [r3, #20]
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d106      	bne.n	8009e7e <tcp_poll+0x3a>
 8009e70:	4b08      	ldr	r3, [pc, #32]	@ (8009e94 <tcp_poll+0x50>)
 8009e72:	f640 023e 	movw	r2, #2110	@ 0x83e
 8009e76:	490a      	ldr	r1, [pc, #40]	@ (8009ea0 <tcp_poll+0x5c>)
 8009e78:	4808      	ldr	r0, [pc, #32]	@ (8009e9c <tcp_poll+0x58>)
 8009e7a:	f007 fab9 	bl	80113f0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	68ba      	ldr	r2, [r7, #8]
 8009e82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	79fa      	ldrb	r2, [r7, #7]
 8009e8a:	775a      	strb	r2, [r3, #29]
}
 8009e8c:	3710      	adds	r7, #16
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	08012fa0 	.word	0x08012fa0
 8009e98:	080135b4 	.word	0x080135b4
 8009e9c:	08012fe4 	.word	0x08012fe4
 8009ea0:	080135cc 	.word	0x080135cc

08009ea4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d107      	bne.n	8009ec2 <tcp_pcb_purge+0x1e>
 8009eb2:	4b21      	ldr	r3, [pc, #132]	@ (8009f38 <tcp_pcb_purge+0x94>)
 8009eb4:	f640 0251 	movw	r2, #2129	@ 0x851
 8009eb8:	4920      	ldr	r1, [pc, #128]	@ (8009f3c <tcp_pcb_purge+0x98>)
 8009eba:	4821      	ldr	r0, [pc, #132]	@ (8009f40 <tcp_pcb_purge+0x9c>)
 8009ebc:	f007 fa98 	bl	80113f0 <iprintf>
 8009ec0:	e037      	b.n	8009f32 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	7d1b      	ldrb	r3, [r3, #20]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d033      	beq.n	8009f32 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8009ece:	2b0a      	cmp	r3, #10
 8009ed0:	d02f      	beq.n	8009f32 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d02b      	beq.n	8009f32 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d007      	beq.n	8009ef2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f7fe f8d4 	bl	8008094 <pbuf_free>
      pcb->refused_data = NULL;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d002      	beq.n	8009f00 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 f986 	bl	800a20c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009f06:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f7ff fcdb 	bl	80098c8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7ff fcd6 	bl	80098c8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8009f32:	3708      	adds	r7, #8
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	08012fa0 	.word	0x08012fa0
 8009f3c:	080135ec 	.word	0x080135ec
 8009f40:	08012fe4 	.word	0x08012fe4

08009f44 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d106      	bne.n	8009f62 <tcp_pcb_remove+0x1e>
 8009f54:	4b3e      	ldr	r3, [pc, #248]	@ (800a050 <tcp_pcb_remove+0x10c>)
 8009f56:	f640 0283 	movw	r2, #2179	@ 0x883
 8009f5a:	493e      	ldr	r1, [pc, #248]	@ (800a054 <tcp_pcb_remove+0x110>)
 8009f5c:	483e      	ldr	r0, [pc, #248]	@ (800a058 <tcp_pcb_remove+0x114>)
 8009f5e:	f007 fa47 	bl	80113f0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d106      	bne.n	8009f76 <tcp_pcb_remove+0x32>
 8009f68:	4b39      	ldr	r3, [pc, #228]	@ (800a050 <tcp_pcb_remove+0x10c>)
 8009f6a:	f640 0284 	movw	r2, #2180	@ 0x884
 8009f6e:	493b      	ldr	r1, [pc, #236]	@ (800a05c <tcp_pcb_remove+0x118>)
 8009f70:	4839      	ldr	r0, [pc, #228]	@ (800a058 <tcp_pcb_remove+0x114>)
 8009f72:	f007 fa3d 	bl	80113f0 <iprintf>

  TCP_RMV(pcblist, pcb);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	683a      	ldr	r2, [r7, #0]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d105      	bne.n	8009f8c <tcp_pcb_remove+0x48>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	68da      	ldr	r2, [r3, #12]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	601a      	str	r2, [r3, #0]
 8009f8a:	e013      	b.n	8009fb4 <tcp_pcb_remove+0x70>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	60fb      	str	r3, [r7, #12]
 8009f92:	e00c      	b.n	8009fae <tcp_pcb_remove+0x6a>
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	683a      	ldr	r2, [r7, #0]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d104      	bne.n	8009fa8 <tcp_pcb_remove+0x64>
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	68da      	ldr	r2, [r3, #12]
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	60da      	str	r2, [r3, #12]
 8009fa6:	e005      	b.n	8009fb4 <tcp_pcb_remove+0x70>
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	60fb      	str	r3, [r7, #12]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d1ef      	bne.n	8009f94 <tcp_pcb_remove+0x50>
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8009fba:	6838      	ldr	r0, [r7, #0]
 8009fbc:	f7ff ff72 	bl	8009ea4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	7d1b      	ldrb	r3, [r3, #20]
 8009fc4:	2b0a      	cmp	r3, #10
 8009fc6:	d013      	beq.n	8009ff0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d00f      	beq.n	8009ff0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	8b5b      	ldrh	r3, [r3, #26]
 8009fd4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d009      	beq.n	8009ff0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	8b5b      	ldrh	r3, [r3, #26]
 8009fe0:	f043 0302 	orr.w	r3, r3, #2
 8009fe4:	b29a      	uxth	r2, r3
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009fea:	6838      	ldr	r0, [r7, #0]
 8009fec:	f003 fbc0 	bl	800d770 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	7d1b      	ldrb	r3, [r3, #20]
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d020      	beq.n	800a03a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d006      	beq.n	800a00e <tcp_pcb_remove+0xca>
 800a000:	4b13      	ldr	r3, [pc, #76]	@ (800a050 <tcp_pcb_remove+0x10c>)
 800a002:	f640 0293 	movw	r2, #2195	@ 0x893
 800a006:	4916      	ldr	r1, [pc, #88]	@ (800a060 <tcp_pcb_remove+0x11c>)
 800a008:	4813      	ldr	r0, [pc, #76]	@ (800a058 <tcp_pcb_remove+0x114>)
 800a00a:	f007 f9f1 	bl	80113f0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a012:	2b00      	cmp	r3, #0
 800a014:	d006      	beq.n	800a024 <tcp_pcb_remove+0xe0>
 800a016:	4b0e      	ldr	r3, [pc, #56]	@ (800a050 <tcp_pcb_remove+0x10c>)
 800a018:	f640 0294 	movw	r2, #2196	@ 0x894
 800a01c:	4911      	ldr	r1, [pc, #68]	@ (800a064 <tcp_pcb_remove+0x120>)
 800a01e:	480e      	ldr	r0, [pc, #56]	@ (800a058 <tcp_pcb_remove+0x114>)
 800a020:	f007 f9e6 	bl	80113f0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d006      	beq.n	800a03a <tcp_pcb_remove+0xf6>
 800a02c:	4b08      	ldr	r3, [pc, #32]	@ (800a050 <tcp_pcb_remove+0x10c>)
 800a02e:	f640 0296 	movw	r2, #2198	@ 0x896
 800a032:	490d      	ldr	r1, [pc, #52]	@ (800a068 <tcp_pcb_remove+0x124>)
 800a034:	4808      	ldr	r0, [pc, #32]	@ (800a058 <tcp_pcb_remove+0x114>)
 800a036:	f007 f9db 	bl	80113f0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	2200      	movs	r2, #0
 800a03e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	2200      	movs	r2, #0
 800a044:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a046:	bf00      	nop
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	08012fa0 	.word	0x08012fa0
 800a054:	08013608 	.word	0x08013608
 800a058:	08012fe4 	.word	0x08012fe4
 800a05c:	08013624 	.word	0x08013624
 800a060:	08013644 	.word	0x08013644
 800a064:	0801365c 	.word	0x0801365c
 800a068:	08013678 	.word	0x08013678

0800a06c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d106      	bne.n	800a088 <tcp_next_iss+0x1c>
 800a07a:	4b0a      	ldr	r3, [pc, #40]	@ (800a0a4 <tcp_next_iss+0x38>)
 800a07c:	f640 02af 	movw	r2, #2223	@ 0x8af
 800a080:	4909      	ldr	r1, [pc, #36]	@ (800a0a8 <tcp_next_iss+0x3c>)
 800a082:	480a      	ldr	r0, [pc, #40]	@ (800a0ac <tcp_next_iss+0x40>)
 800a084:	f007 f9b4 	bl	80113f0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a088:	4b09      	ldr	r3, [pc, #36]	@ (800a0b0 <tcp_next_iss+0x44>)
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	4b09      	ldr	r3, [pc, #36]	@ (800a0b4 <tcp_next_iss+0x48>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4413      	add	r3, r2
 800a092:	4a07      	ldr	r2, [pc, #28]	@ (800a0b0 <tcp_next_iss+0x44>)
 800a094:	6013      	str	r3, [r2, #0]
  return iss;
 800a096:	4b06      	ldr	r3, [pc, #24]	@ (800a0b0 <tcp_next_iss+0x44>)
 800a098:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3708      	adds	r7, #8
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	bf00      	nop
 800a0a4:	08012fa0 	.word	0x08012fa0
 800a0a8:	08013690 	.word	0x08013690
 800a0ac:	08012fe4 	.word	0x08012fe4
 800a0b0:	20000024 	.word	0x20000024
 800a0b4:	200085a8 	.word	0x200085a8

0800a0b8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b086      	sub	sp, #24
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	4603      	mov	r3, r0
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	607a      	str	r2, [r7, #4]
 800a0c4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d106      	bne.n	800a0da <tcp_eff_send_mss_netif+0x22>
 800a0cc:	4b14      	ldr	r3, [pc, #80]	@ (800a120 <tcp_eff_send_mss_netif+0x68>)
 800a0ce:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800a0d2:	4914      	ldr	r1, [pc, #80]	@ (800a124 <tcp_eff_send_mss_netif+0x6c>)
 800a0d4:	4814      	ldr	r0, [pc, #80]	@ (800a128 <tcp_eff_send_mss_netif+0x70>)
 800a0d6:	f007 f98b 	bl	80113f0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d101      	bne.n	800a0e4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a0e0:	89fb      	ldrh	r3, [r7, #14]
 800a0e2:	e019      	b.n	800a118 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a0e8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a0ea:	8afb      	ldrh	r3, [r7, #22]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d012      	beq.n	800a116 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a0f0:	2328      	movs	r3, #40	@ 0x28
 800a0f2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a0f4:	8afa      	ldrh	r2, [r7, #22]
 800a0f6:	8abb      	ldrh	r3, [r7, #20]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d904      	bls.n	800a106 <tcp_eff_send_mss_netif+0x4e>
 800a0fc:	8afa      	ldrh	r2, [r7, #22]
 800a0fe:	8abb      	ldrh	r3, [r7, #20]
 800a100:	1ad3      	subs	r3, r2, r3
 800a102:	b29b      	uxth	r3, r3
 800a104:	e000      	b.n	800a108 <tcp_eff_send_mss_netif+0x50>
 800a106:	2300      	movs	r3, #0
 800a108:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a10a:	8a7a      	ldrh	r2, [r7, #18]
 800a10c:	89fb      	ldrh	r3, [r7, #14]
 800a10e:	4293      	cmp	r3, r2
 800a110:	bf28      	it	cs
 800a112:	4613      	movcs	r3, r2
 800a114:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800a116:	89fb      	ldrh	r3, [r7, #14]
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3718      	adds	r7, #24
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}
 800a120:	08012fa0 	.word	0x08012fa0
 800a124:	080136ac 	.word	0x080136ac
 800a128:	08012fe4 	.word	0x08012fe4

0800a12c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d119      	bne.n	800a174 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800a140:	4b10      	ldr	r3, [pc, #64]	@ (800a184 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800a142:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800a146:	4910      	ldr	r1, [pc, #64]	@ (800a188 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800a148:	4810      	ldr	r0, [pc, #64]	@ (800a18c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800a14a:	f007 f951 	bl	80113f0 <iprintf>

  while (pcb != NULL) {
 800a14e:	e011      	b.n	800a174 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d108      	bne.n	800a16e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f7fe fd1e 	bl	8008ba4 <tcp_abort>
      pcb = next;
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	60fb      	str	r3, [r7, #12]
 800a16c:	e002      	b.n	800a174 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d1ea      	bne.n	800a150 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a17a:	bf00      	nop
 800a17c:	bf00      	nop
 800a17e:	3710      	adds	r7, #16
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	08012fa0 	.word	0x08012fa0
 800a188:	080136d4 	.word	0x080136d4
 800a18c:	08012fe4 	.word	0x08012fe4

0800a190 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d02a      	beq.n	800a1f6 <tcp_netif_ip_addr_changed+0x66>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d026      	beq.n	800a1f6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a1a8:	4b15      	ldr	r3, [pc, #84]	@ (800a200 <tcp_netif_ip_addr_changed+0x70>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f7ff ffbc 	bl	800a12c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a1b4:	4b13      	ldr	r3, [pc, #76]	@ (800a204 <tcp_netif_ip_addr_changed+0x74>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f7ff ffb6 	bl	800a12c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d017      	beq.n	800a1f6 <tcp_netif_ip_addr_changed+0x66>
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d013      	beq.n	800a1f6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a1ce:	4b0e      	ldr	r3, [pc, #56]	@ (800a208 <tcp_netif_ip_addr_changed+0x78>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	60fb      	str	r3, [r7, #12]
 800a1d4:	e00c      	b.n	800a1f0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681a      	ldr	r2, [r3, #0]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d103      	bne.n	800a1ea <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	60fb      	str	r3, [r7, #12]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d1ef      	bne.n	800a1d6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a1f6:	bf00      	nop
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	200085b4 	.word	0x200085b4
 800a204:	200085ac 	.word	0x200085ac
 800a208:	200085b0 	.word	0x200085b0

0800a20c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d007      	beq.n	800a22c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a220:	4618      	mov	r0, r3
 800a222:	f7ff fb51 	bl	80098c8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2200      	movs	r2, #0
 800a22a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a22c:	bf00      	nop
 800a22e:	3708      	adds	r7, #8
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a234:	b590      	push	{r4, r7, lr}
 800a236:	b08d      	sub	sp, #52	@ 0x34
 800a238:	af04      	add	r7, sp, #16
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d105      	bne.n	800a250 <tcp_input+0x1c>
 800a244:	4b9b      	ldr	r3, [pc, #620]	@ (800a4b4 <tcp_input+0x280>)
 800a246:	2283      	movs	r2, #131	@ 0x83
 800a248:	499b      	ldr	r1, [pc, #620]	@ (800a4b8 <tcp_input+0x284>)
 800a24a:	489c      	ldr	r0, [pc, #624]	@ (800a4bc <tcp_input+0x288>)
 800a24c:	f007 f8d0 	bl	80113f0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	4a9a      	ldr	r2, [pc, #616]	@ (800a4c0 <tcp_input+0x28c>)
 800a256:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	895b      	ldrh	r3, [r3, #10]
 800a25c:	2b13      	cmp	r3, #19
 800a25e:	f240 83d1 	bls.w	800aa04 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a262:	4b98      	ldr	r3, [pc, #608]	@ (800a4c4 <tcp_input+0x290>)
 800a264:	695b      	ldr	r3, [r3, #20]
 800a266:	4a97      	ldr	r2, [pc, #604]	@ (800a4c4 <tcp_input+0x290>)
 800a268:	6812      	ldr	r2, [r2, #0]
 800a26a:	4611      	mov	r1, r2
 800a26c:	4618      	mov	r0, r3
 800a26e:	f006 f869 	bl	8010344 <ip4_addr_isbroadcast_u32>
 800a272:	4603      	mov	r3, r0
 800a274:	2b00      	cmp	r3, #0
 800a276:	f040 83c7 	bne.w	800aa08 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a27a:	4b92      	ldr	r3, [pc, #584]	@ (800a4c4 <tcp_input+0x290>)
 800a27c:	695b      	ldr	r3, [r3, #20]
 800a27e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a282:	2be0      	cmp	r3, #224	@ 0xe0
 800a284:	f000 83c0 	beq.w	800aa08 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a288:	4b8d      	ldr	r3, [pc, #564]	@ (800a4c0 <tcp_input+0x28c>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	899b      	ldrh	r3, [r3, #12]
 800a28e:	b29b      	uxth	r3, r3
 800a290:	4618      	mov	r0, r3
 800a292:	f7fc fb6f 	bl	8006974 <lwip_htons>
 800a296:	4603      	mov	r3, r0
 800a298:	0b1b      	lsrs	r3, r3, #12
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a2a2:	7cbb      	ldrb	r3, [r7, #18]
 800a2a4:	2b13      	cmp	r3, #19
 800a2a6:	f240 83b1 	bls.w	800aa0c <tcp_input+0x7d8>
 800a2aa:	7cbb      	ldrb	r3, [r7, #18]
 800a2ac:	b29a      	uxth	r2, r3
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	891b      	ldrh	r3, [r3, #8]
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	f200 83aa 	bhi.w	800aa0c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a2b8:	7cbb      	ldrb	r3, [r7, #18]
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	3b14      	subs	r3, #20
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	4b81      	ldr	r3, [pc, #516]	@ (800a4c8 <tcp_input+0x294>)
 800a2c2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a2c4:	4b81      	ldr	r3, [pc, #516]	@ (800a4cc <tcp_input+0x298>)
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	895a      	ldrh	r2, [r3, #10]
 800a2ce:	7cbb      	ldrb	r3, [r7, #18]
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d309      	bcc.n	800a2ea <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a2d6:	4b7c      	ldr	r3, [pc, #496]	@ (800a4c8 <tcp_input+0x294>)
 800a2d8:	881a      	ldrh	r2, [r3, #0]
 800a2da:	4b7d      	ldr	r3, [pc, #500]	@ (800a4d0 <tcp_input+0x29c>)
 800a2dc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a2de:	7cbb      	ldrb	r3, [r7, #18]
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f7fd fe50 	bl	8007f88 <pbuf_remove_header>
 800a2e8:	e04e      	b.n	800a388 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d105      	bne.n	800a2fe <tcp_input+0xca>
 800a2f2:	4b70      	ldr	r3, [pc, #448]	@ (800a4b4 <tcp_input+0x280>)
 800a2f4:	22c2      	movs	r2, #194	@ 0xc2
 800a2f6:	4977      	ldr	r1, [pc, #476]	@ (800a4d4 <tcp_input+0x2a0>)
 800a2f8:	4870      	ldr	r0, [pc, #448]	@ (800a4bc <tcp_input+0x288>)
 800a2fa:	f007 f879 	bl	80113f0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800a2fe:	2114      	movs	r1, #20
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f7fd fe41 	bl	8007f88 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	895a      	ldrh	r2, [r3, #10]
 800a30a:	4b71      	ldr	r3, [pc, #452]	@ (800a4d0 <tcp_input+0x29c>)
 800a30c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a30e:	4b6e      	ldr	r3, [pc, #440]	@ (800a4c8 <tcp_input+0x294>)
 800a310:	881a      	ldrh	r2, [r3, #0]
 800a312:	4b6f      	ldr	r3, [pc, #444]	@ (800a4d0 <tcp_input+0x29c>)
 800a314:	881b      	ldrh	r3, [r3, #0]
 800a316:	1ad3      	subs	r3, r2, r3
 800a318:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800a31a:	4b6d      	ldr	r3, [pc, #436]	@ (800a4d0 <tcp_input+0x29c>)
 800a31c:	881b      	ldrh	r3, [r3, #0]
 800a31e:	4619      	mov	r1, r3
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f7fd fe31 	bl	8007f88 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	895b      	ldrh	r3, [r3, #10]
 800a32c:	8a3a      	ldrh	r2, [r7, #16]
 800a32e:	429a      	cmp	r2, r3
 800a330:	f200 836e 	bhi.w	800aa10 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	4a64      	ldr	r2, [pc, #400]	@ (800a4cc <tcp_input+0x298>)
 800a33c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	8a3a      	ldrh	r2, [r7, #16]
 800a344:	4611      	mov	r1, r2
 800a346:	4618      	mov	r0, r3
 800a348:	f7fd fe1e 	bl	8007f88 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	891a      	ldrh	r2, [r3, #8]
 800a350:	8a3b      	ldrh	r3, [r7, #16]
 800a352:	1ad3      	subs	r3, r2, r3
 800a354:	b29a      	uxth	r2, r3
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	895b      	ldrh	r3, [r3, #10]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d005      	beq.n	800a36e <tcp_input+0x13a>
 800a362:	4b54      	ldr	r3, [pc, #336]	@ (800a4b4 <tcp_input+0x280>)
 800a364:	22df      	movs	r2, #223	@ 0xdf
 800a366:	495c      	ldr	r1, [pc, #368]	@ (800a4d8 <tcp_input+0x2a4>)
 800a368:	4854      	ldr	r0, [pc, #336]	@ (800a4bc <tcp_input+0x288>)
 800a36a:	f007 f841 	bl	80113f0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	891a      	ldrh	r2, [r3, #8]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	891b      	ldrh	r3, [r3, #8]
 800a378:	429a      	cmp	r2, r3
 800a37a:	d005      	beq.n	800a388 <tcp_input+0x154>
 800a37c:	4b4d      	ldr	r3, [pc, #308]	@ (800a4b4 <tcp_input+0x280>)
 800a37e:	22e0      	movs	r2, #224	@ 0xe0
 800a380:	4956      	ldr	r1, [pc, #344]	@ (800a4dc <tcp_input+0x2a8>)
 800a382:	484e      	ldr	r0, [pc, #312]	@ (800a4bc <tcp_input+0x288>)
 800a384:	f007 f834 	bl	80113f0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a388:	4b4d      	ldr	r3, [pc, #308]	@ (800a4c0 <tcp_input+0x28c>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	881b      	ldrh	r3, [r3, #0]
 800a38e:	b29b      	uxth	r3, r3
 800a390:	4a4b      	ldr	r2, [pc, #300]	@ (800a4c0 <tcp_input+0x28c>)
 800a392:	6814      	ldr	r4, [r2, #0]
 800a394:	4618      	mov	r0, r3
 800a396:	f7fc faed 	bl	8006974 <lwip_htons>
 800a39a:	4603      	mov	r3, r0
 800a39c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a39e:	4b48      	ldr	r3, [pc, #288]	@ (800a4c0 <tcp_input+0x28c>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	885b      	ldrh	r3, [r3, #2]
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	4a46      	ldr	r2, [pc, #280]	@ (800a4c0 <tcp_input+0x28c>)
 800a3a8:	6814      	ldr	r4, [r2, #0]
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f7fc fae2 	bl	8006974 <lwip_htons>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a3b4:	4b42      	ldr	r3, [pc, #264]	@ (800a4c0 <tcp_input+0x28c>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	4a41      	ldr	r2, [pc, #260]	@ (800a4c0 <tcp_input+0x28c>)
 800a3bc:	6814      	ldr	r4, [r2, #0]
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7fc faee 	bl	80069a0 <lwip_htonl>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	6063      	str	r3, [r4, #4]
 800a3c8:	6863      	ldr	r3, [r4, #4]
 800a3ca:	4a45      	ldr	r2, [pc, #276]	@ (800a4e0 <tcp_input+0x2ac>)
 800a3cc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a3ce:	4b3c      	ldr	r3, [pc, #240]	@ (800a4c0 <tcp_input+0x28c>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	4a3a      	ldr	r2, [pc, #232]	@ (800a4c0 <tcp_input+0x28c>)
 800a3d6:	6814      	ldr	r4, [r2, #0]
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7fc fae1 	bl	80069a0 <lwip_htonl>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	60a3      	str	r3, [r4, #8]
 800a3e2:	68a3      	ldr	r3, [r4, #8]
 800a3e4:	4a3f      	ldr	r2, [pc, #252]	@ (800a4e4 <tcp_input+0x2b0>)
 800a3e6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a3e8:	4b35      	ldr	r3, [pc, #212]	@ (800a4c0 <tcp_input+0x28c>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	89db      	ldrh	r3, [r3, #14]
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	4a33      	ldr	r2, [pc, #204]	@ (800a4c0 <tcp_input+0x28c>)
 800a3f2:	6814      	ldr	r4, [r2, #0]
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f7fc fabd 	bl	8006974 <lwip_htons>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800a3fe:	4b30      	ldr	r3, [pc, #192]	@ (800a4c0 <tcp_input+0x28c>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	899b      	ldrh	r3, [r3, #12]
 800a404:	b29b      	uxth	r3, r3
 800a406:	4618      	mov	r0, r3
 800a408:	f7fc fab4 	bl	8006974 <lwip_htons>
 800a40c:	4603      	mov	r3, r0
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a414:	b2da      	uxtb	r2, r3
 800a416:	4b34      	ldr	r3, [pc, #208]	@ (800a4e8 <tcp_input+0x2b4>)
 800a418:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	891a      	ldrh	r2, [r3, #8]
 800a41e:	4b33      	ldr	r3, [pc, #204]	@ (800a4ec <tcp_input+0x2b8>)
 800a420:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a422:	4b31      	ldr	r3, [pc, #196]	@ (800a4e8 <tcp_input+0x2b4>)
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	f003 0303 	and.w	r3, r3, #3
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d00c      	beq.n	800a448 <tcp_input+0x214>
    tcplen++;
 800a42e:	4b2f      	ldr	r3, [pc, #188]	@ (800a4ec <tcp_input+0x2b8>)
 800a430:	881b      	ldrh	r3, [r3, #0]
 800a432:	3301      	adds	r3, #1
 800a434:	b29a      	uxth	r2, r3
 800a436:	4b2d      	ldr	r3, [pc, #180]	@ (800a4ec <tcp_input+0x2b8>)
 800a438:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	891a      	ldrh	r2, [r3, #8]
 800a43e:	4b2b      	ldr	r3, [pc, #172]	@ (800a4ec <tcp_input+0x2b8>)
 800a440:	881b      	ldrh	r3, [r3, #0]
 800a442:	429a      	cmp	r2, r3
 800a444:	f200 82e6 	bhi.w	800aa14 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800a448:	2300      	movs	r3, #0
 800a44a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a44c:	4b28      	ldr	r3, [pc, #160]	@ (800a4f0 <tcp_input+0x2bc>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	61fb      	str	r3, [r7, #28]
 800a452:	e09d      	b.n	800a590 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a454:	69fb      	ldr	r3, [r7, #28]
 800a456:	7d1b      	ldrb	r3, [r3, #20]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d105      	bne.n	800a468 <tcp_input+0x234>
 800a45c:	4b15      	ldr	r3, [pc, #84]	@ (800a4b4 <tcp_input+0x280>)
 800a45e:	22fb      	movs	r2, #251	@ 0xfb
 800a460:	4924      	ldr	r1, [pc, #144]	@ (800a4f4 <tcp_input+0x2c0>)
 800a462:	4816      	ldr	r0, [pc, #88]	@ (800a4bc <tcp_input+0x288>)
 800a464:	f006 ffc4 	bl	80113f0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	7d1b      	ldrb	r3, [r3, #20]
 800a46c:	2b0a      	cmp	r3, #10
 800a46e:	d105      	bne.n	800a47c <tcp_input+0x248>
 800a470:	4b10      	ldr	r3, [pc, #64]	@ (800a4b4 <tcp_input+0x280>)
 800a472:	22fc      	movs	r2, #252	@ 0xfc
 800a474:	4920      	ldr	r1, [pc, #128]	@ (800a4f8 <tcp_input+0x2c4>)
 800a476:	4811      	ldr	r0, [pc, #68]	@ (800a4bc <tcp_input+0x288>)
 800a478:	f006 ffba 	bl	80113f0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a47c:	69fb      	ldr	r3, [r7, #28]
 800a47e:	7d1b      	ldrb	r3, [r3, #20]
 800a480:	2b01      	cmp	r3, #1
 800a482:	d105      	bne.n	800a490 <tcp_input+0x25c>
 800a484:	4b0b      	ldr	r3, [pc, #44]	@ (800a4b4 <tcp_input+0x280>)
 800a486:	22fd      	movs	r2, #253	@ 0xfd
 800a488:	491c      	ldr	r1, [pc, #112]	@ (800a4fc <tcp_input+0x2c8>)
 800a48a:	480c      	ldr	r0, [pc, #48]	@ (800a4bc <tcp_input+0x288>)
 800a48c:	f006 ffb0 	bl	80113f0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a490:	69fb      	ldr	r3, [r7, #28]
 800a492:	7a1b      	ldrb	r3, [r3, #8]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d033      	beq.n	800a500 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	7a1a      	ldrb	r2, [r3, #8]
 800a49c:	4b09      	ldr	r3, [pc, #36]	@ (800a4c4 <tcp_input+0x290>)
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d029      	beq.n	800a500 <tcp_input+0x2cc>
      prev = pcb;
 800a4ac:	69fb      	ldr	r3, [r7, #28]
 800a4ae:	61bb      	str	r3, [r7, #24]
      continue;
 800a4b0:	e06b      	b.n	800a58a <tcp_input+0x356>
 800a4b2:	bf00      	nop
 800a4b4:	08013708 	.word	0x08013708
 800a4b8:	0801373c 	.word	0x0801373c
 800a4bc:	08013754 	.word	0x08013754
 800a4c0:	200085d0 	.word	0x200085d0
 800a4c4:	2000568c 	.word	0x2000568c
 800a4c8:	200085d4 	.word	0x200085d4
 800a4cc:	200085d8 	.word	0x200085d8
 800a4d0:	200085d6 	.word	0x200085d6
 800a4d4:	0801377c 	.word	0x0801377c
 800a4d8:	0801378c 	.word	0x0801378c
 800a4dc:	08013798 	.word	0x08013798
 800a4e0:	200085e0 	.word	0x200085e0
 800a4e4:	200085e4 	.word	0x200085e4
 800a4e8:	200085ec 	.word	0x200085ec
 800a4ec:	200085ea 	.word	0x200085ea
 800a4f0:	200085b4 	.word	0x200085b4
 800a4f4:	080137b8 	.word	0x080137b8
 800a4f8:	080137e0 	.word	0x080137e0
 800a4fc:	0801380c 	.word	0x0801380c
    }

    if (pcb->remote_port == tcphdr->src &&
 800a500:	69fb      	ldr	r3, [r7, #28]
 800a502:	8b1a      	ldrh	r2, [r3, #24]
 800a504:	4b72      	ldr	r3, [pc, #456]	@ (800a6d0 <tcp_input+0x49c>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	881b      	ldrh	r3, [r3, #0]
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d13a      	bne.n	800a586 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800a510:	69fb      	ldr	r3, [r7, #28]
 800a512:	8ada      	ldrh	r2, [r3, #22]
 800a514:	4b6e      	ldr	r3, [pc, #440]	@ (800a6d0 <tcp_input+0x49c>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	885b      	ldrh	r3, [r3, #2]
 800a51a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d132      	bne.n	800a586 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a520:	69fb      	ldr	r3, [r7, #28]
 800a522:	685a      	ldr	r2, [r3, #4]
 800a524:	4b6b      	ldr	r3, [pc, #428]	@ (800a6d4 <tcp_input+0x4a0>)
 800a526:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800a528:	429a      	cmp	r2, r3
 800a52a:	d12c      	bne.n	800a586 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a52c:	69fb      	ldr	r3, [r7, #28]
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	4b68      	ldr	r3, [pc, #416]	@ (800a6d4 <tcp_input+0x4a0>)
 800a532:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a534:	429a      	cmp	r2, r3
 800a536:	d126      	bne.n	800a586 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	69fa      	ldr	r2, [r7, #28]
 800a53e:	429a      	cmp	r2, r3
 800a540:	d106      	bne.n	800a550 <tcp_input+0x31c>
 800a542:	4b65      	ldr	r3, [pc, #404]	@ (800a6d8 <tcp_input+0x4a4>)
 800a544:	f240 120d 	movw	r2, #269	@ 0x10d
 800a548:	4964      	ldr	r1, [pc, #400]	@ (800a6dc <tcp_input+0x4a8>)
 800a54a:	4865      	ldr	r0, [pc, #404]	@ (800a6e0 <tcp_input+0x4ac>)
 800a54c:	f006 ff50 	bl	80113f0 <iprintf>
      if (prev != NULL) {
 800a550:	69bb      	ldr	r3, [r7, #24]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d00a      	beq.n	800a56c <tcp_input+0x338>
        prev->next = pcb->next;
 800a556:	69fb      	ldr	r3, [r7, #28]
 800a558:	68da      	ldr	r2, [r3, #12]
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800a55e:	4b61      	ldr	r3, [pc, #388]	@ (800a6e4 <tcp_input+0x4b0>)
 800a560:	681a      	ldr	r2, [r3, #0]
 800a562:	69fb      	ldr	r3, [r7, #28]
 800a564:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800a566:	4a5f      	ldr	r2, [pc, #380]	@ (800a6e4 <tcp_input+0x4b0>)
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a56c:	69fb      	ldr	r3, [r7, #28]
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	69fa      	ldr	r2, [r7, #28]
 800a572:	429a      	cmp	r2, r3
 800a574:	d111      	bne.n	800a59a <tcp_input+0x366>
 800a576:	4b58      	ldr	r3, [pc, #352]	@ (800a6d8 <tcp_input+0x4a4>)
 800a578:	f240 1215 	movw	r2, #277	@ 0x115
 800a57c:	495a      	ldr	r1, [pc, #360]	@ (800a6e8 <tcp_input+0x4b4>)
 800a57e:	4858      	ldr	r0, [pc, #352]	@ (800a6e0 <tcp_input+0x4ac>)
 800a580:	f006 ff36 	bl	80113f0 <iprintf>
      break;
 800a584:	e009      	b.n	800a59a <tcp_input+0x366>
    }
    prev = pcb;
 800a586:	69fb      	ldr	r3, [r7, #28]
 800a588:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a58a:	69fb      	ldr	r3, [r7, #28]
 800a58c:	68db      	ldr	r3, [r3, #12]
 800a58e:	61fb      	str	r3, [r7, #28]
 800a590:	69fb      	ldr	r3, [r7, #28]
 800a592:	2b00      	cmp	r3, #0
 800a594:	f47f af5e 	bne.w	800a454 <tcp_input+0x220>
 800a598:	e000      	b.n	800a59c <tcp_input+0x368>
      break;
 800a59a:	bf00      	nop
  }

  if (pcb == NULL) {
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	f040 80aa 	bne.w	800a6f8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a5a4:	4b51      	ldr	r3, [pc, #324]	@ (800a6ec <tcp_input+0x4b8>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	61fb      	str	r3, [r7, #28]
 800a5aa:	e03f      	b.n	800a62c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a5ac:	69fb      	ldr	r3, [r7, #28]
 800a5ae:	7d1b      	ldrb	r3, [r3, #20]
 800a5b0:	2b0a      	cmp	r3, #10
 800a5b2:	d006      	beq.n	800a5c2 <tcp_input+0x38e>
 800a5b4:	4b48      	ldr	r3, [pc, #288]	@ (800a6d8 <tcp_input+0x4a4>)
 800a5b6:	f240 121f 	movw	r2, #287	@ 0x11f
 800a5ba:	494d      	ldr	r1, [pc, #308]	@ (800a6f0 <tcp_input+0x4bc>)
 800a5bc:	4848      	ldr	r0, [pc, #288]	@ (800a6e0 <tcp_input+0x4ac>)
 800a5be:	f006 ff17 	bl	80113f0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a5c2:	69fb      	ldr	r3, [r7, #28]
 800a5c4:	7a1b      	ldrb	r3, [r3, #8]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d009      	beq.n	800a5de <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a5ca:	69fb      	ldr	r3, [r7, #28]
 800a5cc:	7a1a      	ldrb	r2, [r3, #8]
 800a5ce:	4b41      	ldr	r3, [pc, #260]	@ (800a6d4 <tcp_input+0x4a0>)
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a5d6:	3301      	adds	r3, #1
 800a5d8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d122      	bne.n	800a624 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800a5de:	69fb      	ldr	r3, [r7, #28]
 800a5e0:	8b1a      	ldrh	r2, [r3, #24]
 800a5e2:	4b3b      	ldr	r3, [pc, #236]	@ (800a6d0 <tcp_input+0x49c>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	881b      	ldrh	r3, [r3, #0]
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d11b      	bne.n	800a626 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800a5ee:	69fb      	ldr	r3, [r7, #28]
 800a5f0:	8ada      	ldrh	r2, [r3, #22]
 800a5f2:	4b37      	ldr	r3, [pc, #220]	@ (800a6d0 <tcp_input+0x49c>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	885b      	ldrh	r3, [r3, #2]
 800a5f8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d113      	bne.n	800a626 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	685a      	ldr	r2, [r3, #4]
 800a602:	4b34      	ldr	r3, [pc, #208]	@ (800a6d4 <tcp_input+0x4a0>)
 800a604:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800a606:	429a      	cmp	r2, r3
 800a608:	d10d      	bne.n	800a626 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a60a:	69fb      	ldr	r3, [r7, #28]
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	4b31      	ldr	r3, [pc, #196]	@ (800a6d4 <tcp_input+0x4a0>)
 800a610:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a612:	429a      	cmp	r2, r3
 800a614:	d107      	bne.n	800a626 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800a616:	69f8      	ldr	r0, [r7, #28]
 800a618:	f000 fb56 	bl	800acc8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f7fd fd39 	bl	8008094 <pbuf_free>
        return;
 800a622:	e1fd      	b.n	800aa20 <tcp_input+0x7ec>
        continue;
 800a624:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a626:	69fb      	ldr	r3, [r7, #28]
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	61fb      	str	r3, [r7, #28]
 800a62c:	69fb      	ldr	r3, [r7, #28]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d1bc      	bne.n	800a5ac <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800a632:	2300      	movs	r3, #0
 800a634:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a636:	4b2f      	ldr	r3, [pc, #188]	@ (800a6f4 <tcp_input+0x4c0>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	617b      	str	r3, [r7, #20]
 800a63c:	e02a      	b.n	800a694 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	7a1b      	ldrb	r3, [r3, #8]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00c      	beq.n	800a660 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	7a1a      	ldrb	r2, [r3, #8]
 800a64a:	4b22      	ldr	r3, [pc, #136]	@ (800a6d4 <tcp_input+0x4a0>)
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a652:	3301      	adds	r3, #1
 800a654:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a656:	429a      	cmp	r2, r3
 800a658:	d002      	beq.n	800a660 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	61bb      	str	r3, [r7, #24]
        continue;
 800a65e:	e016      	b.n	800a68e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	8ada      	ldrh	r2, [r3, #22]
 800a664:	4b1a      	ldr	r3, [pc, #104]	@ (800a6d0 <tcp_input+0x49c>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	885b      	ldrh	r3, [r3, #2]
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d10c      	bne.n	800a68a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	681a      	ldr	r2, [r3, #0]
 800a674:	4b17      	ldr	r3, [pc, #92]	@ (800a6d4 <tcp_input+0x4a0>)
 800a676:	695b      	ldr	r3, [r3, #20]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d00f      	beq.n	800a69c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d00d      	beq.n	800a69e <tcp_input+0x46a>
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d009      	beq.n	800a69e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	68db      	ldr	r3, [r3, #12]
 800a692:	617b      	str	r3, [r7, #20]
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d1d1      	bne.n	800a63e <tcp_input+0x40a>
 800a69a:	e000      	b.n	800a69e <tcp_input+0x46a>
            break;
 800a69c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d029      	beq.n	800a6f8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800a6a4:	69bb      	ldr	r3, [r7, #24]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d00a      	beq.n	800a6c0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	68da      	ldr	r2, [r3, #12]
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a6b2:	4b10      	ldr	r3, [pc, #64]	@ (800a6f4 <tcp_input+0x4c0>)
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a6ba:	4a0e      	ldr	r2, [pc, #56]	@ (800a6f4 <tcp_input+0x4c0>)
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800a6c0:	6978      	ldr	r0, [r7, #20]
 800a6c2:	f000 fa03 	bl	800aacc <tcp_listen_input>
      }
      pbuf_free(p);
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f7fd fce4 	bl	8008094 <pbuf_free>
      return;
 800a6cc:	e1a8      	b.n	800aa20 <tcp_input+0x7ec>
 800a6ce:	bf00      	nop
 800a6d0:	200085d0 	.word	0x200085d0
 800a6d4:	2000568c 	.word	0x2000568c
 800a6d8:	08013708 	.word	0x08013708
 800a6dc:	08013834 	.word	0x08013834
 800a6e0:	08013754 	.word	0x08013754
 800a6e4:	200085b4 	.word	0x200085b4
 800a6e8:	08013860 	.word	0x08013860
 800a6ec:	200085b8 	.word	0x200085b8
 800a6f0:	0801388c 	.word	0x0801388c
 800a6f4:	200085b0 	.word	0x200085b0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800a6f8:	69fb      	ldr	r3, [r7, #28]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f000 8158 	beq.w	800a9b0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800a700:	4b95      	ldr	r3, [pc, #596]	@ (800a958 <tcp_input+0x724>)
 800a702:	2200      	movs	r2, #0
 800a704:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	891a      	ldrh	r2, [r3, #8]
 800a70a:	4b93      	ldr	r3, [pc, #588]	@ (800a958 <tcp_input+0x724>)
 800a70c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800a70e:	4a92      	ldr	r2, [pc, #584]	@ (800a958 <tcp_input+0x724>)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a714:	4b91      	ldr	r3, [pc, #580]	@ (800a95c <tcp_input+0x728>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a8f      	ldr	r2, [pc, #572]	@ (800a958 <tcp_input+0x724>)
 800a71a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800a71c:	4b90      	ldr	r3, [pc, #576]	@ (800a960 <tcp_input+0x72c>)
 800a71e:	2200      	movs	r2, #0
 800a720:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800a722:	4b90      	ldr	r3, [pc, #576]	@ (800a964 <tcp_input+0x730>)
 800a724:	2200      	movs	r2, #0
 800a726:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800a728:	4b8f      	ldr	r3, [pc, #572]	@ (800a968 <tcp_input+0x734>)
 800a72a:	2200      	movs	r2, #0
 800a72c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800a72e:	4b8f      	ldr	r3, [pc, #572]	@ (800a96c <tcp_input+0x738>)
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	f003 0308 	and.w	r3, r3, #8
 800a736:	2b00      	cmp	r3, #0
 800a738:	d006      	beq.n	800a748 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	7b5b      	ldrb	r3, [r3, #13]
 800a73e:	f043 0301 	orr.w	r3, r3, #1
 800a742:	b2da      	uxtb	r2, r3
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d017      	beq.n	800a780 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a750:	69f8      	ldr	r0, [r7, #28]
 800a752:	f7ff f83d 	bl	80097d0 <tcp_process_refused_data>
 800a756:	4603      	mov	r3, r0
 800a758:	f113 0f0d 	cmn.w	r3, #13
 800a75c:	d007      	beq.n	800a76e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a762:	2b00      	cmp	r3, #0
 800a764:	d00c      	beq.n	800a780 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a766:	4b82      	ldr	r3, [pc, #520]	@ (800a970 <tcp_input+0x73c>)
 800a768:	881b      	ldrh	r3, [r3, #0]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d008      	beq.n	800a780 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800a76e:	69fb      	ldr	r3, [r7, #28]
 800a770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a772:	2b00      	cmp	r3, #0
 800a774:	f040 80e3 	bne.w	800a93e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800a778:	69f8      	ldr	r0, [r7, #28]
 800a77a:	f003 fdff 	bl	800e37c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800a77e:	e0de      	b.n	800a93e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800a780:	4a7c      	ldr	r2, [pc, #496]	@ (800a974 <tcp_input+0x740>)
 800a782:	69fb      	ldr	r3, [r7, #28]
 800a784:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800a786:	69f8      	ldr	r0, [r7, #28]
 800a788:	f000 fb18 	bl	800adbc <tcp_process>
 800a78c:	4603      	mov	r3, r0
 800a78e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800a790:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a794:	f113 0f0d 	cmn.w	r3, #13
 800a798:	f000 80d3 	beq.w	800a942 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800a79c:	4b71      	ldr	r3, [pc, #452]	@ (800a964 <tcp_input+0x730>)
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	f003 0308 	and.w	r3, r3, #8
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d015      	beq.n	800a7d4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a7a8:	69fb      	ldr	r3, [r7, #28]
 800a7aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d008      	beq.n	800a7c4 <tcp_input+0x590>
 800a7b2:	69fb      	ldr	r3, [r7, #28]
 800a7b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7b8:	69fa      	ldr	r2, [r7, #28]
 800a7ba:	6912      	ldr	r2, [r2, #16]
 800a7bc:	f06f 010d 	mvn.w	r1, #13
 800a7c0:	4610      	mov	r0, r2
 800a7c2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a7c4:	69f9      	ldr	r1, [r7, #28]
 800a7c6:	486c      	ldr	r0, [pc, #432]	@ (800a978 <tcp_input+0x744>)
 800a7c8:	f7ff fbbc 	bl	8009f44 <tcp_pcb_remove>
        tcp_free(pcb);
 800a7cc:	69f8      	ldr	r0, [r7, #28]
 800a7ce:	f7fd ff01 	bl	80085d4 <tcp_free>
 800a7d2:	e0da      	b.n	800a98a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800a7d8:	4b63      	ldr	r3, [pc, #396]	@ (800a968 <tcp_input+0x734>)
 800a7da:	881b      	ldrh	r3, [r3, #0]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d01d      	beq.n	800a81c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800a7e0:	4b61      	ldr	r3, [pc, #388]	@ (800a968 <tcp_input+0x734>)
 800a7e2:	881b      	ldrh	r3, [r3, #0]
 800a7e4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a7e6:	69fb      	ldr	r3, [r7, #28]
 800a7e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d00a      	beq.n	800a806 <tcp_input+0x5d2>
 800a7f0:	69fb      	ldr	r3, [r7, #28]
 800a7f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7f6:	69fa      	ldr	r2, [r7, #28]
 800a7f8:	6910      	ldr	r0, [r2, #16]
 800a7fa:	89fa      	ldrh	r2, [r7, #14]
 800a7fc:	69f9      	ldr	r1, [r7, #28]
 800a7fe:	4798      	blx	r3
 800a800:	4603      	mov	r3, r0
 800a802:	74fb      	strb	r3, [r7, #19]
 800a804:	e001      	b.n	800a80a <tcp_input+0x5d6>
 800a806:	2300      	movs	r3, #0
 800a808:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a80a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a80e:	f113 0f0d 	cmn.w	r3, #13
 800a812:	f000 8098 	beq.w	800a946 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800a816:	4b54      	ldr	r3, [pc, #336]	@ (800a968 <tcp_input+0x734>)
 800a818:	2200      	movs	r2, #0
 800a81a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800a81c:	69f8      	ldr	r0, [r7, #28]
 800a81e:	f000 f915 	bl	800aa4c <tcp_input_delayed_close>
 800a822:	4603      	mov	r3, r0
 800a824:	2b00      	cmp	r3, #0
 800a826:	f040 8090 	bne.w	800a94a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800a82a:	4b4d      	ldr	r3, [pc, #308]	@ (800a960 <tcp_input+0x72c>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d041      	beq.n	800a8b6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a832:	69fb      	ldr	r3, [r7, #28]
 800a834:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a836:	2b00      	cmp	r3, #0
 800a838:	d006      	beq.n	800a848 <tcp_input+0x614>
 800a83a:	4b50      	ldr	r3, [pc, #320]	@ (800a97c <tcp_input+0x748>)
 800a83c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800a840:	494f      	ldr	r1, [pc, #316]	@ (800a980 <tcp_input+0x74c>)
 800a842:	4850      	ldr	r0, [pc, #320]	@ (800a984 <tcp_input+0x750>)
 800a844:	f006 fdd4 	bl	80113f0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a848:	69fb      	ldr	r3, [r7, #28]
 800a84a:	8b5b      	ldrh	r3, [r3, #26]
 800a84c:	f003 0310 	and.w	r3, r3, #16
 800a850:	2b00      	cmp	r3, #0
 800a852:	d008      	beq.n	800a866 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800a854:	4b42      	ldr	r3, [pc, #264]	@ (800a960 <tcp_input+0x72c>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4618      	mov	r0, r3
 800a85a:	f7fd fc1b 	bl	8008094 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800a85e:	69f8      	ldr	r0, [r7, #28]
 800a860:	f7fe f9a0 	bl	8008ba4 <tcp_abort>
            goto aborted;
 800a864:	e091      	b.n	800a98a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a866:	69fb      	ldr	r3, [r7, #28]
 800a868:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d00c      	beq.n	800a88a <tcp_input+0x656>
 800a870:	69fb      	ldr	r3, [r7, #28]
 800a872:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800a876:	69fb      	ldr	r3, [r7, #28]
 800a878:	6918      	ldr	r0, [r3, #16]
 800a87a:	4b39      	ldr	r3, [pc, #228]	@ (800a960 <tcp_input+0x72c>)
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	2300      	movs	r3, #0
 800a880:	69f9      	ldr	r1, [r7, #28]
 800a882:	47a0      	blx	r4
 800a884:	4603      	mov	r3, r0
 800a886:	74fb      	strb	r3, [r7, #19]
 800a888:	e008      	b.n	800a89c <tcp_input+0x668>
 800a88a:	4b35      	ldr	r3, [pc, #212]	@ (800a960 <tcp_input+0x72c>)
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	2300      	movs	r3, #0
 800a890:	69f9      	ldr	r1, [r7, #28]
 800a892:	2000      	movs	r0, #0
 800a894:	f7ff f890 	bl	80099b8 <tcp_recv_null>
 800a898:	4603      	mov	r3, r0
 800a89a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800a89c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a8a0:	f113 0f0d 	cmn.w	r3, #13
 800a8a4:	d053      	beq.n	800a94e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800a8a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d003      	beq.n	800a8b6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800a8ae:	4b2c      	ldr	r3, [pc, #176]	@ (800a960 <tcp_input+0x72c>)
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800a8b6:	4b2b      	ldr	r3, [pc, #172]	@ (800a964 <tcp_input+0x730>)
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	f003 0320 	and.w	r3, r3, #32
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d030      	beq.n	800a924 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800a8c2:	69fb      	ldr	r3, [r7, #28]
 800a8c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d009      	beq.n	800a8de <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800a8ca:	69fb      	ldr	r3, [r7, #28]
 800a8cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a8ce:	7b5a      	ldrb	r2, [r3, #13]
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a8d4:	f042 0220 	orr.w	r2, r2, #32
 800a8d8:	b2d2      	uxtb	r2, r2
 800a8da:	735a      	strb	r2, [r3, #13]
 800a8dc:	e022      	b.n	800a924 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a8de:	69fb      	ldr	r3, [r7, #28]
 800a8e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8e2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800a8e6:	d005      	beq.n	800a8f4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800a8e8:	69fb      	ldr	r3, [r7, #28]
 800a8ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	b29a      	uxth	r2, r3
 800a8f0:	69fb      	ldr	r3, [r7, #28]
 800a8f2:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800a8f4:	69fb      	ldr	r3, [r7, #28]
 800a8f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00b      	beq.n	800a916 <tcp_input+0x6e2>
 800a8fe:	69fb      	ldr	r3, [r7, #28]
 800a900:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800a904:	69fb      	ldr	r3, [r7, #28]
 800a906:	6918      	ldr	r0, [r3, #16]
 800a908:	2300      	movs	r3, #0
 800a90a:	2200      	movs	r2, #0
 800a90c:	69f9      	ldr	r1, [r7, #28]
 800a90e:	47a0      	blx	r4
 800a910:	4603      	mov	r3, r0
 800a912:	74fb      	strb	r3, [r7, #19]
 800a914:	e001      	b.n	800a91a <tcp_input+0x6e6>
 800a916:	2300      	movs	r3, #0
 800a918:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800a91a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a91e:	f113 0f0d 	cmn.w	r3, #13
 800a922:	d016      	beq.n	800a952 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800a924:	4b13      	ldr	r3, [pc, #76]	@ (800a974 <tcp_input+0x740>)
 800a926:	2200      	movs	r2, #0
 800a928:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800a92a:	69f8      	ldr	r0, [r7, #28]
 800a92c:	f000 f88e 	bl	800aa4c <tcp_input_delayed_close>
 800a930:	4603      	mov	r3, r0
 800a932:	2b00      	cmp	r3, #0
 800a934:	d128      	bne.n	800a988 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800a936:	69f8      	ldr	r0, [r7, #28]
 800a938:	f002 ff1a 	bl	800d770 <tcp_output>
 800a93c:	e025      	b.n	800a98a <tcp_input+0x756>
        goto aborted;
 800a93e:	bf00      	nop
 800a940:	e023      	b.n	800a98a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800a942:	bf00      	nop
 800a944:	e021      	b.n	800a98a <tcp_input+0x756>
              goto aborted;
 800a946:	bf00      	nop
 800a948:	e01f      	b.n	800a98a <tcp_input+0x756>
          goto aborted;
 800a94a:	bf00      	nop
 800a94c:	e01d      	b.n	800a98a <tcp_input+0x756>
            goto aborted;
 800a94e:	bf00      	nop
 800a950:	e01b      	b.n	800a98a <tcp_input+0x756>
              goto aborted;
 800a952:	bf00      	nop
 800a954:	e019      	b.n	800a98a <tcp_input+0x756>
 800a956:	bf00      	nop
 800a958:	200085c0 	.word	0x200085c0
 800a95c:	200085d0 	.word	0x200085d0
 800a960:	200085f0 	.word	0x200085f0
 800a964:	200085ed 	.word	0x200085ed
 800a968:	200085e8 	.word	0x200085e8
 800a96c:	200085ec 	.word	0x200085ec
 800a970:	200085ea 	.word	0x200085ea
 800a974:	200085f4 	.word	0x200085f4
 800a978:	200085b4 	.word	0x200085b4
 800a97c:	08013708 	.word	0x08013708
 800a980:	080138bc 	.word	0x080138bc
 800a984:	08013754 	.word	0x08013754
          goto aborted;
 800a988:	bf00      	nop
    tcp_input_pcb = NULL;
 800a98a:	4b27      	ldr	r3, [pc, #156]	@ (800aa28 <tcp_input+0x7f4>)
 800a98c:	2200      	movs	r2, #0
 800a98e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800a990:	4b26      	ldr	r3, [pc, #152]	@ (800aa2c <tcp_input+0x7f8>)
 800a992:	2200      	movs	r2, #0
 800a994:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800a996:	4b26      	ldr	r3, [pc, #152]	@ (800aa30 <tcp_input+0x7fc>)
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d03f      	beq.n	800aa1e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800a99e:	4b24      	ldr	r3, [pc, #144]	@ (800aa30 <tcp_input+0x7fc>)
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f7fd fb76 	bl	8008094 <pbuf_free>
      inseg.p = NULL;
 800a9a8:	4b21      	ldr	r3, [pc, #132]	@ (800aa30 <tcp_input+0x7fc>)
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800a9ae:	e036      	b.n	800aa1e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a9b0:	4b20      	ldr	r3, [pc, #128]	@ (800aa34 <tcp_input+0x800>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	899b      	ldrh	r3, [r3, #12]
 800a9b6:	b29b      	uxth	r3, r3
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7fb ffdb 	bl	8006974 <lwip_htons>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	f003 0304 	and.w	r3, r3, #4
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d118      	bne.n	800a9fc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9ca:	4b1b      	ldr	r3, [pc, #108]	@ (800aa38 <tcp_input+0x804>)
 800a9cc:	6819      	ldr	r1, [r3, #0]
 800a9ce:	4b1b      	ldr	r3, [pc, #108]	@ (800aa3c <tcp_input+0x808>)
 800a9d0:	881b      	ldrh	r3, [r3, #0]
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	4b1a      	ldr	r3, [pc, #104]	@ (800aa40 <tcp_input+0x80c>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a9da:	4b16      	ldr	r3, [pc, #88]	@ (800aa34 <tcp_input+0x800>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9de:	885b      	ldrh	r3, [r3, #2]
 800a9e0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a9e2:	4a14      	ldr	r2, [pc, #80]	@ (800aa34 <tcp_input+0x800>)
 800a9e4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a9e6:	8812      	ldrh	r2, [r2, #0]
 800a9e8:	b292      	uxth	r2, r2
 800a9ea:	9202      	str	r2, [sp, #8]
 800a9ec:	9301      	str	r3, [sp, #4]
 800a9ee:	4b15      	ldr	r3, [pc, #84]	@ (800aa44 <tcp_input+0x810>)
 800a9f0:	9300      	str	r3, [sp, #0]
 800a9f2:	4b15      	ldr	r3, [pc, #84]	@ (800aa48 <tcp_input+0x814>)
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	2000      	movs	r0, #0
 800a9f8:	f003 fc6e 	bl	800e2d8 <tcp_rst>
    pbuf_free(p);
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f7fd fb49 	bl	8008094 <pbuf_free>
  return;
 800aa02:	e00c      	b.n	800aa1e <tcp_input+0x7ea>
    goto dropped;
 800aa04:	bf00      	nop
 800aa06:	e006      	b.n	800aa16 <tcp_input+0x7e2>
    goto dropped;
 800aa08:	bf00      	nop
 800aa0a:	e004      	b.n	800aa16 <tcp_input+0x7e2>
    goto dropped;
 800aa0c:	bf00      	nop
 800aa0e:	e002      	b.n	800aa16 <tcp_input+0x7e2>
      goto dropped;
 800aa10:	bf00      	nop
 800aa12:	e000      	b.n	800aa16 <tcp_input+0x7e2>
      goto dropped;
 800aa14:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f7fd fb3c 	bl	8008094 <pbuf_free>
 800aa1c:	e000      	b.n	800aa20 <tcp_input+0x7ec>
  return;
 800aa1e:	bf00      	nop
}
 800aa20:	3724      	adds	r7, #36	@ 0x24
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd90      	pop	{r4, r7, pc}
 800aa26:	bf00      	nop
 800aa28:	200085f4 	.word	0x200085f4
 800aa2c:	200085f0 	.word	0x200085f0
 800aa30:	200085c0 	.word	0x200085c0
 800aa34:	200085d0 	.word	0x200085d0
 800aa38:	200085e4 	.word	0x200085e4
 800aa3c:	200085ea 	.word	0x200085ea
 800aa40:	200085e0 	.word	0x200085e0
 800aa44:	2000569c 	.word	0x2000569c
 800aa48:	200056a0 	.word	0x200056a0

0800aa4c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b082      	sub	sp, #8
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d106      	bne.n	800aa68 <tcp_input_delayed_close+0x1c>
 800aa5a:	4b17      	ldr	r3, [pc, #92]	@ (800aab8 <tcp_input_delayed_close+0x6c>)
 800aa5c:	f240 225a 	movw	r2, #602	@ 0x25a
 800aa60:	4916      	ldr	r1, [pc, #88]	@ (800aabc <tcp_input_delayed_close+0x70>)
 800aa62:	4817      	ldr	r0, [pc, #92]	@ (800aac0 <tcp_input_delayed_close+0x74>)
 800aa64:	f006 fcc4 	bl	80113f0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800aa68:	4b16      	ldr	r3, [pc, #88]	@ (800aac4 <tcp_input_delayed_close+0x78>)
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	f003 0310 	and.w	r3, r3, #16
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d01c      	beq.n	800aaae <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	8b5b      	ldrh	r3, [r3, #26]
 800aa78:	f003 0310 	and.w	r3, r3, #16
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d10d      	bne.n	800aa9c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d008      	beq.n	800aa9c <tcp_input_delayed_close+0x50>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	6912      	ldr	r2, [r2, #16]
 800aa94:	f06f 010e 	mvn.w	r1, #14
 800aa98:	4610      	mov	r0, r2
 800aa9a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800aa9c:	6879      	ldr	r1, [r7, #4]
 800aa9e:	480a      	ldr	r0, [pc, #40]	@ (800aac8 <tcp_input_delayed_close+0x7c>)
 800aaa0:	f7ff fa50 	bl	8009f44 <tcp_pcb_remove>
    tcp_free(pcb);
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f7fd fd95 	bl	80085d4 <tcp_free>
    return 1;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	e000      	b.n	800aab0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800aaae:	2300      	movs	r3, #0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3708      	adds	r7, #8
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}
 800aab8:	08013708 	.word	0x08013708
 800aabc:	080138d8 	.word	0x080138d8
 800aac0:	08013754 	.word	0x08013754
 800aac4:	200085ed 	.word	0x200085ed
 800aac8:	200085b4 	.word	0x200085b4

0800aacc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800aacc:	b590      	push	{r4, r7, lr}
 800aace:	b08b      	sub	sp, #44	@ 0x2c
 800aad0:	af04      	add	r7, sp, #16
 800aad2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800aad4:	4b6f      	ldr	r3, [pc, #444]	@ (800ac94 <tcp_listen_input+0x1c8>)
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	f003 0304 	and.w	r3, r3, #4
 800aadc:	2b00      	cmp	r3, #0
 800aade:	f040 80d2 	bne.w	800ac86 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d106      	bne.n	800aaf6 <tcp_listen_input+0x2a>
 800aae8:	4b6b      	ldr	r3, [pc, #428]	@ (800ac98 <tcp_listen_input+0x1cc>)
 800aaea:	f240 2281 	movw	r2, #641	@ 0x281
 800aaee:	496b      	ldr	r1, [pc, #428]	@ (800ac9c <tcp_listen_input+0x1d0>)
 800aaf0:	486b      	ldr	r0, [pc, #428]	@ (800aca0 <tcp_listen_input+0x1d4>)
 800aaf2:	f006 fc7d 	bl	80113f0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800aaf6:	4b67      	ldr	r3, [pc, #412]	@ (800ac94 <tcp_listen_input+0x1c8>)
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	f003 0310 	and.w	r3, r3, #16
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d019      	beq.n	800ab36 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab02:	4b68      	ldr	r3, [pc, #416]	@ (800aca4 <tcp_listen_input+0x1d8>)
 800ab04:	6819      	ldr	r1, [r3, #0]
 800ab06:	4b68      	ldr	r3, [pc, #416]	@ (800aca8 <tcp_listen_input+0x1dc>)
 800ab08:	881b      	ldrh	r3, [r3, #0]
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	4b67      	ldr	r3, [pc, #412]	@ (800acac <tcp_listen_input+0x1e0>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ab12:	4b67      	ldr	r3, [pc, #412]	@ (800acb0 <tcp_listen_input+0x1e4>)
 800ab14:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab16:	885b      	ldrh	r3, [r3, #2]
 800ab18:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ab1a:	4a65      	ldr	r2, [pc, #404]	@ (800acb0 <tcp_listen_input+0x1e4>)
 800ab1c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ab1e:	8812      	ldrh	r2, [r2, #0]
 800ab20:	b292      	uxth	r2, r2
 800ab22:	9202      	str	r2, [sp, #8]
 800ab24:	9301      	str	r3, [sp, #4]
 800ab26:	4b63      	ldr	r3, [pc, #396]	@ (800acb4 <tcp_listen_input+0x1e8>)
 800ab28:	9300      	str	r3, [sp, #0]
 800ab2a:	4b63      	ldr	r3, [pc, #396]	@ (800acb8 <tcp_listen_input+0x1ec>)
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f003 fbd2 	bl	800e2d8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ab34:	e0a9      	b.n	800ac8a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800ab36:	4b57      	ldr	r3, [pc, #348]	@ (800ac94 <tcp_listen_input+0x1c8>)
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	f003 0302 	and.w	r3, r3, #2
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f000 80a3 	beq.w	800ac8a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	7d5b      	ldrb	r3, [r3, #21]
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f7ff f859 	bl	8009c00 <tcp_alloc>
 800ab4e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d111      	bne.n	800ab7a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	699b      	ldr	r3, [r3, #24]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d00a      	beq.n	800ab74 <tcp_listen_input+0xa8>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	699b      	ldr	r3, [r3, #24]
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	6910      	ldr	r0, [r2, #16]
 800ab66:	f04f 32ff 	mov.w	r2, #4294967295
 800ab6a:	2100      	movs	r1, #0
 800ab6c:	4798      	blx	r3
 800ab6e:	4603      	mov	r3, r0
 800ab70:	73bb      	strb	r3, [r7, #14]
      return;
 800ab72:	e08b      	b.n	800ac8c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ab74:	23f0      	movs	r3, #240	@ 0xf0
 800ab76:	73bb      	strb	r3, [r7, #14]
      return;
 800ab78:	e088      	b.n	800ac8c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ab7a:	4b50      	ldr	r3, [pc, #320]	@ (800acbc <tcp_listen_input+0x1f0>)
 800ab7c:	695a      	ldr	r2, [r3, #20]
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ab82:	4b4e      	ldr	r3, [pc, #312]	@ (800acbc <tcp_listen_input+0x1f0>)
 800ab84:	691a      	ldr	r2, [r3, #16]
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	8ada      	ldrh	r2, [r3, #22]
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ab92:	4b47      	ldr	r3, [pc, #284]	@ (800acb0 <tcp_listen_input+0x1e4>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	881b      	ldrh	r3, [r3, #0]
 800ab98:	b29a      	uxth	r2, r3
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	2203      	movs	r2, #3
 800aba2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800aba4:	4b41      	ldr	r3, [pc, #260]	@ (800acac <tcp_listen_input+0x1e0>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	1c5a      	adds	r2, r3, #1
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800abb6:	6978      	ldr	r0, [r7, #20]
 800abb8:	f7ff fa58 	bl	800a06c <tcp_next_iss>
 800abbc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	693a      	ldr	r2, [r7, #16]
 800abc2:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	693a      	ldr	r2, [r7, #16]
 800abc8:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	693a      	ldr	r2, [r7, #16]
 800abce:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	693a      	ldr	r2, [r7, #16]
 800abd4:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800abd6:	4b35      	ldr	r3, [pc, #212]	@ (800acac <tcp_listen_input+0x1e0>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	1e5a      	subs	r2, r3, #1
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	691a      	ldr	r2, [r3, #16]
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	687a      	ldr	r2, [r7, #4]
 800abec:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	7a5b      	ldrb	r3, [r3, #9]
 800abf2:	f003 030c 	and.w	r3, r3, #12
 800abf6:	b2da      	uxtb	r2, r3
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	7a1a      	ldrb	r2, [r3, #8]
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ac04:	4b2e      	ldr	r3, [pc, #184]	@ (800acc0 <tcp_listen_input+0x1f4>)
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	60da      	str	r2, [r3, #12]
 800ac0c:	4a2c      	ldr	r2, [pc, #176]	@ (800acc0 <tcp_listen_input+0x1f4>)
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	6013      	str	r3, [r2, #0]
 800ac12:	f003 fd23 	bl	800e65c <tcp_timer_needed>
 800ac16:	4b2b      	ldr	r3, [pc, #172]	@ (800acc4 <tcp_listen_input+0x1f8>)
 800ac18:	2201      	movs	r2, #1
 800ac1a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ac1c:	6978      	ldr	r0, [r7, #20]
 800ac1e:	f001 fd8b 	bl	800c738 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ac22:	4b23      	ldr	r3, [pc, #140]	@ (800acb0 <tcp_listen_input+0x1e4>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	89db      	ldrh	r3, [r3, #14]
 800ac28:	b29a      	uxth	r2, r3
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	3304      	adds	r3, #4
 800ac44:	4618      	mov	r0, r3
 800ac46:	f005 f8e7 	bl	800fe18 <ip4_route>
 800ac4a:	4601      	mov	r1, r0
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	3304      	adds	r3, #4
 800ac50:	461a      	mov	r2, r3
 800ac52:	4620      	mov	r0, r4
 800ac54:	f7ff fa30 	bl	800a0b8 <tcp_eff_send_mss_netif>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ac60:	2112      	movs	r1, #18
 800ac62:	6978      	ldr	r0, [r7, #20]
 800ac64:	f002 fc96 	bl	800d594 <tcp_enqueue_flags>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ac6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d004      	beq.n	800ac7e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ac74:	2100      	movs	r1, #0
 800ac76:	6978      	ldr	r0, [r7, #20]
 800ac78:	f7fd fed6 	bl	8008a28 <tcp_abandon>
      return;
 800ac7c:	e006      	b.n	800ac8c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ac7e:	6978      	ldr	r0, [r7, #20]
 800ac80:	f002 fd76 	bl	800d770 <tcp_output>
  return;
 800ac84:	e001      	b.n	800ac8a <tcp_listen_input+0x1be>
    return;
 800ac86:	bf00      	nop
 800ac88:	e000      	b.n	800ac8c <tcp_listen_input+0x1c0>
  return;
 800ac8a:	bf00      	nop
}
 800ac8c:	371c      	adds	r7, #28
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd90      	pop	{r4, r7, pc}
 800ac92:	bf00      	nop
 800ac94:	200085ec 	.word	0x200085ec
 800ac98:	08013708 	.word	0x08013708
 800ac9c:	08013900 	.word	0x08013900
 800aca0:	08013754 	.word	0x08013754
 800aca4:	200085e4 	.word	0x200085e4
 800aca8:	200085ea 	.word	0x200085ea
 800acac:	200085e0 	.word	0x200085e0
 800acb0:	200085d0 	.word	0x200085d0
 800acb4:	2000569c 	.word	0x2000569c
 800acb8:	200056a0 	.word	0x200056a0
 800acbc:	2000568c 	.word	0x2000568c
 800acc0:	200085b4 	.word	0x200085b4
 800acc4:	200085bc 	.word	0x200085bc

0800acc8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b086      	sub	sp, #24
 800accc:	af04      	add	r7, sp, #16
 800acce:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800acd0:	4b2f      	ldr	r3, [pc, #188]	@ (800ad90 <tcp_timewait_input+0xc8>)
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	f003 0304 	and.w	r3, r3, #4
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d153      	bne.n	800ad84 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d106      	bne.n	800acf0 <tcp_timewait_input+0x28>
 800ace2:	4b2c      	ldr	r3, [pc, #176]	@ (800ad94 <tcp_timewait_input+0xcc>)
 800ace4:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800ace8:	492b      	ldr	r1, [pc, #172]	@ (800ad98 <tcp_timewait_input+0xd0>)
 800acea:	482c      	ldr	r0, [pc, #176]	@ (800ad9c <tcp_timewait_input+0xd4>)
 800acec:	f006 fb80 	bl	80113f0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800acf0:	4b27      	ldr	r3, [pc, #156]	@ (800ad90 <tcp_timewait_input+0xc8>)
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	f003 0302 	and.w	r3, r3, #2
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d02a      	beq.n	800ad52 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800acfc:	4b28      	ldr	r3, [pc, #160]	@ (800ada0 <tcp_timewait_input+0xd8>)
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad04:	1ad3      	subs	r3, r2, r3
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	db2d      	blt.n	800ad66 <tcp_timewait_input+0x9e>
 800ad0a:	4b25      	ldr	r3, [pc, #148]	@ (800ada0 <tcp_timewait_input+0xd8>)
 800ad0c:	681a      	ldr	r2, [r3, #0]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad12:	6879      	ldr	r1, [r7, #4]
 800ad14:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ad16:	440b      	add	r3, r1
 800ad18:	1ad3      	subs	r3, r2, r3
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	dc23      	bgt.n	800ad66 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad1e:	4b21      	ldr	r3, [pc, #132]	@ (800ada4 <tcp_timewait_input+0xdc>)
 800ad20:	6819      	ldr	r1, [r3, #0]
 800ad22:	4b21      	ldr	r3, [pc, #132]	@ (800ada8 <tcp_timewait_input+0xe0>)
 800ad24:	881b      	ldrh	r3, [r3, #0]
 800ad26:	461a      	mov	r2, r3
 800ad28:	4b1d      	ldr	r3, [pc, #116]	@ (800ada0 <tcp_timewait_input+0xd8>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ad2e:	4b1f      	ldr	r3, [pc, #124]	@ (800adac <tcp_timewait_input+0xe4>)
 800ad30:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad32:	885b      	ldrh	r3, [r3, #2]
 800ad34:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ad36:	4a1d      	ldr	r2, [pc, #116]	@ (800adac <tcp_timewait_input+0xe4>)
 800ad38:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad3a:	8812      	ldrh	r2, [r2, #0]
 800ad3c:	b292      	uxth	r2, r2
 800ad3e:	9202      	str	r2, [sp, #8]
 800ad40:	9301      	str	r3, [sp, #4]
 800ad42:	4b1b      	ldr	r3, [pc, #108]	@ (800adb0 <tcp_timewait_input+0xe8>)
 800ad44:	9300      	str	r3, [sp, #0]
 800ad46:	4b1b      	ldr	r3, [pc, #108]	@ (800adb4 <tcp_timewait_input+0xec>)
 800ad48:	4602      	mov	r2, r0
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f003 fac4 	bl	800e2d8 <tcp_rst>
      return;
 800ad50:	e01b      	b.n	800ad8a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800ad52:	4b0f      	ldr	r3, [pc, #60]	@ (800ad90 <tcp_timewait_input+0xc8>)
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	f003 0301 	and.w	r3, r3, #1
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d003      	beq.n	800ad66 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ad5e:	4b16      	ldr	r3, [pc, #88]	@ (800adb8 <tcp_timewait_input+0xf0>)
 800ad60:	681a      	ldr	r2, [r3, #0]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ad66:	4b10      	ldr	r3, [pc, #64]	@ (800ada8 <tcp_timewait_input+0xe0>)
 800ad68:	881b      	ldrh	r3, [r3, #0]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d00c      	beq.n	800ad88 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	8b5b      	ldrh	r3, [r3, #26]
 800ad72:	f043 0302 	orr.w	r3, r3, #2
 800ad76:	b29a      	uxth	r2, r3
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f002 fcf7 	bl	800d770 <tcp_output>
  }
  return;
 800ad82:	e001      	b.n	800ad88 <tcp_timewait_input+0xc0>
    return;
 800ad84:	bf00      	nop
 800ad86:	e000      	b.n	800ad8a <tcp_timewait_input+0xc2>
  return;
 800ad88:	bf00      	nop
}
 800ad8a:	3708      	adds	r7, #8
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	200085ec 	.word	0x200085ec
 800ad94:	08013708 	.word	0x08013708
 800ad98:	08013920 	.word	0x08013920
 800ad9c:	08013754 	.word	0x08013754
 800ada0:	200085e0 	.word	0x200085e0
 800ada4:	200085e4 	.word	0x200085e4
 800ada8:	200085ea 	.word	0x200085ea
 800adac:	200085d0 	.word	0x200085d0
 800adb0:	2000569c 	.word	0x2000569c
 800adb4:	200056a0 	.word	0x200056a0
 800adb8:	200085a8 	.word	0x200085a8

0800adbc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800adbc:	b590      	push	{r4, r7, lr}
 800adbe:	b08d      	sub	sp, #52	@ 0x34
 800adc0:	af04      	add	r7, sp, #16
 800adc2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800adc4:	2300      	movs	r3, #0
 800adc6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800adc8:	2300      	movs	r3, #0
 800adca:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d106      	bne.n	800ade0 <tcp_process+0x24>
 800add2:	4b9d      	ldr	r3, [pc, #628]	@ (800b048 <tcp_process+0x28c>)
 800add4:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800add8:	499c      	ldr	r1, [pc, #624]	@ (800b04c <tcp_process+0x290>)
 800adda:	489d      	ldr	r0, [pc, #628]	@ (800b050 <tcp_process+0x294>)
 800addc:	f006 fb08 	bl	80113f0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ade0:	4b9c      	ldr	r3, [pc, #624]	@ (800b054 <tcp_process+0x298>)
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	f003 0304 	and.w	r3, r3, #4
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d04e      	beq.n	800ae8a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	7d1b      	ldrb	r3, [r3, #20]
 800adf0:	2b02      	cmp	r3, #2
 800adf2:	d108      	bne.n	800ae06 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800adf8:	4b97      	ldr	r3, [pc, #604]	@ (800b058 <tcp_process+0x29c>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d123      	bne.n	800ae48 <tcp_process+0x8c>
        acceptable = 1;
 800ae00:	2301      	movs	r3, #1
 800ae02:	76fb      	strb	r3, [r7, #27]
 800ae04:	e020      	b.n	800ae48 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ae0a:	4b94      	ldr	r3, [pc, #592]	@ (800b05c <tcp_process+0x2a0>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d102      	bne.n	800ae18 <tcp_process+0x5c>
        acceptable = 1;
 800ae12:	2301      	movs	r3, #1
 800ae14:	76fb      	strb	r3, [r7, #27]
 800ae16:	e017      	b.n	800ae48 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ae18:	4b90      	ldr	r3, [pc, #576]	@ (800b05c <tcp_process+0x2a0>)
 800ae1a:	681a      	ldr	r2, [r3, #0]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae20:	1ad3      	subs	r3, r2, r3
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	db10      	blt.n	800ae48 <tcp_process+0x8c>
 800ae26:	4b8d      	ldr	r3, [pc, #564]	@ (800b05c <tcp_process+0x2a0>)
 800ae28:	681a      	ldr	r2, [r3, #0]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae2e:	6879      	ldr	r1, [r7, #4]
 800ae30:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ae32:	440b      	add	r3, r1
 800ae34:	1ad3      	subs	r3, r2, r3
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	dc06      	bgt.n	800ae48 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	8b5b      	ldrh	r3, [r3, #26]
 800ae3e:	f043 0302 	orr.w	r3, r3, #2
 800ae42:	b29a      	uxth	r2, r3
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ae48:	7efb      	ldrb	r3, [r7, #27]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d01b      	beq.n	800ae86 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	7d1b      	ldrb	r3, [r3, #20]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d106      	bne.n	800ae64 <tcp_process+0xa8>
 800ae56:	4b7c      	ldr	r3, [pc, #496]	@ (800b048 <tcp_process+0x28c>)
 800ae58:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800ae5c:	4980      	ldr	r1, [pc, #512]	@ (800b060 <tcp_process+0x2a4>)
 800ae5e:	487c      	ldr	r0, [pc, #496]	@ (800b050 <tcp_process+0x294>)
 800ae60:	f006 fac6 	bl	80113f0 <iprintf>
      recv_flags |= TF_RESET;
 800ae64:	4b7f      	ldr	r3, [pc, #508]	@ (800b064 <tcp_process+0x2a8>)
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	f043 0308 	orr.w	r3, r3, #8
 800ae6c:	b2da      	uxtb	r2, r3
 800ae6e:	4b7d      	ldr	r3, [pc, #500]	@ (800b064 <tcp_process+0x2a8>)
 800ae70:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	8b5b      	ldrh	r3, [r3, #26]
 800ae76:	f023 0301 	bic.w	r3, r3, #1
 800ae7a:	b29a      	uxth	r2, r3
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ae80:	f06f 030d 	mvn.w	r3, #13
 800ae84:	e37a      	b.n	800b57c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ae86:	2300      	movs	r3, #0
 800ae88:	e378      	b.n	800b57c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ae8a:	4b72      	ldr	r3, [pc, #456]	@ (800b054 <tcp_process+0x298>)
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	f003 0302 	and.w	r3, r3, #2
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d010      	beq.n	800aeb8 <tcp_process+0xfc>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	7d1b      	ldrb	r3, [r3, #20]
 800ae9a:	2b02      	cmp	r3, #2
 800ae9c:	d00c      	beq.n	800aeb8 <tcp_process+0xfc>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	7d1b      	ldrb	r3, [r3, #20]
 800aea2:	2b03      	cmp	r3, #3
 800aea4:	d008      	beq.n	800aeb8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	8b5b      	ldrh	r3, [r3, #26]
 800aeaa:	f043 0302 	orr.w	r3, r3, #2
 800aeae:	b29a      	uxth	r2, r3
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	e361      	b.n	800b57c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	8b5b      	ldrh	r3, [r3, #26]
 800aebc:	f003 0310 	and.w	r3, r3, #16
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d103      	bne.n	800aecc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800aec4:	4b68      	ldr	r3, [pc, #416]	@ (800b068 <tcp_process+0x2ac>)
 800aec6:	681a      	ldr	r2, [r3, #0]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2200      	movs	r2, #0
 800aed0:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2200      	movs	r2, #0
 800aed8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f001 fc2b 	bl	800c738 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	7d1b      	ldrb	r3, [r3, #20]
 800aee6:	3b02      	subs	r3, #2
 800aee8:	2b07      	cmp	r3, #7
 800aeea:	f200 8337 	bhi.w	800b55c <tcp_process+0x7a0>
 800aeee:	a201      	add	r2, pc, #4	@ (adr r2, 800aef4 <tcp_process+0x138>)
 800aef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef4:	0800af15 	.word	0x0800af15
 800aef8:	0800b145 	.word	0x0800b145
 800aefc:	0800b2bd 	.word	0x0800b2bd
 800af00:	0800b2e7 	.word	0x0800b2e7
 800af04:	0800b40b 	.word	0x0800b40b
 800af08:	0800b2bd 	.word	0x0800b2bd
 800af0c:	0800b497 	.word	0x0800b497
 800af10:	0800b527 	.word	0x0800b527
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800af14:	4b4f      	ldr	r3, [pc, #316]	@ (800b054 <tcp_process+0x298>)
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	f003 0310 	and.w	r3, r3, #16
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	f000 80e4 	beq.w	800b0ea <tcp_process+0x32e>
 800af22:	4b4c      	ldr	r3, [pc, #304]	@ (800b054 <tcp_process+0x298>)
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	f003 0302 	and.w	r3, r3, #2
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	f000 80dd 	beq.w	800b0ea <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af34:	1c5a      	adds	r2, r3, #1
 800af36:	4b48      	ldr	r3, [pc, #288]	@ (800b058 <tcp_process+0x29c>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	f040 80d5 	bne.w	800b0ea <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800af40:	4b46      	ldr	r3, [pc, #280]	@ (800b05c <tcp_process+0x2a0>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	1c5a      	adds	r2, r3, #1
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800af52:	4b41      	ldr	r3, [pc, #260]	@ (800b058 <tcp_process+0x29c>)
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800af5a:	4b44      	ldr	r3, [pc, #272]	@ (800b06c <tcp_process+0x2b0>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	89db      	ldrh	r3, [r3, #14]
 800af60:	b29a      	uxth	r2, r3
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800af74:	4b39      	ldr	r3, [pc, #228]	@ (800b05c <tcp_process+0x2a0>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	1e5a      	subs	r2, r3, #1
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2204      	movs	r2, #4
 800af82:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	3304      	adds	r3, #4
 800af8c:	4618      	mov	r0, r3
 800af8e:	f004 ff43 	bl	800fe18 <ip4_route>
 800af92:	4601      	mov	r1, r0
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	3304      	adds	r3, #4
 800af98:	461a      	mov	r2, r3
 800af9a:	4620      	mov	r0, r4
 800af9c:	f7ff f88c 	bl	800a0b8 <tcp_eff_send_mss_netif>
 800afa0:	4603      	mov	r3, r0
 800afa2:	461a      	mov	r2, r3
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800afac:	009a      	lsls	r2, r3, #2
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800afb2:	005b      	lsls	r3, r3, #1
 800afb4:	f241 111c 	movw	r1, #4380	@ 0x111c
 800afb8:	428b      	cmp	r3, r1
 800afba:	bf38      	it	cc
 800afbc:	460b      	movcc	r3, r1
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d204      	bcs.n	800afcc <tcp_process+0x210>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800afc6:	009b      	lsls	r3, r3, #2
 800afc8:	b29b      	uxth	r3, r3
 800afca:	e00d      	b.n	800afe8 <tcp_process+0x22c>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800afd0:	005b      	lsls	r3, r3, #1
 800afd2:	f241 121c 	movw	r2, #4380	@ 0x111c
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d904      	bls.n	800afe4 <tcp_process+0x228>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800afde:	005b      	lsls	r3, r3, #1
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	e001      	b.n	800afe8 <tcp_process+0x22c>
 800afe4:	f241 131c 	movw	r3, #4380	@ 0x111c
 800afe8:	687a      	ldr	r2, [r7, #4]
 800afea:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d106      	bne.n	800b006 <tcp_process+0x24a>
 800aff8:	4b13      	ldr	r3, [pc, #76]	@ (800b048 <tcp_process+0x28c>)
 800affa:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800affe:	491c      	ldr	r1, [pc, #112]	@ (800b070 <tcp_process+0x2b4>)
 800b000:	4813      	ldr	r0, [pc, #76]	@ (800b050 <tcp_process+0x294>)
 800b002:	f006 f9f5 	bl	80113f0 <iprintf>
        --pcb->snd_queuelen;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b00c:	3b01      	subs	r3, #1
 800b00e:	b29a      	uxth	r2, r3
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b01a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800b01c:	69fb      	ldr	r3, [r7, #28]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d12a      	bne.n	800b078 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b026:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b028:	69fb      	ldr	r3, [r7, #28]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d106      	bne.n	800b03c <tcp_process+0x280>
 800b02e:	4b06      	ldr	r3, [pc, #24]	@ (800b048 <tcp_process+0x28c>)
 800b030:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800b034:	490f      	ldr	r1, [pc, #60]	@ (800b074 <tcp_process+0x2b8>)
 800b036:	4806      	ldr	r0, [pc, #24]	@ (800b050 <tcp_process+0x294>)
 800b038:	f006 f9da 	bl	80113f0 <iprintf>
          pcb->unsent = rseg->next;
 800b03c:	69fb      	ldr	r3, [r7, #28]
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b044:	e01c      	b.n	800b080 <tcp_process+0x2c4>
 800b046:	bf00      	nop
 800b048:	08013708 	.word	0x08013708
 800b04c:	08013940 	.word	0x08013940
 800b050:	08013754 	.word	0x08013754
 800b054:	200085ec 	.word	0x200085ec
 800b058:	200085e4 	.word	0x200085e4
 800b05c:	200085e0 	.word	0x200085e0
 800b060:	0801395c 	.word	0x0801395c
 800b064:	200085ed 	.word	0x200085ed
 800b068:	200085a8 	.word	0x200085a8
 800b06c:	200085d0 	.word	0x200085d0
 800b070:	0801397c 	.word	0x0801397c
 800b074:	08013994 	.word	0x08013994
        } else {
          pcb->unacked = rseg->next;
 800b078:	69fb      	ldr	r3, [r7, #28]
 800b07a:	681a      	ldr	r2, [r3, #0]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800b080:	69f8      	ldr	r0, [r7, #28]
 800b082:	f7fe fc36 	bl	80098f2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d104      	bne.n	800b098 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b094:	861a      	strh	r2, [r3, #48]	@ 0x30
 800b096:	e006      	b.n	800b0a6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2200      	movs	r2, #0
 800b09c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d00a      	beq.n	800b0c6 <tcp_process+0x30a>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	6910      	ldr	r0, [r2, #16]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	6879      	ldr	r1, [r7, #4]
 800b0be:	4798      	blx	r3
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	76bb      	strb	r3, [r7, #26]
 800b0c4:	e001      	b.n	800b0ca <tcp_process+0x30e>
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800b0ca:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b0ce:	f113 0f0d 	cmn.w	r3, #13
 800b0d2:	d102      	bne.n	800b0da <tcp_process+0x31e>
          return ERR_ABRT;
 800b0d4:	f06f 030c 	mvn.w	r3, #12
 800b0d8:	e250      	b.n	800b57c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	8b5b      	ldrh	r3, [r3, #26]
 800b0de:	f043 0302 	orr.w	r3, r3, #2
 800b0e2:	b29a      	uxth	r2, r3
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b0e8:	e23a      	b.n	800b560 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800b0ea:	4b98      	ldr	r3, [pc, #608]	@ (800b34c <tcp_process+0x590>)
 800b0ec:	781b      	ldrb	r3, [r3, #0]
 800b0ee:	f003 0310 	and.w	r3, r3, #16
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f000 8234 	beq.w	800b560 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b0f8:	4b95      	ldr	r3, [pc, #596]	@ (800b350 <tcp_process+0x594>)
 800b0fa:	6819      	ldr	r1, [r3, #0]
 800b0fc:	4b95      	ldr	r3, [pc, #596]	@ (800b354 <tcp_process+0x598>)
 800b0fe:	881b      	ldrh	r3, [r3, #0]
 800b100:	461a      	mov	r2, r3
 800b102:	4b95      	ldr	r3, [pc, #596]	@ (800b358 <tcp_process+0x59c>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b108:	4b94      	ldr	r3, [pc, #592]	@ (800b35c <tcp_process+0x5a0>)
 800b10a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b10c:	885b      	ldrh	r3, [r3, #2]
 800b10e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b110:	4a92      	ldr	r2, [pc, #584]	@ (800b35c <tcp_process+0x5a0>)
 800b112:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b114:	8812      	ldrh	r2, [r2, #0]
 800b116:	b292      	uxth	r2, r2
 800b118:	9202      	str	r2, [sp, #8]
 800b11a:	9301      	str	r3, [sp, #4]
 800b11c:	4b90      	ldr	r3, [pc, #576]	@ (800b360 <tcp_process+0x5a4>)
 800b11e:	9300      	str	r3, [sp, #0]
 800b120:	4b90      	ldr	r3, [pc, #576]	@ (800b364 <tcp_process+0x5a8>)
 800b122:	4602      	mov	r2, r0
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f003 f8d7 	bl	800e2d8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b130:	2b05      	cmp	r3, #5
 800b132:	f200 8215 	bhi.w	800b560 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2200      	movs	r2, #0
 800b13a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f002 fea3 	bl	800de88 <tcp_rexmit_rto>
      break;
 800b142:	e20d      	b.n	800b560 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b144:	4b81      	ldr	r3, [pc, #516]	@ (800b34c <tcp_process+0x590>)
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	f003 0310 	and.w	r3, r3, #16
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	f000 80a1 	beq.w	800b294 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b152:	4b7f      	ldr	r3, [pc, #508]	@ (800b350 <tcp_process+0x594>)
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b15a:	1ad3      	subs	r3, r2, r3
 800b15c:	3b01      	subs	r3, #1
 800b15e:	2b00      	cmp	r3, #0
 800b160:	db7e      	blt.n	800b260 <tcp_process+0x4a4>
 800b162:	4b7b      	ldr	r3, [pc, #492]	@ (800b350 <tcp_process+0x594>)
 800b164:	681a      	ldr	r2, [r3, #0]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b16a:	1ad3      	subs	r3, r2, r3
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	dc77      	bgt.n	800b260 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2204      	movs	r2, #4
 800b174:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d102      	bne.n	800b184 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b17e:	23fa      	movs	r3, #250	@ 0xfa
 800b180:	76bb      	strb	r3, [r7, #26]
 800b182:	e01d      	b.n	800b1c0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b188:	699b      	ldr	r3, [r3, #24]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d106      	bne.n	800b19c <tcp_process+0x3e0>
 800b18e:	4b76      	ldr	r3, [pc, #472]	@ (800b368 <tcp_process+0x5ac>)
 800b190:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800b194:	4975      	ldr	r1, [pc, #468]	@ (800b36c <tcp_process+0x5b0>)
 800b196:	4876      	ldr	r0, [pc, #472]	@ (800b370 <tcp_process+0x5b4>)
 800b198:	f006 f92a 	bl	80113f0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b1a0:	699b      	ldr	r3, [r3, #24]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d00a      	beq.n	800b1bc <tcp_process+0x400>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b1aa:	699b      	ldr	r3, [r3, #24]
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	6910      	ldr	r0, [r2, #16]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	6879      	ldr	r1, [r7, #4]
 800b1b4:	4798      	blx	r3
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	76bb      	strb	r3, [r7, #26]
 800b1ba:	e001      	b.n	800b1c0 <tcp_process+0x404>
 800b1bc:	23f0      	movs	r3, #240	@ 0xf0
 800b1be:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b1c0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d00a      	beq.n	800b1de <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b1c8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b1cc:	f113 0f0d 	cmn.w	r3, #13
 800b1d0:	d002      	beq.n	800b1d8 <tcp_process+0x41c>
              tcp_abort(pcb);
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f7fd fce6 	bl	8008ba4 <tcp_abort>
            }
            return ERR_ABRT;
 800b1d8:	f06f 030c 	mvn.w	r3, #12
 800b1dc:	e1ce      	b.n	800b57c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 fae0 	bl	800b7a4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b1e4:	4b63      	ldr	r3, [pc, #396]	@ (800b374 <tcp_process+0x5b8>)
 800b1e6:	881b      	ldrh	r3, [r3, #0]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d005      	beq.n	800b1f8 <tcp_process+0x43c>
            recv_acked--;
 800b1ec:	4b61      	ldr	r3, [pc, #388]	@ (800b374 <tcp_process+0x5b8>)
 800b1ee:	881b      	ldrh	r3, [r3, #0]
 800b1f0:	3b01      	subs	r3, #1
 800b1f2:	b29a      	uxth	r2, r3
 800b1f4:	4b5f      	ldr	r3, [pc, #380]	@ (800b374 <tcp_process+0x5b8>)
 800b1f6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b1fc:	009a      	lsls	r2, r3, #2
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b202:	005b      	lsls	r3, r3, #1
 800b204:	f241 111c 	movw	r1, #4380	@ 0x111c
 800b208:	428b      	cmp	r3, r1
 800b20a:	bf38      	it	cc
 800b20c:	460b      	movcc	r3, r1
 800b20e:	429a      	cmp	r2, r3
 800b210:	d204      	bcs.n	800b21c <tcp_process+0x460>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b216:	009b      	lsls	r3, r3, #2
 800b218:	b29b      	uxth	r3, r3
 800b21a:	e00d      	b.n	800b238 <tcp_process+0x47c>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b220:	005b      	lsls	r3, r3, #1
 800b222:	f241 121c 	movw	r2, #4380	@ 0x111c
 800b226:	4293      	cmp	r3, r2
 800b228:	d904      	bls.n	800b234 <tcp_process+0x478>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b22e:	005b      	lsls	r3, r3, #1
 800b230:	b29b      	uxth	r3, r3
 800b232:	e001      	b.n	800b238 <tcp_process+0x47c>
 800b234:	f241 131c 	movw	r3, #4380	@ 0x111c
 800b238:	687a      	ldr	r2, [r7, #4]
 800b23a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b23e:	4b4e      	ldr	r3, [pc, #312]	@ (800b378 <tcp_process+0x5bc>)
 800b240:	781b      	ldrb	r3, [r3, #0]
 800b242:	f003 0320 	and.w	r3, r3, #32
 800b246:	2b00      	cmp	r3, #0
 800b248:	d037      	beq.n	800b2ba <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	8b5b      	ldrh	r3, [r3, #26]
 800b24e:	f043 0302 	orr.w	r3, r3, #2
 800b252:	b29a      	uxth	r2, r3
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2207      	movs	r2, #7
 800b25c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b25e:	e02c      	b.n	800b2ba <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b260:	4b3b      	ldr	r3, [pc, #236]	@ (800b350 <tcp_process+0x594>)
 800b262:	6819      	ldr	r1, [r3, #0]
 800b264:	4b3b      	ldr	r3, [pc, #236]	@ (800b354 <tcp_process+0x598>)
 800b266:	881b      	ldrh	r3, [r3, #0]
 800b268:	461a      	mov	r2, r3
 800b26a:	4b3b      	ldr	r3, [pc, #236]	@ (800b358 <tcp_process+0x59c>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b270:	4b3a      	ldr	r3, [pc, #232]	@ (800b35c <tcp_process+0x5a0>)
 800b272:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b274:	885b      	ldrh	r3, [r3, #2]
 800b276:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b278:	4a38      	ldr	r2, [pc, #224]	@ (800b35c <tcp_process+0x5a0>)
 800b27a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b27c:	8812      	ldrh	r2, [r2, #0]
 800b27e:	b292      	uxth	r2, r2
 800b280:	9202      	str	r2, [sp, #8]
 800b282:	9301      	str	r3, [sp, #4]
 800b284:	4b36      	ldr	r3, [pc, #216]	@ (800b360 <tcp_process+0x5a4>)
 800b286:	9300      	str	r3, [sp, #0]
 800b288:	4b36      	ldr	r3, [pc, #216]	@ (800b364 <tcp_process+0x5a8>)
 800b28a:	4602      	mov	r2, r0
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f003 f823 	bl	800e2d8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b292:	e167      	b.n	800b564 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b294:	4b2d      	ldr	r3, [pc, #180]	@ (800b34c <tcp_process+0x590>)
 800b296:	781b      	ldrb	r3, [r3, #0]
 800b298:	f003 0302 	and.w	r3, r3, #2
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	f000 8161 	beq.w	800b564 <tcp_process+0x7a8>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2a6:	1e5a      	subs	r2, r3, #1
 800b2a8:	4b2b      	ldr	r3, [pc, #172]	@ (800b358 <tcp_process+0x59c>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	f040 8159 	bne.w	800b564 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f002 fe0a 	bl	800decc <tcp_rexmit>
      break;
 800b2b8:	e154      	b.n	800b564 <tcp_process+0x7a8>
 800b2ba:	e153      	b.n	800b564 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f000 fa71 	bl	800b7a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b2c2:	4b2d      	ldr	r3, [pc, #180]	@ (800b378 <tcp_process+0x5bc>)
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	f003 0320 	and.w	r3, r3, #32
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	f000 814c 	beq.w	800b568 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	8b5b      	ldrh	r3, [r3, #26]
 800b2d4:	f043 0302 	orr.w	r3, r3, #2
 800b2d8:	b29a      	uxth	r2, r3
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2207      	movs	r2, #7
 800b2e2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b2e4:	e140      	b.n	800b568 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f000 fa5c 	bl	800b7a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b2ec:	4b22      	ldr	r3, [pc, #136]	@ (800b378 <tcp_process+0x5bc>)
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	f003 0320 	and.w	r3, r3, #32
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d071      	beq.n	800b3dc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b2f8:	4b14      	ldr	r3, [pc, #80]	@ (800b34c <tcp_process+0x590>)
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	f003 0310 	and.w	r3, r3, #16
 800b300:	2b00      	cmp	r3, #0
 800b302:	d060      	beq.n	800b3c6 <tcp_process+0x60a>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b308:	4b11      	ldr	r3, [pc, #68]	@ (800b350 <tcp_process+0x594>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d15a      	bne.n	800b3c6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b314:	2b00      	cmp	r3, #0
 800b316:	d156      	bne.n	800b3c6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	8b5b      	ldrh	r3, [r3, #26]
 800b31c:	f043 0302 	orr.w	r3, r3, #2
 800b320:	b29a      	uxth	r2, r3
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800b326:	6878      	ldr	r0, [r7, #4]
 800b328:	f7fe fdbc 	bl	8009ea4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b32c:	4b13      	ldr	r3, [pc, #76]	@ (800b37c <tcp_process+0x5c0>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	429a      	cmp	r2, r3
 800b334:	d105      	bne.n	800b342 <tcp_process+0x586>
 800b336:	4b11      	ldr	r3, [pc, #68]	@ (800b37c <tcp_process+0x5c0>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	68db      	ldr	r3, [r3, #12]
 800b33c:	4a0f      	ldr	r2, [pc, #60]	@ (800b37c <tcp_process+0x5c0>)
 800b33e:	6013      	str	r3, [r2, #0]
 800b340:	e02e      	b.n	800b3a0 <tcp_process+0x5e4>
 800b342:	4b0e      	ldr	r3, [pc, #56]	@ (800b37c <tcp_process+0x5c0>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	617b      	str	r3, [r7, #20]
 800b348:	e027      	b.n	800b39a <tcp_process+0x5de>
 800b34a:	bf00      	nop
 800b34c:	200085ec 	.word	0x200085ec
 800b350:	200085e4 	.word	0x200085e4
 800b354:	200085ea 	.word	0x200085ea
 800b358:	200085e0 	.word	0x200085e0
 800b35c:	200085d0 	.word	0x200085d0
 800b360:	2000569c 	.word	0x2000569c
 800b364:	200056a0 	.word	0x200056a0
 800b368:	08013708 	.word	0x08013708
 800b36c:	080139a8 	.word	0x080139a8
 800b370:	08013754 	.word	0x08013754
 800b374:	200085e8 	.word	0x200085e8
 800b378:	200085ed 	.word	0x200085ed
 800b37c:	200085b4 	.word	0x200085b4
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	68db      	ldr	r3, [r3, #12]
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	429a      	cmp	r2, r3
 800b388:	d104      	bne.n	800b394 <tcp_process+0x5d8>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	68da      	ldr	r2, [r3, #12]
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	60da      	str	r2, [r3, #12]
 800b392:	e005      	b.n	800b3a0 <tcp_process+0x5e4>
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	68db      	ldr	r3, [r3, #12]
 800b398:	617b      	str	r3, [r7, #20]
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d1ef      	bne.n	800b380 <tcp_process+0x5c4>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	60da      	str	r2, [r3, #12]
 800b3a6:	4b77      	ldr	r3, [pc, #476]	@ (800b584 <tcp_process+0x7c8>)
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	220a      	movs	r2, #10
 800b3b0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b3b2:	4b75      	ldr	r3, [pc, #468]	@ (800b588 <tcp_process+0x7cc>)
 800b3b4:	681a      	ldr	r2, [r3, #0]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	60da      	str	r2, [r3, #12]
 800b3ba:	4a73      	ldr	r2, [pc, #460]	@ (800b588 <tcp_process+0x7cc>)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6013      	str	r3, [r2, #0]
 800b3c0:	f003 f94c 	bl	800e65c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800b3c4:	e0d2      	b.n	800b56c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	8b5b      	ldrh	r3, [r3, #26]
 800b3ca:	f043 0302 	orr.w	r3, r3, #2
 800b3ce:	b29a      	uxth	r2, r3
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2208      	movs	r2, #8
 800b3d8:	751a      	strb	r2, [r3, #20]
      break;
 800b3da:	e0c7      	b.n	800b56c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b3dc:	4b6b      	ldr	r3, [pc, #428]	@ (800b58c <tcp_process+0x7d0>)
 800b3de:	781b      	ldrb	r3, [r3, #0]
 800b3e0:	f003 0310 	and.w	r3, r3, #16
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	f000 80c1 	beq.w	800b56c <tcp_process+0x7b0>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b3ee:	4b68      	ldr	r3, [pc, #416]	@ (800b590 <tcp_process+0x7d4>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	f040 80ba 	bne.w	800b56c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	f040 80b5 	bne.w	800b56c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2206      	movs	r2, #6
 800b406:	751a      	strb	r2, [r3, #20]
      break;
 800b408:	e0b0      	b.n	800b56c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f000 f9ca 	bl	800b7a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b410:	4b60      	ldr	r3, [pc, #384]	@ (800b594 <tcp_process+0x7d8>)
 800b412:	781b      	ldrb	r3, [r3, #0]
 800b414:	f003 0320 	and.w	r3, r3, #32
 800b418:	2b00      	cmp	r3, #0
 800b41a:	f000 80a9 	beq.w	800b570 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	8b5b      	ldrh	r3, [r3, #26]
 800b422:	f043 0302 	orr.w	r3, r3, #2
 800b426:	b29a      	uxth	r2, r3
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f7fe fd39 	bl	8009ea4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b432:	4b59      	ldr	r3, [pc, #356]	@ (800b598 <tcp_process+0x7dc>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d105      	bne.n	800b448 <tcp_process+0x68c>
 800b43c:	4b56      	ldr	r3, [pc, #344]	@ (800b598 <tcp_process+0x7dc>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	68db      	ldr	r3, [r3, #12]
 800b442:	4a55      	ldr	r2, [pc, #340]	@ (800b598 <tcp_process+0x7dc>)
 800b444:	6013      	str	r3, [r2, #0]
 800b446:	e013      	b.n	800b470 <tcp_process+0x6b4>
 800b448:	4b53      	ldr	r3, [pc, #332]	@ (800b598 <tcp_process+0x7dc>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	613b      	str	r3, [r7, #16]
 800b44e:	e00c      	b.n	800b46a <tcp_process+0x6ae>
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	68db      	ldr	r3, [r3, #12]
 800b454:	687a      	ldr	r2, [r7, #4]
 800b456:	429a      	cmp	r2, r3
 800b458:	d104      	bne.n	800b464 <tcp_process+0x6a8>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	68da      	ldr	r2, [r3, #12]
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	60da      	str	r2, [r3, #12]
 800b462:	e005      	b.n	800b470 <tcp_process+0x6b4>
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	68db      	ldr	r3, [r3, #12]
 800b468:	613b      	str	r3, [r7, #16]
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d1ef      	bne.n	800b450 <tcp_process+0x694>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	60da      	str	r2, [r3, #12]
 800b476:	4b43      	ldr	r3, [pc, #268]	@ (800b584 <tcp_process+0x7c8>)
 800b478:	2201      	movs	r2, #1
 800b47a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	220a      	movs	r2, #10
 800b480:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b482:	4b41      	ldr	r3, [pc, #260]	@ (800b588 <tcp_process+0x7cc>)
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	60da      	str	r2, [r3, #12]
 800b48a:	4a3f      	ldr	r2, [pc, #252]	@ (800b588 <tcp_process+0x7cc>)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6013      	str	r3, [r2, #0]
 800b490:	f003 f8e4 	bl	800e65c <tcp_timer_needed>
      }
      break;
 800b494:	e06c      	b.n	800b570 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f000 f984 	bl	800b7a4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b49c:	4b3b      	ldr	r3, [pc, #236]	@ (800b58c <tcp_process+0x7d0>)
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	f003 0310 	and.w	r3, r3, #16
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d065      	beq.n	800b574 <tcp_process+0x7b8>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b4ac:	4b38      	ldr	r3, [pc, #224]	@ (800b590 <tcp_process+0x7d4>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d15f      	bne.n	800b574 <tcp_process+0x7b8>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d15b      	bne.n	800b574 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f7fe fcf1 	bl	8009ea4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b4c2:	4b35      	ldr	r3, [pc, #212]	@ (800b598 <tcp_process+0x7dc>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	687a      	ldr	r2, [r7, #4]
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d105      	bne.n	800b4d8 <tcp_process+0x71c>
 800b4cc:	4b32      	ldr	r3, [pc, #200]	@ (800b598 <tcp_process+0x7dc>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	68db      	ldr	r3, [r3, #12]
 800b4d2:	4a31      	ldr	r2, [pc, #196]	@ (800b598 <tcp_process+0x7dc>)
 800b4d4:	6013      	str	r3, [r2, #0]
 800b4d6:	e013      	b.n	800b500 <tcp_process+0x744>
 800b4d8:	4b2f      	ldr	r3, [pc, #188]	@ (800b598 <tcp_process+0x7dc>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	60fb      	str	r3, [r7, #12]
 800b4de:	e00c      	b.n	800b4fa <tcp_process+0x73e>
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	68db      	ldr	r3, [r3, #12]
 800b4e4:	687a      	ldr	r2, [r7, #4]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d104      	bne.n	800b4f4 <tcp_process+0x738>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	68da      	ldr	r2, [r3, #12]
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	60da      	str	r2, [r3, #12]
 800b4f2:	e005      	b.n	800b500 <tcp_process+0x744>
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	68db      	ldr	r3, [r3, #12]
 800b4f8:	60fb      	str	r3, [r7, #12]
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d1ef      	bne.n	800b4e0 <tcp_process+0x724>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2200      	movs	r2, #0
 800b504:	60da      	str	r2, [r3, #12]
 800b506:	4b1f      	ldr	r3, [pc, #124]	@ (800b584 <tcp_process+0x7c8>)
 800b508:	2201      	movs	r2, #1
 800b50a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	220a      	movs	r2, #10
 800b510:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b512:	4b1d      	ldr	r3, [pc, #116]	@ (800b588 <tcp_process+0x7cc>)
 800b514:	681a      	ldr	r2, [r3, #0]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	60da      	str	r2, [r3, #12]
 800b51a:	4a1b      	ldr	r2, [pc, #108]	@ (800b588 <tcp_process+0x7cc>)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6013      	str	r3, [r2, #0]
 800b520:	f003 f89c 	bl	800e65c <tcp_timer_needed>
      }
      break;
 800b524:	e026      	b.n	800b574 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 f93c 	bl	800b7a4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b52c:	4b17      	ldr	r3, [pc, #92]	@ (800b58c <tcp_process+0x7d0>)
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	f003 0310 	and.w	r3, r3, #16
 800b534:	2b00      	cmp	r3, #0
 800b536:	d01f      	beq.n	800b578 <tcp_process+0x7bc>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b53c:	4b14      	ldr	r3, [pc, #80]	@ (800b590 <tcp_process+0x7d4>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	429a      	cmp	r2, r3
 800b542:	d119      	bne.n	800b578 <tcp_process+0x7bc>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d115      	bne.n	800b578 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800b54c:	4b11      	ldr	r3, [pc, #68]	@ (800b594 <tcp_process+0x7d8>)
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	f043 0310 	orr.w	r3, r3, #16
 800b554:	b2da      	uxtb	r2, r3
 800b556:	4b0f      	ldr	r3, [pc, #60]	@ (800b594 <tcp_process+0x7d8>)
 800b558:	701a      	strb	r2, [r3, #0]
      }
      break;
 800b55a:	e00d      	b.n	800b578 <tcp_process+0x7bc>
    default:
      break;
 800b55c:	bf00      	nop
 800b55e:	e00c      	b.n	800b57a <tcp_process+0x7be>
      break;
 800b560:	bf00      	nop
 800b562:	e00a      	b.n	800b57a <tcp_process+0x7be>
      break;
 800b564:	bf00      	nop
 800b566:	e008      	b.n	800b57a <tcp_process+0x7be>
      break;
 800b568:	bf00      	nop
 800b56a:	e006      	b.n	800b57a <tcp_process+0x7be>
      break;
 800b56c:	bf00      	nop
 800b56e:	e004      	b.n	800b57a <tcp_process+0x7be>
      break;
 800b570:	bf00      	nop
 800b572:	e002      	b.n	800b57a <tcp_process+0x7be>
      break;
 800b574:	bf00      	nop
 800b576:	e000      	b.n	800b57a <tcp_process+0x7be>
      break;
 800b578:	bf00      	nop
  }
  return ERR_OK;
 800b57a:	2300      	movs	r3, #0
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3724      	adds	r7, #36	@ 0x24
 800b580:	46bd      	mov	sp, r7
 800b582:	bd90      	pop	{r4, r7, pc}
 800b584:	200085bc 	.word	0x200085bc
 800b588:	200085b8 	.word	0x200085b8
 800b58c:	200085ec 	.word	0x200085ec
 800b590:	200085e4 	.word	0x200085e4
 800b594:	200085ed 	.word	0x200085ed
 800b598:	200085b4 	.word	0x200085b4

0800b59c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800b59c:	b590      	push	{r4, r7, lr}
 800b59e:	b085      	sub	sp, #20
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d106      	bne.n	800b5ba <tcp_oos_insert_segment+0x1e>
 800b5ac:	4b3b      	ldr	r3, [pc, #236]	@ (800b69c <tcp_oos_insert_segment+0x100>)
 800b5ae:	f240 421f 	movw	r2, #1055	@ 0x41f
 800b5b2:	493b      	ldr	r1, [pc, #236]	@ (800b6a0 <tcp_oos_insert_segment+0x104>)
 800b5b4:	483b      	ldr	r0, [pc, #236]	@ (800b6a4 <tcp_oos_insert_segment+0x108>)
 800b5b6:	f005 ff1b 	bl	80113f0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	68db      	ldr	r3, [r3, #12]
 800b5be:	899b      	ldrh	r3, [r3, #12]
 800b5c0:	b29b      	uxth	r3, r3
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7fb f9d6 	bl	8006974 <lwip_htons>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	b2db      	uxtb	r3, r3
 800b5cc:	f003 0301 	and.w	r3, r3, #1
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d028      	beq.n	800b626 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800b5d4:	6838      	ldr	r0, [r7, #0]
 800b5d6:	f7fe f977 	bl	80098c8 <tcp_segs_free>
    next = NULL;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	603b      	str	r3, [r7, #0]
 800b5de:	e056      	b.n	800b68e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	899b      	ldrh	r3, [r3, #12]
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f7fb f9c3 	bl	8006974 <lwip_htons>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	b2db      	uxtb	r3, r3
 800b5f2:	f003 0301 	and.w	r3, r3, #1
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d00d      	beq.n	800b616 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	68db      	ldr	r3, [r3, #12]
 800b5fe:	899b      	ldrh	r3, [r3, #12]
 800b600:	b29c      	uxth	r4, r3
 800b602:	2001      	movs	r0, #1
 800b604:	f7fb f9b6 	bl	8006974 <lwip_htons>
 800b608:	4603      	mov	r3, r0
 800b60a:	461a      	mov	r2, r3
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	68db      	ldr	r3, [r3, #12]
 800b610:	4322      	orrs	r2, r4
 800b612:	b292      	uxth	r2, r2
 800b614:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800b620:	68f8      	ldr	r0, [r7, #12]
 800b622:	f7fe f966 	bl	80098f2 <tcp_seg_free>
    while (next &&
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d00e      	beq.n	800b64a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	891b      	ldrh	r3, [r3, #8]
 800b630:	461a      	mov	r2, r3
 800b632:	4b1d      	ldr	r3, [pc, #116]	@ (800b6a8 <tcp_oos_insert_segment+0x10c>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	441a      	add	r2, r3
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	6839      	ldr	r1, [r7, #0]
 800b640:	8909      	ldrh	r1, [r1, #8]
 800b642:	440b      	add	r3, r1
 800b644:	1ad3      	subs	r3, r2, r3
    while (next &&
 800b646:	2b00      	cmp	r3, #0
 800b648:	daca      	bge.n	800b5e0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d01e      	beq.n	800b68e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	891b      	ldrh	r3, [r3, #8]
 800b654:	461a      	mov	r2, r3
 800b656:	4b14      	ldr	r3, [pc, #80]	@ (800b6a8 <tcp_oos_insert_segment+0x10c>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	441a      	add	r2, r3
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	68db      	ldr	r3, [r3, #12]
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	1ad3      	subs	r3, r2, r3
    if (next &&
 800b664:	2b00      	cmp	r3, #0
 800b666:	dd12      	ble.n	800b68e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	68db      	ldr	r3, [r3, #12]
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	b29a      	uxth	r2, r3
 800b670:	4b0d      	ldr	r3, [pc, #52]	@ (800b6a8 <tcp_oos_insert_segment+0x10c>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	b29b      	uxth	r3, r3
 800b676:	1ad3      	subs	r3, r2, r3
 800b678:	b29a      	uxth	r2, r3
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	685a      	ldr	r2, [r3, #4]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	891b      	ldrh	r3, [r3, #8]
 800b686:	4619      	mov	r1, r3
 800b688:	4610      	mov	r0, r2
 800b68a:	f7fc fb7d 	bl	8007d88 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	683a      	ldr	r2, [r7, #0]
 800b692:	601a      	str	r2, [r3, #0]
}
 800b694:	bf00      	nop
 800b696:	3714      	adds	r7, #20
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd90      	pop	{r4, r7, pc}
 800b69c:	08013708 	.word	0x08013708
 800b6a0:	080139c8 	.word	0x080139c8
 800b6a4:	08013754 	.word	0x08013754
 800b6a8:	200085e0 	.word	0x200085e0

0800b6ac <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800b6ac:	b5b0      	push	{r4, r5, r7, lr}
 800b6ae:	b086      	sub	sp, #24
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	60f8      	str	r0, [r7, #12]
 800b6b4:	60b9      	str	r1, [r7, #8]
 800b6b6:	607a      	str	r2, [r7, #4]
 800b6b8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800b6ba:	e03e      	b.n	800b73a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f7fc fd6a 	bl	80081a4 <pbuf_clen>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b6da:	8a7a      	ldrh	r2, [r7, #18]
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d906      	bls.n	800b6ee <tcp_free_acked_segments+0x42>
 800b6e0:	4b2a      	ldr	r3, [pc, #168]	@ (800b78c <tcp_free_acked_segments+0xe0>)
 800b6e2:	f240 4257 	movw	r2, #1111	@ 0x457
 800b6e6:	492a      	ldr	r1, [pc, #168]	@ (800b790 <tcp_free_acked_segments+0xe4>)
 800b6e8:	482a      	ldr	r0, [pc, #168]	@ (800b794 <tcp_free_acked_segments+0xe8>)
 800b6ea:	f005 fe81 	bl	80113f0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800b6f4:	8a7b      	ldrh	r3, [r7, #18]
 800b6f6:	1ad3      	subs	r3, r2, r3
 800b6f8:	b29a      	uxth	r2, r3
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	891a      	ldrh	r2, [r3, #8]
 800b704:	4b24      	ldr	r3, [pc, #144]	@ (800b798 <tcp_free_acked_segments+0xec>)
 800b706:	881b      	ldrh	r3, [r3, #0]
 800b708:	4413      	add	r3, r2
 800b70a:	b29a      	uxth	r2, r3
 800b70c:	4b22      	ldr	r3, [pc, #136]	@ (800b798 <tcp_free_acked_segments+0xec>)
 800b70e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800b710:	6978      	ldr	r0, [r7, #20]
 800b712:	f7fe f8ee 	bl	80098f2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d00c      	beq.n	800b73a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d109      	bne.n	800b73a <tcp_free_acked_segments+0x8e>
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d106      	bne.n	800b73a <tcp_free_acked_segments+0x8e>
 800b72c:	4b17      	ldr	r3, [pc, #92]	@ (800b78c <tcp_free_acked_segments+0xe0>)
 800b72e:	f240 4261 	movw	r2, #1121	@ 0x461
 800b732:	491a      	ldr	r1, [pc, #104]	@ (800b79c <tcp_free_acked_segments+0xf0>)
 800b734:	4817      	ldr	r0, [pc, #92]	@ (800b794 <tcp_free_acked_segments+0xe8>)
 800b736:	f005 fe5b 	bl	80113f0 <iprintf>
  while (seg_list != NULL &&
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d020      	beq.n	800b782 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	68db      	ldr	r3, [r3, #12]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	4618      	mov	r0, r3
 800b748:	f7fb f92a 	bl	80069a0 <lwip_htonl>
 800b74c:	4604      	mov	r4, r0
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	891b      	ldrh	r3, [r3, #8]
 800b752:	461d      	mov	r5, r3
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	68db      	ldr	r3, [r3, #12]
 800b758:	899b      	ldrh	r3, [r3, #12]
 800b75a:	b29b      	uxth	r3, r3
 800b75c:	4618      	mov	r0, r3
 800b75e:	f7fb f909 	bl	8006974 <lwip_htons>
 800b762:	4603      	mov	r3, r0
 800b764:	b2db      	uxtb	r3, r3
 800b766:	f003 0303 	and.w	r3, r3, #3
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d001      	beq.n	800b772 <tcp_free_acked_segments+0xc6>
 800b76e:	2301      	movs	r3, #1
 800b770:	e000      	b.n	800b774 <tcp_free_acked_segments+0xc8>
 800b772:	2300      	movs	r3, #0
 800b774:	442b      	add	r3, r5
 800b776:	18e2      	adds	r2, r4, r3
 800b778:	4b09      	ldr	r3, [pc, #36]	@ (800b7a0 <tcp_free_acked_segments+0xf4>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800b77e:	2b00      	cmp	r3, #0
 800b780:	dd9c      	ble.n	800b6bc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800b782:	68bb      	ldr	r3, [r7, #8]
}
 800b784:	4618      	mov	r0, r3
 800b786:	3718      	adds	r7, #24
 800b788:	46bd      	mov	sp, r7
 800b78a:	bdb0      	pop	{r4, r5, r7, pc}
 800b78c:	08013708 	.word	0x08013708
 800b790:	080139f0 	.word	0x080139f0
 800b794:	08013754 	.word	0x08013754
 800b798:	200085e8 	.word	0x200085e8
 800b79c:	08013a18 	.word	0x08013a18
 800b7a0:	200085e4 	.word	0x200085e4

0800b7a4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b7a4:	b5b0      	push	{r4, r5, r7, lr}
 800b7a6:	b094      	sub	sp, #80	@ 0x50
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d106      	bne.n	800b7c4 <tcp_receive+0x20>
 800b7b6:	4b91      	ldr	r3, [pc, #580]	@ (800b9fc <tcp_receive+0x258>)
 800b7b8:	f240 427b 	movw	r2, #1147	@ 0x47b
 800b7bc:	4990      	ldr	r1, [pc, #576]	@ (800ba00 <tcp_receive+0x25c>)
 800b7be:	4891      	ldr	r0, [pc, #580]	@ (800ba04 <tcp_receive+0x260>)
 800b7c0:	f005 fe16 	bl	80113f0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	7d1b      	ldrb	r3, [r3, #20]
 800b7c8:	2b03      	cmp	r3, #3
 800b7ca:	d806      	bhi.n	800b7da <tcp_receive+0x36>
 800b7cc:	4b8b      	ldr	r3, [pc, #556]	@ (800b9fc <tcp_receive+0x258>)
 800b7ce:	f240 427c 	movw	r2, #1148	@ 0x47c
 800b7d2:	498d      	ldr	r1, [pc, #564]	@ (800ba08 <tcp_receive+0x264>)
 800b7d4:	488b      	ldr	r0, [pc, #556]	@ (800ba04 <tcp_receive+0x260>)
 800b7d6:	f005 fe0b 	bl	80113f0 <iprintf>

  if (flags & TCP_ACK) {
 800b7da:	4b8c      	ldr	r3, [pc, #560]	@ (800ba0c <tcp_receive+0x268>)
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	f003 0310 	and.w	r3, r3, #16
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	f000 8264 	beq.w	800bcb0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7f4:	4413      	add	r3, r2
 800b7f6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b7fc:	4b84      	ldr	r3, [pc, #528]	@ (800ba10 <tcp_receive+0x26c>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	1ad3      	subs	r3, r2, r3
 800b802:	2b00      	cmp	r3, #0
 800b804:	db1b      	blt.n	800b83e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b80a:	4b81      	ldr	r3, [pc, #516]	@ (800ba10 <tcp_receive+0x26c>)
 800b80c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b80e:	429a      	cmp	r2, r3
 800b810:	d106      	bne.n	800b820 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b816:	4b7f      	ldr	r3, [pc, #508]	@ (800ba14 <tcp_receive+0x270>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	1ad3      	subs	r3, r2, r3
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	db0e      	blt.n	800b83e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800b824:	4b7b      	ldr	r3, [pc, #492]	@ (800ba14 <tcp_receive+0x270>)
 800b826:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b828:	429a      	cmp	r2, r3
 800b82a:	d125      	bne.n	800b878 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b82c:	4b7a      	ldr	r3, [pc, #488]	@ (800ba18 <tcp_receive+0x274>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	89db      	ldrh	r3, [r3, #14]
 800b832:	b29a      	uxth	r2, r3
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d91c      	bls.n	800b878 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b83e:	4b76      	ldr	r3, [pc, #472]	@ (800ba18 <tcp_receive+0x274>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	89db      	ldrh	r3, [r3, #14]
 800b844:	b29a      	uxth	r2, r3
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b858:	429a      	cmp	r2, r3
 800b85a:	d205      	bcs.n	800b868 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800b868:	4b69      	ldr	r3, [pc, #420]	@ (800ba10 <tcp_receive+0x26c>)
 800b86a:	681a      	ldr	r2, [r3, #0]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800b870:	4b68      	ldr	r3, [pc, #416]	@ (800ba14 <tcp_receive+0x270>)
 800b872:	681a      	ldr	r2, [r3, #0]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b878:	4b66      	ldr	r3, [pc, #408]	@ (800ba14 <tcp_receive+0x270>)
 800b87a:	681a      	ldr	r2, [r3, #0]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b880:	1ad3      	subs	r3, r2, r3
 800b882:	2b00      	cmp	r3, #0
 800b884:	dc58      	bgt.n	800b938 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800b886:	4b65      	ldr	r3, [pc, #404]	@ (800ba1c <tcp_receive+0x278>)
 800b888:	881b      	ldrh	r3, [r3, #0]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d14b      	bne.n	800b926 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b892:	687a      	ldr	r2, [r7, #4]
 800b894:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800b898:	4413      	add	r3, r2
 800b89a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d142      	bne.n	800b926 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	db3d      	blt.n	800b926 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b8ae:	4b59      	ldr	r3, [pc, #356]	@ (800ba14 <tcp_receive+0x270>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	429a      	cmp	r2, r3
 800b8b4:	d137      	bne.n	800b926 <tcp_receive+0x182>
              found_dupack = 1;
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b8c0:	2bff      	cmp	r3, #255	@ 0xff
 800b8c2:	d007      	beq.n	800b8d4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b8ca:	3301      	adds	r3, #1
 800b8cc:	b2da      	uxtb	r2, r3
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b8da:	2b03      	cmp	r3, #3
 800b8dc:	d91b      	bls.n	800b916 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b8e8:	4413      	add	r3, r2
 800b8ea:	b29a      	uxth	r2, r3
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d30a      	bcc.n	800b90c <tcp_receive+0x168>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b900:	4413      	add	r3, r2
 800b902:	b29a      	uxth	r2, r3
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b90a:	e004      	b.n	800b916 <tcp_receive+0x172>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b912:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b91c:	2b02      	cmp	r3, #2
 800b91e:	d902      	bls.n	800b926 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f002 fb3f 	bl	800dfa4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800b926:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b928:	2b00      	cmp	r3, #0
 800b92a:	f040 8161 	bne.w	800bbf0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2200      	movs	r2, #0
 800b932:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b936:	e15b      	b.n	800bbf0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b938:	4b36      	ldr	r3, [pc, #216]	@ (800ba14 <tcp_receive+0x270>)
 800b93a:	681a      	ldr	r2, [r3, #0]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b940:	1ad3      	subs	r3, r2, r3
 800b942:	3b01      	subs	r3, #1
 800b944:	2b00      	cmp	r3, #0
 800b946:	f2c0 814e 	blt.w	800bbe6 <tcp_receive+0x442>
 800b94a:	4b32      	ldr	r3, [pc, #200]	@ (800ba14 <tcp_receive+0x270>)
 800b94c:	681a      	ldr	r2, [r3, #0]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b952:	1ad3      	subs	r3, r2, r3
 800b954:	2b00      	cmp	r3, #0
 800b956:	f300 8146 	bgt.w	800bbe6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	8b5b      	ldrh	r3, [r3, #26]
 800b95e:	f003 0304 	and.w	r3, r3, #4
 800b962:	2b00      	cmp	r3, #0
 800b964:	d010      	beq.n	800b988 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	8b5b      	ldrh	r3, [r3, #26]
 800b96a:	f023 0304 	bic.w	r3, r3, #4
 800b96e:	b29a      	uxth	r2, r3
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2200      	movs	r2, #0
 800b984:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2200      	movs	r2, #0
 800b98c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b996:	10db      	asrs	r3, r3, #3
 800b998:	b21b      	sxth	r3, r3
 800b99a:	b29a      	uxth	r2, r3
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b9a2:	b29b      	uxth	r3, r3
 800b9a4:	4413      	add	r3, r2
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	b21a      	sxth	r2, r3
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800b9b0:	4b18      	ldr	r3, [pc, #96]	@ (800ba14 <tcp_receive+0x270>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	b29a      	uxth	r2, r3
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9ba:	b29b      	uxth	r3, r3
 800b9bc:	1ad3      	subs	r3, r2, r3
 800b9be:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800b9c8:	4b12      	ldr	r3, [pc, #72]	@ (800ba14 <tcp_receive+0x270>)
 800b9ca:	681a      	ldr	r2, [r3, #0]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	7d1b      	ldrb	r3, [r3, #20]
 800b9d4:	2b03      	cmp	r3, #3
 800b9d6:	f240 8097 	bls.w	800bb08 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d245      	bcs.n	800ba76 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	8b5b      	ldrh	r3, [r3, #26]
 800b9ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d014      	beq.n	800ba20 <tcp_receive+0x27c>
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	e013      	b.n	800ba22 <tcp_receive+0x27e>
 800b9fa:	bf00      	nop
 800b9fc:	08013708 	.word	0x08013708
 800ba00:	08013a38 	.word	0x08013a38
 800ba04:	08013754 	.word	0x08013754
 800ba08:	08013a54 	.word	0x08013a54
 800ba0c:	200085ec 	.word	0x200085ec
 800ba10:	200085e0 	.word	0x200085e0
 800ba14:	200085e4 	.word	0x200085e4
 800ba18:	200085d0 	.word	0x200085d0
 800ba1c:	200085ea 	.word	0x200085ea
 800ba20:	2302      	movs	r3, #2
 800ba22:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ba26:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800ba2a:	b29a      	uxth	r2, r3
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ba30:	fb12 f303 	smulbb	r3, r2, r3
 800ba34:	b29b      	uxth	r3, r3
 800ba36:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	bf28      	it	cs
 800ba3c:	4613      	movcs	r3, r2
 800ba3e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ba46:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ba48:	4413      	add	r3, r2
 800ba4a:	b29a      	uxth	r2, r3
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d309      	bcc.n	800ba6a <tcp_receive+0x2c6>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800ba5c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ba5e:	4413      	add	r3, r2
 800ba60:	b29a      	uxth	r2, r3
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ba68:	e04e      	b.n	800bb08 <tcp_receive+0x364>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ba70:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ba74:	e048      	b.n	800bb08 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800ba7c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ba7e:	4413      	add	r3, r2
 800ba80:	b29a      	uxth	r2, r3
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d309      	bcc.n	800baa0 <tcp_receive+0x2fc>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800ba92:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ba94:	4413      	add	r3, r2
 800ba96:	b29a      	uxth	r2, r3
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ba9e:	e004      	b.n	800baaa <tcp_receive+0x306>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800baa6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d326      	bcc.n	800bb08 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bac6:	1ad3      	subs	r3, r2, r3
 800bac8:	b29a      	uxth	r2, r3
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bada:	4413      	add	r3, r2
 800badc:	b29a      	uxth	r2, r3
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d30a      	bcc.n	800bafe <tcp_receive+0x35a>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800baf2:	4413      	add	r3, r2
 800baf4:	b29a      	uxth	r2, r3
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800bafc:	e004      	b.n	800bb08 <tcp_receive+0x364>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bb04:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb10:	4a98      	ldr	r2, [pc, #608]	@ (800bd74 <tcp_receive+0x5d0>)
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f7ff fdca 	bl	800b6ac <tcp_free_acked_segments>
 800bb18:	4602      	mov	r2, r0
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb26:	4a94      	ldr	r2, [pc, #592]	@ (800bd78 <tcp_receive+0x5d4>)
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f7ff fdbf 	bl	800b6ac <tcp_free_acked_segments>
 800bb2e:	4602      	mov	r2, r0
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d104      	bne.n	800bb46 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bb42:	861a      	strh	r2, [r3, #48]	@ 0x30
 800bb44:	e002      	b.n	800bb4c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d103      	bne.n	800bb62 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800bb68:	4b84      	ldr	r3, [pc, #528]	@ (800bd7c <tcp_receive+0x5d8>)
 800bb6a:	881b      	ldrh	r3, [r3, #0]
 800bb6c:	4413      	add	r3, r2
 800bb6e:	b29a      	uxth	r2, r3
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	8b5b      	ldrh	r3, [r3, #26]
 800bb7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d035      	beq.n	800bbee <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d118      	bne.n	800bbbc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d00c      	beq.n	800bbac <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb9a:	68db      	ldr	r3, [r3, #12]
 800bb9c:	685b      	ldr	r3, [r3, #4]
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7fa fefe 	bl	80069a0 <lwip_htonl>
 800bba4:	4603      	mov	r3, r0
 800bba6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	dc20      	bgt.n	800bbee <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	8b5b      	ldrh	r3, [r3, #26]
 800bbb0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bbb4:	b29a      	uxth	r2, r3
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bbba:	e018      	b.n	800bbee <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbc4:	68db      	ldr	r3, [r3, #12]
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f7fa fee9 	bl	80069a0 <lwip_htonl>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	1ae3      	subs	r3, r4, r3
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	dc0b      	bgt.n	800bbee <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	8b5b      	ldrh	r3, [r3, #26]
 800bbda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bbde:	b29a      	uxth	r2, r3
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bbe4:	e003      	b.n	800bbee <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f002 fbc8 	bl	800e37c <tcp_send_empty_ack>
 800bbec:	e000      	b.n	800bbf0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bbee:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d05b      	beq.n	800bcb0 <tcp_receive+0x50c>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bbfc:	4b60      	ldr	r3, [pc, #384]	@ (800bd80 <tcp_receive+0x5dc>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	1ad3      	subs	r3, r2, r3
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	da54      	bge.n	800bcb0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800bc06:	4b5f      	ldr	r3, [pc, #380]	@ (800bd84 <tcp_receive+0x5e0>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	b29a      	uxth	r2, r3
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc10:	b29b      	uxth	r3, r3
 800bc12:	1ad3      	subs	r3, r2, r3
 800bc14:	b29b      	uxth	r3, r3
 800bc16:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800bc1a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800bc24:	10db      	asrs	r3, r3, #3
 800bc26:	b21b      	sxth	r3, r3
 800bc28:	b29b      	uxth	r3, r3
 800bc2a:	1ad3      	subs	r3, r2, r3
 800bc2c:	b29b      	uxth	r3, r3
 800bc2e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800bc38:	b29a      	uxth	r2, r3
 800bc3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800bc3e:	4413      	add	r3, r2
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	b21a      	sxth	r2, r3
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800bc48:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	da05      	bge.n	800bc5c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800bc50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800bc54:	425b      	negs	r3, r3
 800bc56:	b29b      	uxth	r3, r3
 800bc58:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800bc5c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800bc66:	109b      	asrs	r3, r3, #2
 800bc68:	b21b      	sxth	r3, r3
 800bc6a:	b29b      	uxth	r3, r3
 800bc6c:	1ad3      	subs	r3, r2, r3
 800bc6e:	b29b      	uxth	r3, r3
 800bc70:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800bc7a:	b29a      	uxth	r2, r3
 800bc7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800bc80:	4413      	add	r3, r2
 800bc82:	b29b      	uxth	r3, r3
 800bc84:	b21a      	sxth	r2, r3
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800bc90:	10db      	asrs	r3, r3, #3
 800bc92:	b21b      	sxth	r3, r3
 800bc94:	b29a      	uxth	r2, r3
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800bc9c:	b29b      	uxth	r3, r3
 800bc9e:	4413      	add	r3, r2
 800bca0:	b29b      	uxth	r3, r3
 800bca2:	b21a      	sxth	r2, r3
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2200      	movs	r2, #0
 800bcae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800bcb0:	4b35      	ldr	r3, [pc, #212]	@ (800bd88 <tcp_receive+0x5e4>)
 800bcb2:	881b      	ldrh	r3, [r3, #0]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	f000 84df 	beq.w	800c678 <tcp_receive+0xed4>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	7d1b      	ldrb	r3, [r3, #20]
 800bcbe:	2b06      	cmp	r3, #6
 800bcc0:	f200 84da 	bhi.w	800c678 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bcc8:	4b30      	ldr	r3, [pc, #192]	@ (800bd8c <tcp_receive+0x5e8>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	1ad3      	subs	r3, r2, r3
 800bcce:	3b01      	subs	r3, #1
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	f2c0 808f 	blt.w	800bdf4 <tcp_receive+0x650>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bcda:	4b2b      	ldr	r3, [pc, #172]	@ (800bd88 <tcp_receive+0x5e4>)
 800bcdc:	881b      	ldrh	r3, [r3, #0]
 800bcde:	4619      	mov	r1, r3
 800bce0:	4b2a      	ldr	r3, [pc, #168]	@ (800bd8c <tcp_receive+0x5e8>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	440b      	add	r3, r1
 800bce6:	1ad3      	subs	r3, r2, r3
 800bce8:	3301      	adds	r3, #1
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	f300 8082 	bgt.w	800bdf4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800bcf0:	4b27      	ldr	r3, [pc, #156]	@ (800bd90 <tcp_receive+0x5ec>)
 800bcf2:	685b      	ldr	r3, [r3, #4]
 800bcf4:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bcfa:	4b24      	ldr	r3, [pc, #144]	@ (800bd8c <tcp_receive+0x5e8>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	1ad3      	subs	r3, r2, r3
 800bd00:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800bd02:	4b23      	ldr	r3, [pc, #140]	@ (800bd90 <tcp_receive+0x5ec>)
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d106      	bne.n	800bd18 <tcp_receive+0x574>
 800bd0a:	4b22      	ldr	r3, [pc, #136]	@ (800bd94 <tcp_receive+0x5f0>)
 800bd0c:	f240 5294 	movw	r2, #1428	@ 0x594
 800bd10:	4921      	ldr	r1, [pc, #132]	@ (800bd98 <tcp_receive+0x5f4>)
 800bd12:	4822      	ldr	r0, [pc, #136]	@ (800bd9c <tcp_receive+0x5f8>)
 800bd14:	f005 fb6c 	bl	80113f0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800bd18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd1a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d906      	bls.n	800bd30 <tcp_receive+0x58c>
 800bd22:	4b1c      	ldr	r3, [pc, #112]	@ (800bd94 <tcp_receive+0x5f0>)
 800bd24:	f240 5295 	movw	r2, #1429	@ 0x595
 800bd28:	491d      	ldr	r1, [pc, #116]	@ (800bda0 <tcp_receive+0x5fc>)
 800bd2a:	481c      	ldr	r0, [pc, #112]	@ (800bd9c <tcp_receive+0x5f8>)
 800bd2c:	f005 fb60 	bl	80113f0 <iprintf>
      off = (u16_t)off32;
 800bd30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd32:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800bd36:	4b16      	ldr	r3, [pc, #88]	@ (800bd90 <tcp_receive+0x5ec>)
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	891b      	ldrh	r3, [r3, #8]
 800bd3c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d906      	bls.n	800bd52 <tcp_receive+0x5ae>
 800bd44:	4b13      	ldr	r3, [pc, #76]	@ (800bd94 <tcp_receive+0x5f0>)
 800bd46:	f240 5297 	movw	r2, #1431	@ 0x597
 800bd4a:	4916      	ldr	r1, [pc, #88]	@ (800bda4 <tcp_receive+0x600>)
 800bd4c:	4813      	ldr	r0, [pc, #76]	@ (800bd9c <tcp_receive+0x5f8>)
 800bd4e:	f005 fb4f 	bl	80113f0 <iprintf>
      inseg.len -= off;
 800bd52:	4b0f      	ldr	r3, [pc, #60]	@ (800bd90 <tcp_receive+0x5ec>)
 800bd54:	891a      	ldrh	r2, [r3, #8]
 800bd56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bd5a:	1ad3      	subs	r3, r2, r3
 800bd5c:	b29a      	uxth	r2, r3
 800bd5e:	4b0c      	ldr	r3, [pc, #48]	@ (800bd90 <tcp_receive+0x5ec>)
 800bd60:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800bd62:	4b0b      	ldr	r3, [pc, #44]	@ (800bd90 <tcp_receive+0x5ec>)
 800bd64:	685b      	ldr	r3, [r3, #4]
 800bd66:	891a      	ldrh	r2, [r3, #8]
 800bd68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bd6c:	1ad3      	subs	r3, r2, r3
 800bd6e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800bd70:	e02a      	b.n	800bdc8 <tcp_receive+0x624>
 800bd72:	bf00      	nop
 800bd74:	08013a70 	.word	0x08013a70
 800bd78:	08013a78 	.word	0x08013a78
 800bd7c:	200085e8 	.word	0x200085e8
 800bd80:	200085e4 	.word	0x200085e4
 800bd84:	200085a8 	.word	0x200085a8
 800bd88:	200085ea 	.word	0x200085ea
 800bd8c:	200085e0 	.word	0x200085e0
 800bd90:	200085c0 	.word	0x200085c0
 800bd94:	08013708 	.word	0x08013708
 800bd98:	08013a80 	.word	0x08013a80
 800bd9c:	08013754 	.word	0x08013754
 800bda0:	08013a90 	.word	0x08013a90
 800bda4:	08013aa0 	.word	0x08013aa0
        off -= p->len;
 800bda8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdaa:	895b      	ldrh	r3, [r3, #10]
 800bdac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800bdb0:	1ad3      	subs	r3, r2, r3
 800bdb2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800bdb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdb8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800bdba:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800bdbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800bdc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800bdc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdca:	895b      	ldrh	r3, [r3, #10]
 800bdcc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d8e9      	bhi.n	800bda8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800bdd4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bdd8:	4619      	mov	r1, r3
 800bdda:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800bddc:	f7fc f8d4 	bl	8007f88 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bde4:	4a90      	ldr	r2, [pc, #576]	@ (800c028 <tcp_receive+0x884>)
 800bde6:	6013      	str	r3, [r2, #0]
 800bde8:	4b90      	ldr	r3, [pc, #576]	@ (800c02c <tcp_receive+0x888>)
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	4a8e      	ldr	r2, [pc, #568]	@ (800c028 <tcp_receive+0x884>)
 800bdee:	6812      	ldr	r2, [r2, #0]
 800bdf0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800bdf2:	e00d      	b.n	800be10 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800bdf4:	4b8c      	ldr	r3, [pc, #560]	@ (800c028 <tcp_receive+0x884>)
 800bdf6:	681a      	ldr	r2, [r3, #0]
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdfc:	1ad3      	subs	r3, r2, r3
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	da06      	bge.n	800be10 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	8b5b      	ldrh	r3, [r3, #26]
 800be06:	f043 0302 	orr.w	r3, r3, #2
 800be0a:	b29a      	uxth	r2, r3
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800be10:	4b85      	ldr	r3, [pc, #532]	@ (800c028 <tcp_receive+0x884>)
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be18:	1ad3      	subs	r3, r2, r3
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	f2c0 8427 	blt.w	800c66e <tcp_receive+0xeca>
 800be20:	4b81      	ldr	r3, [pc, #516]	@ (800c028 <tcp_receive+0x884>)
 800be22:	681a      	ldr	r2, [r3, #0]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be28:	6879      	ldr	r1, [r7, #4]
 800be2a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800be2c:	440b      	add	r3, r1
 800be2e:	1ad3      	subs	r3, r2, r3
 800be30:	3301      	adds	r3, #1
 800be32:	2b00      	cmp	r3, #0
 800be34:	f300 841b 	bgt.w	800c66e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800be3c:	4b7a      	ldr	r3, [pc, #488]	@ (800c028 <tcp_receive+0x884>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	429a      	cmp	r2, r3
 800be42:	f040 8298 	bne.w	800c376 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800be46:	4b79      	ldr	r3, [pc, #484]	@ (800c02c <tcp_receive+0x888>)
 800be48:	891c      	ldrh	r4, [r3, #8]
 800be4a:	4b78      	ldr	r3, [pc, #480]	@ (800c02c <tcp_receive+0x888>)
 800be4c:	68db      	ldr	r3, [r3, #12]
 800be4e:	899b      	ldrh	r3, [r3, #12]
 800be50:	b29b      	uxth	r3, r3
 800be52:	4618      	mov	r0, r3
 800be54:	f7fa fd8e 	bl	8006974 <lwip_htons>
 800be58:	4603      	mov	r3, r0
 800be5a:	b2db      	uxtb	r3, r3
 800be5c:	f003 0303 	and.w	r3, r3, #3
 800be60:	2b00      	cmp	r3, #0
 800be62:	d001      	beq.n	800be68 <tcp_receive+0x6c4>
 800be64:	2301      	movs	r3, #1
 800be66:	e000      	b.n	800be6a <tcp_receive+0x6c6>
 800be68:	2300      	movs	r3, #0
 800be6a:	4423      	add	r3, r4
 800be6c:	b29a      	uxth	r2, r3
 800be6e:	4b70      	ldr	r3, [pc, #448]	@ (800c030 <tcp_receive+0x88c>)
 800be70:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800be76:	4b6e      	ldr	r3, [pc, #440]	@ (800c030 <tcp_receive+0x88c>)
 800be78:	881b      	ldrh	r3, [r3, #0]
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d274      	bcs.n	800bf68 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800be7e:	4b6b      	ldr	r3, [pc, #428]	@ (800c02c <tcp_receive+0x888>)
 800be80:	68db      	ldr	r3, [r3, #12]
 800be82:	899b      	ldrh	r3, [r3, #12]
 800be84:	b29b      	uxth	r3, r3
 800be86:	4618      	mov	r0, r3
 800be88:	f7fa fd74 	bl	8006974 <lwip_htons>
 800be8c:	4603      	mov	r3, r0
 800be8e:	b2db      	uxtb	r3, r3
 800be90:	f003 0301 	and.w	r3, r3, #1
 800be94:	2b00      	cmp	r3, #0
 800be96:	d01e      	beq.n	800bed6 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800be98:	4b64      	ldr	r3, [pc, #400]	@ (800c02c <tcp_receive+0x888>)
 800be9a:	68db      	ldr	r3, [r3, #12]
 800be9c:	899b      	ldrh	r3, [r3, #12]
 800be9e:	b29b      	uxth	r3, r3
 800bea0:	b21b      	sxth	r3, r3
 800bea2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bea6:	b21c      	sxth	r4, r3
 800bea8:	4b60      	ldr	r3, [pc, #384]	@ (800c02c <tcp_receive+0x888>)
 800beaa:	68db      	ldr	r3, [r3, #12]
 800beac:	899b      	ldrh	r3, [r3, #12]
 800beae:	b29b      	uxth	r3, r3
 800beb0:	4618      	mov	r0, r3
 800beb2:	f7fa fd5f 	bl	8006974 <lwip_htons>
 800beb6:	4603      	mov	r3, r0
 800beb8:	b2db      	uxtb	r3, r3
 800beba:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800bebe:	b29b      	uxth	r3, r3
 800bec0:	4618      	mov	r0, r3
 800bec2:	f7fa fd57 	bl	8006974 <lwip_htons>
 800bec6:	4603      	mov	r3, r0
 800bec8:	b21b      	sxth	r3, r3
 800beca:	4323      	orrs	r3, r4
 800becc:	b21a      	sxth	r2, r3
 800bece:	4b57      	ldr	r3, [pc, #348]	@ (800c02c <tcp_receive+0x888>)
 800bed0:	68db      	ldr	r3, [r3, #12]
 800bed2:	b292      	uxth	r2, r2
 800bed4:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800beda:	4b54      	ldr	r3, [pc, #336]	@ (800c02c <tcp_receive+0x888>)
 800bedc:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800bede:	4b53      	ldr	r3, [pc, #332]	@ (800c02c <tcp_receive+0x888>)
 800bee0:	68db      	ldr	r3, [r3, #12]
 800bee2:	899b      	ldrh	r3, [r3, #12]
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7fa fd44 	bl	8006974 <lwip_htons>
 800beec:	4603      	mov	r3, r0
 800beee:	b2db      	uxtb	r3, r3
 800bef0:	f003 0302 	and.w	r3, r3, #2
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d005      	beq.n	800bf04 <tcp_receive+0x760>
            inseg.len -= 1;
 800bef8:	4b4c      	ldr	r3, [pc, #304]	@ (800c02c <tcp_receive+0x888>)
 800befa:	891b      	ldrh	r3, [r3, #8]
 800befc:	3b01      	subs	r3, #1
 800befe:	b29a      	uxth	r2, r3
 800bf00:	4b4a      	ldr	r3, [pc, #296]	@ (800c02c <tcp_receive+0x888>)
 800bf02:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800bf04:	4b49      	ldr	r3, [pc, #292]	@ (800c02c <tcp_receive+0x888>)
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	4a48      	ldr	r2, [pc, #288]	@ (800c02c <tcp_receive+0x888>)
 800bf0a:	8912      	ldrh	r2, [r2, #8]
 800bf0c:	4611      	mov	r1, r2
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f7fb ff3a 	bl	8007d88 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800bf14:	4b45      	ldr	r3, [pc, #276]	@ (800c02c <tcp_receive+0x888>)
 800bf16:	891c      	ldrh	r4, [r3, #8]
 800bf18:	4b44      	ldr	r3, [pc, #272]	@ (800c02c <tcp_receive+0x888>)
 800bf1a:	68db      	ldr	r3, [r3, #12]
 800bf1c:	899b      	ldrh	r3, [r3, #12]
 800bf1e:	b29b      	uxth	r3, r3
 800bf20:	4618      	mov	r0, r3
 800bf22:	f7fa fd27 	bl	8006974 <lwip_htons>
 800bf26:	4603      	mov	r3, r0
 800bf28:	b2db      	uxtb	r3, r3
 800bf2a:	f003 0303 	and.w	r3, r3, #3
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d001      	beq.n	800bf36 <tcp_receive+0x792>
 800bf32:	2301      	movs	r3, #1
 800bf34:	e000      	b.n	800bf38 <tcp_receive+0x794>
 800bf36:	2300      	movs	r3, #0
 800bf38:	4423      	add	r3, r4
 800bf3a:	b29a      	uxth	r2, r3
 800bf3c:	4b3c      	ldr	r3, [pc, #240]	@ (800c030 <tcp_receive+0x88c>)
 800bf3e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bf40:	4b3b      	ldr	r3, [pc, #236]	@ (800c030 <tcp_receive+0x88c>)
 800bf42:	881b      	ldrh	r3, [r3, #0]
 800bf44:	461a      	mov	r2, r3
 800bf46:	4b38      	ldr	r3, [pc, #224]	@ (800c028 <tcp_receive+0x884>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	441a      	add	r2, r3
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf50:	6879      	ldr	r1, [r7, #4]
 800bf52:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bf54:	440b      	add	r3, r1
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d006      	beq.n	800bf68 <tcp_receive+0x7c4>
 800bf5a:	4b36      	ldr	r3, [pc, #216]	@ (800c034 <tcp_receive+0x890>)
 800bf5c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800bf60:	4935      	ldr	r1, [pc, #212]	@ (800c038 <tcp_receive+0x894>)
 800bf62:	4836      	ldr	r0, [pc, #216]	@ (800c03c <tcp_receive+0x898>)
 800bf64:	f005 fa44 	bl	80113f0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	f000 80e6 	beq.w	800c13e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bf72:	4b2e      	ldr	r3, [pc, #184]	@ (800c02c <tcp_receive+0x888>)
 800bf74:	68db      	ldr	r3, [r3, #12]
 800bf76:	899b      	ldrh	r3, [r3, #12]
 800bf78:	b29b      	uxth	r3, r3
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7fa fcfa 	bl	8006974 <lwip_htons>
 800bf80:	4603      	mov	r3, r0
 800bf82:	b2db      	uxtb	r3, r3
 800bf84:	f003 0301 	and.w	r3, r3, #1
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d010      	beq.n	800bfae <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800bf8c:	e00a      	b.n	800bfa4 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf92:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf98:	681a      	ldr	r2, [r3, #0]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800bf9e:	68f8      	ldr	r0, [r7, #12]
 800bfa0:	f7fd fca7 	bl	80098f2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d1f0      	bne.n	800bf8e <tcp_receive+0x7ea>
 800bfac:	e0c7      	b.n	800c13e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bfb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800bfb4:	e051      	b.n	800c05a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800bfb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfb8:	68db      	ldr	r3, [r3, #12]
 800bfba:	899b      	ldrh	r3, [r3, #12]
 800bfbc:	b29b      	uxth	r3, r3
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7fa fcd8 	bl	8006974 <lwip_htons>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	b2db      	uxtb	r3, r3
 800bfc8:	f003 0301 	and.w	r3, r3, #1
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d03c      	beq.n	800c04a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800bfd0:	4b16      	ldr	r3, [pc, #88]	@ (800c02c <tcp_receive+0x888>)
 800bfd2:	68db      	ldr	r3, [r3, #12]
 800bfd4:	899b      	ldrh	r3, [r3, #12]
 800bfd6:	b29b      	uxth	r3, r3
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7fa fccb 	bl	8006974 <lwip_htons>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	b2db      	uxtb	r3, r3
 800bfe2:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d12f      	bne.n	800c04a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800bfea:	4b10      	ldr	r3, [pc, #64]	@ (800c02c <tcp_receive+0x888>)
 800bfec:	68db      	ldr	r3, [r3, #12]
 800bfee:	899b      	ldrh	r3, [r3, #12]
 800bff0:	b29c      	uxth	r4, r3
 800bff2:	2001      	movs	r0, #1
 800bff4:	f7fa fcbe 	bl	8006974 <lwip_htons>
 800bff8:	4603      	mov	r3, r0
 800bffa:	461a      	mov	r2, r3
 800bffc:	4b0b      	ldr	r3, [pc, #44]	@ (800c02c <tcp_receive+0x888>)
 800bffe:	68db      	ldr	r3, [r3, #12]
 800c000:	4322      	orrs	r2, r4
 800c002:	b292      	uxth	r2, r2
 800c004:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c006:	4b09      	ldr	r3, [pc, #36]	@ (800c02c <tcp_receive+0x888>)
 800c008:	891c      	ldrh	r4, [r3, #8]
 800c00a:	4b08      	ldr	r3, [pc, #32]	@ (800c02c <tcp_receive+0x888>)
 800c00c:	68db      	ldr	r3, [r3, #12]
 800c00e:	899b      	ldrh	r3, [r3, #12]
 800c010:	b29b      	uxth	r3, r3
 800c012:	4618      	mov	r0, r3
 800c014:	f7fa fcae 	bl	8006974 <lwip_htons>
 800c018:	4603      	mov	r3, r0
 800c01a:	b2db      	uxtb	r3, r3
 800c01c:	f003 0303 	and.w	r3, r3, #3
 800c020:	2b00      	cmp	r3, #0
 800c022:	d00d      	beq.n	800c040 <tcp_receive+0x89c>
 800c024:	2301      	movs	r3, #1
 800c026:	e00c      	b.n	800c042 <tcp_receive+0x89e>
 800c028:	200085e0 	.word	0x200085e0
 800c02c:	200085c0 	.word	0x200085c0
 800c030:	200085ea 	.word	0x200085ea
 800c034:	08013708 	.word	0x08013708
 800c038:	08013ab0 	.word	0x08013ab0
 800c03c:	08013754 	.word	0x08013754
 800c040:	2300      	movs	r3, #0
 800c042:	4423      	add	r3, r4
 800c044:	b29a      	uxth	r2, r3
 800c046:	4b98      	ldr	r3, [pc, #608]	@ (800c2a8 <tcp_receive+0xb04>)
 800c048:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c04a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c04c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c04e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800c054:	6938      	ldr	r0, [r7, #16]
 800c056:	f7fd fc4c 	bl	80098f2 <tcp_seg_free>
            while (next &&
 800c05a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d00e      	beq.n	800c07e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c060:	4b91      	ldr	r3, [pc, #580]	@ (800c2a8 <tcp_receive+0xb04>)
 800c062:	881b      	ldrh	r3, [r3, #0]
 800c064:	461a      	mov	r2, r3
 800c066:	4b91      	ldr	r3, [pc, #580]	@ (800c2ac <tcp_receive+0xb08>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	441a      	add	r2, r3
 800c06c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c06e:	68db      	ldr	r3, [r3, #12]
 800c070:	685b      	ldr	r3, [r3, #4]
 800c072:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c074:	8909      	ldrh	r1, [r1, #8]
 800c076:	440b      	add	r3, r1
 800c078:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	da9b      	bge.n	800bfb6 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c07e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c080:	2b00      	cmp	r3, #0
 800c082:	d059      	beq.n	800c138 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800c084:	4b88      	ldr	r3, [pc, #544]	@ (800c2a8 <tcp_receive+0xb04>)
 800c086:	881b      	ldrh	r3, [r3, #0]
 800c088:	461a      	mov	r2, r3
 800c08a:	4b88      	ldr	r3, [pc, #544]	@ (800c2ac <tcp_receive+0xb08>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	441a      	add	r2, r3
 800c090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c092:	68db      	ldr	r3, [r3, #12]
 800c094:	685b      	ldr	r3, [r3, #4]
 800c096:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c098:	2b00      	cmp	r3, #0
 800c09a:	dd4d      	ble.n	800c138 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c09c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c09e:	68db      	ldr	r3, [r3, #12]
 800c0a0:	685b      	ldr	r3, [r3, #4]
 800c0a2:	b29a      	uxth	r2, r3
 800c0a4:	4b81      	ldr	r3, [pc, #516]	@ (800c2ac <tcp_receive+0xb08>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	b29b      	uxth	r3, r3
 800c0aa:	1ad3      	subs	r3, r2, r3
 800c0ac:	b29a      	uxth	r2, r3
 800c0ae:	4b80      	ldr	r3, [pc, #512]	@ (800c2b0 <tcp_receive+0xb0c>)
 800c0b0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c0b2:	4b7f      	ldr	r3, [pc, #508]	@ (800c2b0 <tcp_receive+0xb0c>)
 800c0b4:	68db      	ldr	r3, [r3, #12]
 800c0b6:	899b      	ldrh	r3, [r3, #12]
 800c0b8:	b29b      	uxth	r3, r3
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f7fa fc5a 	bl	8006974 <lwip_htons>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	b2db      	uxtb	r3, r3
 800c0c4:	f003 0302 	and.w	r3, r3, #2
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d005      	beq.n	800c0d8 <tcp_receive+0x934>
                inseg.len -= 1;
 800c0cc:	4b78      	ldr	r3, [pc, #480]	@ (800c2b0 <tcp_receive+0xb0c>)
 800c0ce:	891b      	ldrh	r3, [r3, #8]
 800c0d0:	3b01      	subs	r3, #1
 800c0d2:	b29a      	uxth	r2, r3
 800c0d4:	4b76      	ldr	r3, [pc, #472]	@ (800c2b0 <tcp_receive+0xb0c>)
 800c0d6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c0d8:	4b75      	ldr	r3, [pc, #468]	@ (800c2b0 <tcp_receive+0xb0c>)
 800c0da:	685b      	ldr	r3, [r3, #4]
 800c0dc:	4a74      	ldr	r2, [pc, #464]	@ (800c2b0 <tcp_receive+0xb0c>)
 800c0de:	8912      	ldrh	r2, [r2, #8]
 800c0e0:	4611      	mov	r1, r2
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7fb fe50 	bl	8007d88 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c0e8:	4b71      	ldr	r3, [pc, #452]	@ (800c2b0 <tcp_receive+0xb0c>)
 800c0ea:	891c      	ldrh	r4, [r3, #8]
 800c0ec:	4b70      	ldr	r3, [pc, #448]	@ (800c2b0 <tcp_receive+0xb0c>)
 800c0ee:	68db      	ldr	r3, [r3, #12]
 800c0f0:	899b      	ldrh	r3, [r3, #12]
 800c0f2:	b29b      	uxth	r3, r3
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f7fa fc3d 	bl	8006974 <lwip_htons>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	b2db      	uxtb	r3, r3
 800c0fe:	f003 0303 	and.w	r3, r3, #3
 800c102:	2b00      	cmp	r3, #0
 800c104:	d001      	beq.n	800c10a <tcp_receive+0x966>
 800c106:	2301      	movs	r3, #1
 800c108:	e000      	b.n	800c10c <tcp_receive+0x968>
 800c10a:	2300      	movs	r3, #0
 800c10c:	4423      	add	r3, r4
 800c10e:	b29a      	uxth	r2, r3
 800c110:	4b65      	ldr	r3, [pc, #404]	@ (800c2a8 <tcp_receive+0xb04>)
 800c112:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c114:	4b64      	ldr	r3, [pc, #400]	@ (800c2a8 <tcp_receive+0xb04>)
 800c116:	881b      	ldrh	r3, [r3, #0]
 800c118:	461a      	mov	r2, r3
 800c11a:	4b64      	ldr	r3, [pc, #400]	@ (800c2ac <tcp_receive+0xb08>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	441a      	add	r2, r3
 800c120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c122:	68db      	ldr	r3, [r3, #12]
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	429a      	cmp	r2, r3
 800c128:	d006      	beq.n	800c138 <tcp_receive+0x994>
 800c12a:	4b62      	ldr	r3, [pc, #392]	@ (800c2b4 <tcp_receive+0xb10>)
 800c12c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800c130:	4961      	ldr	r1, [pc, #388]	@ (800c2b8 <tcp_receive+0xb14>)
 800c132:	4862      	ldr	r0, [pc, #392]	@ (800c2bc <tcp_receive+0xb18>)
 800c134:	f005 f95c 	bl	80113f0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c13c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c13e:	4b5a      	ldr	r3, [pc, #360]	@ (800c2a8 <tcp_receive+0xb04>)
 800c140:	881b      	ldrh	r3, [r3, #0]
 800c142:	461a      	mov	r2, r3
 800c144:	4b59      	ldr	r3, [pc, #356]	@ (800c2ac <tcp_receive+0xb08>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	441a      	add	r2, r3
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c152:	4b55      	ldr	r3, [pc, #340]	@ (800c2a8 <tcp_receive+0xb04>)
 800c154:	881b      	ldrh	r3, [r3, #0]
 800c156:	429a      	cmp	r2, r3
 800c158:	d206      	bcs.n	800c168 <tcp_receive+0x9c4>
 800c15a:	4b56      	ldr	r3, [pc, #344]	@ (800c2b4 <tcp_receive+0xb10>)
 800c15c:	f240 6207 	movw	r2, #1543	@ 0x607
 800c160:	4957      	ldr	r1, [pc, #348]	@ (800c2c0 <tcp_receive+0xb1c>)
 800c162:	4856      	ldr	r0, [pc, #344]	@ (800c2bc <tcp_receive+0xb18>)
 800c164:	f005 f944 	bl	80113f0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c16c:	4b4e      	ldr	r3, [pc, #312]	@ (800c2a8 <tcp_receive+0xb04>)
 800c16e:	881b      	ldrh	r3, [r3, #0]
 800c170:	1ad3      	subs	r3, r2, r3
 800c172:	b29a      	uxth	r2, r3
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f7fc fe93 	bl	8008ea4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c17e:	4b4c      	ldr	r3, [pc, #304]	@ (800c2b0 <tcp_receive+0xb0c>)
 800c180:	685b      	ldr	r3, [r3, #4]
 800c182:	891b      	ldrh	r3, [r3, #8]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d006      	beq.n	800c196 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800c188:	4b49      	ldr	r3, [pc, #292]	@ (800c2b0 <tcp_receive+0xb0c>)
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	4a4d      	ldr	r2, [pc, #308]	@ (800c2c4 <tcp_receive+0xb20>)
 800c18e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c190:	4b47      	ldr	r3, [pc, #284]	@ (800c2b0 <tcp_receive+0xb0c>)
 800c192:	2200      	movs	r2, #0
 800c194:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c196:	4b46      	ldr	r3, [pc, #280]	@ (800c2b0 <tcp_receive+0xb0c>)
 800c198:	68db      	ldr	r3, [r3, #12]
 800c19a:	899b      	ldrh	r3, [r3, #12]
 800c19c:	b29b      	uxth	r3, r3
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7fa fbe8 	bl	8006974 <lwip_htons>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	f003 0301 	and.w	r3, r3, #1
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	f000 80b8 	beq.w	800c322 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c1b2:	4b45      	ldr	r3, [pc, #276]	@ (800c2c8 <tcp_receive+0xb24>)
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	f043 0320 	orr.w	r3, r3, #32
 800c1ba:	b2da      	uxtb	r2, r3
 800c1bc:	4b42      	ldr	r3, [pc, #264]	@ (800c2c8 <tcp_receive+0xb24>)
 800c1be:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c1c0:	e0af      	b.n	800c322 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c1c6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c1cc:	68db      	ldr	r3, [r3, #12]
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	4a36      	ldr	r2, [pc, #216]	@ (800c2ac <tcp_receive+0xb08>)
 800c1d2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	891b      	ldrh	r3, [r3, #8]
 800c1d8:	461c      	mov	r4, r3
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	68db      	ldr	r3, [r3, #12]
 800c1de:	899b      	ldrh	r3, [r3, #12]
 800c1e0:	b29b      	uxth	r3, r3
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7fa fbc6 	bl	8006974 <lwip_htons>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	b2db      	uxtb	r3, r3
 800c1ec:	f003 0303 	and.w	r3, r3, #3
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d001      	beq.n	800c1f8 <tcp_receive+0xa54>
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	e000      	b.n	800c1fa <tcp_receive+0xa56>
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	191a      	adds	r2, r3, r4
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c200:	441a      	add	r2, r3
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c20a:	461c      	mov	r4, r3
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	891b      	ldrh	r3, [r3, #8]
 800c210:	461d      	mov	r5, r3
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	68db      	ldr	r3, [r3, #12]
 800c216:	899b      	ldrh	r3, [r3, #12]
 800c218:	b29b      	uxth	r3, r3
 800c21a:	4618      	mov	r0, r3
 800c21c:	f7fa fbaa 	bl	8006974 <lwip_htons>
 800c220:	4603      	mov	r3, r0
 800c222:	b2db      	uxtb	r3, r3
 800c224:	f003 0303 	and.w	r3, r3, #3
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d001      	beq.n	800c230 <tcp_receive+0xa8c>
 800c22c:	2301      	movs	r3, #1
 800c22e:	e000      	b.n	800c232 <tcp_receive+0xa8e>
 800c230:	2300      	movs	r3, #0
 800c232:	442b      	add	r3, r5
 800c234:	429c      	cmp	r4, r3
 800c236:	d206      	bcs.n	800c246 <tcp_receive+0xaa2>
 800c238:	4b1e      	ldr	r3, [pc, #120]	@ (800c2b4 <tcp_receive+0xb10>)
 800c23a:	f240 622b 	movw	r2, #1579	@ 0x62b
 800c23e:	4923      	ldr	r1, [pc, #140]	@ (800c2cc <tcp_receive+0xb28>)
 800c240:	481e      	ldr	r0, [pc, #120]	@ (800c2bc <tcp_receive+0xb18>)
 800c242:	f005 f8d5 	bl	80113f0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	891b      	ldrh	r3, [r3, #8]
 800c24a:	461c      	mov	r4, r3
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	68db      	ldr	r3, [r3, #12]
 800c250:	899b      	ldrh	r3, [r3, #12]
 800c252:	b29b      	uxth	r3, r3
 800c254:	4618      	mov	r0, r3
 800c256:	f7fa fb8d 	bl	8006974 <lwip_htons>
 800c25a:	4603      	mov	r3, r0
 800c25c:	b2db      	uxtb	r3, r3
 800c25e:	f003 0303 	and.w	r3, r3, #3
 800c262:	2b00      	cmp	r3, #0
 800c264:	d001      	beq.n	800c26a <tcp_receive+0xac6>
 800c266:	2301      	movs	r3, #1
 800c268:	e000      	b.n	800c26c <tcp_receive+0xac8>
 800c26a:	2300      	movs	r3, #0
 800c26c:	1919      	adds	r1, r3, r4
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c272:	b28b      	uxth	r3, r1
 800c274:	1ad3      	subs	r3, r2, r3
 800c276:	b29a      	uxth	r2, r3
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f7fc fe11 	bl	8008ea4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	685b      	ldr	r3, [r3, #4]
 800c286:	891b      	ldrh	r3, [r3, #8]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d028      	beq.n	800c2de <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c28c:	4b0d      	ldr	r3, [pc, #52]	@ (800c2c4 <tcp_receive+0xb20>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d01d      	beq.n	800c2d0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800c294:	4b0b      	ldr	r3, [pc, #44]	@ (800c2c4 <tcp_receive+0xb20>)
 800c296:	681a      	ldr	r2, [r3, #0]
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	4619      	mov	r1, r3
 800c29e:	4610      	mov	r0, r2
 800c2a0:	f7fb ffba 	bl	8008218 <pbuf_cat>
 800c2a4:	e018      	b.n	800c2d8 <tcp_receive+0xb34>
 800c2a6:	bf00      	nop
 800c2a8:	200085ea 	.word	0x200085ea
 800c2ac:	200085e0 	.word	0x200085e0
 800c2b0:	200085c0 	.word	0x200085c0
 800c2b4:	08013708 	.word	0x08013708
 800c2b8:	08013ae8 	.word	0x08013ae8
 800c2bc:	08013754 	.word	0x08013754
 800c2c0:	08013b24 	.word	0x08013b24
 800c2c4:	200085f0 	.word	0x200085f0
 800c2c8:	200085ed 	.word	0x200085ed
 800c2cc:	08013b44 	.word	0x08013b44
            } else {
              recv_data = cseg->p;
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	4a70      	ldr	r2, [pc, #448]	@ (800c498 <tcp_receive+0xcf4>)
 800c2d6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	68db      	ldr	r3, [r3, #12]
 800c2e2:	899b      	ldrh	r3, [r3, #12]
 800c2e4:	b29b      	uxth	r3, r3
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f7fa fb44 	bl	8006974 <lwip_htons>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	f003 0301 	and.w	r3, r3, #1
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d00d      	beq.n	800c314 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c2f8:	4b68      	ldr	r3, [pc, #416]	@ (800c49c <tcp_receive+0xcf8>)
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	f043 0320 	orr.w	r3, r3, #32
 800c300:	b2da      	uxtb	r2, r3
 800c302:	4b66      	ldr	r3, [pc, #408]	@ (800c49c <tcp_receive+0xcf8>)
 800c304:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	7d1b      	ldrb	r3, [r3, #20]
 800c30a:	2b04      	cmp	r3, #4
 800c30c:	d102      	bne.n	800c314 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2207      	movs	r2, #7
 800c312:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	681a      	ldr	r2, [r3, #0]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800c31c:	68b8      	ldr	r0, [r7, #8]
 800c31e:	f7fd fae8 	bl	80098f2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c326:	2b00      	cmp	r3, #0
 800c328:	d008      	beq.n	800c33c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c32e:	68db      	ldr	r3, [r3, #12]
 800c330:	685a      	ldr	r2, [r3, #4]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800c336:	429a      	cmp	r2, r3
 800c338:	f43f af43 	beq.w	800c1c2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	8b5b      	ldrh	r3, [r3, #26]
 800c340:	f003 0301 	and.w	r3, r3, #1
 800c344:	2b00      	cmp	r3, #0
 800c346:	d00e      	beq.n	800c366 <tcp_receive+0xbc2>
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	8b5b      	ldrh	r3, [r3, #26]
 800c34c:	f023 0301 	bic.w	r3, r3, #1
 800c350:	b29a      	uxth	r2, r3
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	835a      	strh	r2, [r3, #26]
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	8b5b      	ldrh	r3, [r3, #26]
 800c35a:	f043 0302 	orr.w	r3, r3, #2
 800c35e:	b29a      	uxth	r2, r3
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c364:	e187      	b.n	800c676 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	8b5b      	ldrh	r3, [r3, #26]
 800c36a:	f043 0301 	orr.w	r3, r3, #1
 800c36e:	b29a      	uxth	r2, r3
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c374:	e17f      	b.n	800c676 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d106      	bne.n	800c38c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c37e:	4848      	ldr	r0, [pc, #288]	@ (800c4a0 <tcp_receive+0xcfc>)
 800c380:	f7fd faee 	bl	8009960 <tcp_seg_copy>
 800c384:	4602      	mov	r2, r0
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	675a      	str	r2, [r3, #116]	@ 0x74
 800c38a:	e16c      	b.n	800c666 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800c38c:	2300      	movs	r3, #0
 800c38e:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c394:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c396:	e156      	b.n	800c646 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800c398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c39a:	68db      	ldr	r3, [r3, #12]
 800c39c:	685a      	ldr	r2, [r3, #4]
 800c39e:	4b41      	ldr	r3, [pc, #260]	@ (800c4a4 <tcp_receive+0xd00>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d11d      	bne.n	800c3e2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800c3a6:	4b3e      	ldr	r3, [pc, #248]	@ (800c4a0 <tcp_receive+0xcfc>)
 800c3a8:	891a      	ldrh	r2, [r3, #8]
 800c3aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3ac:	891b      	ldrh	r3, [r3, #8]
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	f240 814e 	bls.w	800c650 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c3b4:	483a      	ldr	r0, [pc, #232]	@ (800c4a0 <tcp_receive+0xcfc>)
 800c3b6:	f7fd fad3 	bl	8009960 <tcp_seg_copy>
 800c3ba:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	f000 8148 	beq.w	800c654 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800c3c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d003      	beq.n	800c3d2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800c3ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3cc:	697a      	ldr	r2, [r7, #20]
 800c3ce:	601a      	str	r2, [r3, #0]
 800c3d0:	e002      	b.n	800c3d8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	697a      	ldr	r2, [r7, #20]
 800c3d6:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800c3d8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c3da:	6978      	ldr	r0, [r7, #20]
 800c3dc:	f7ff f8de 	bl	800b59c <tcp_oos_insert_segment>
                }
                break;
 800c3e0:	e138      	b.n	800c654 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800c3e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d117      	bne.n	800c418 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800c3e8:	4b2e      	ldr	r3, [pc, #184]	@ (800c4a4 <tcp_receive+0xd00>)
 800c3ea:	681a      	ldr	r2, [r3, #0]
 800c3ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3ee:	68db      	ldr	r3, [r3, #12]
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	1ad3      	subs	r3, r2, r3
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	da57      	bge.n	800c4a8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c3f8:	4829      	ldr	r0, [pc, #164]	@ (800c4a0 <tcp_receive+0xcfc>)
 800c3fa:	f7fd fab1 	bl	8009960 <tcp_seg_copy>
 800c3fe:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800c400:	69bb      	ldr	r3, [r7, #24]
 800c402:	2b00      	cmp	r3, #0
 800c404:	f000 8128 	beq.w	800c658 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	69ba      	ldr	r2, [r7, #24]
 800c40c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800c40e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c410:	69b8      	ldr	r0, [r7, #24]
 800c412:	f7ff f8c3 	bl	800b59c <tcp_oos_insert_segment>
                  }
                  break;
 800c416:	e11f      	b.n	800c658 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800c418:	4b22      	ldr	r3, [pc, #136]	@ (800c4a4 <tcp_receive+0xd00>)
 800c41a:	681a      	ldr	r2, [r3, #0]
 800c41c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c41e:	68db      	ldr	r3, [r3, #12]
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	1ad3      	subs	r3, r2, r3
 800c424:	3b01      	subs	r3, #1
 800c426:	2b00      	cmp	r3, #0
 800c428:	db3e      	blt.n	800c4a8 <tcp_receive+0xd04>
 800c42a:	4b1e      	ldr	r3, [pc, #120]	@ (800c4a4 <tcp_receive+0xd00>)
 800c42c:	681a      	ldr	r2, [r3, #0]
 800c42e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c430:	68db      	ldr	r3, [r3, #12]
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	1ad3      	subs	r3, r2, r3
 800c436:	3301      	adds	r3, #1
 800c438:	2b00      	cmp	r3, #0
 800c43a:	dc35      	bgt.n	800c4a8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800c43c:	4818      	ldr	r0, [pc, #96]	@ (800c4a0 <tcp_receive+0xcfc>)
 800c43e:	f7fd fa8f 	bl	8009960 <tcp_seg_copy>
 800c442:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800c444:	69fb      	ldr	r3, [r7, #28]
 800c446:	2b00      	cmp	r3, #0
 800c448:	f000 8108 	beq.w	800c65c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800c44c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c44e:	68db      	ldr	r3, [r3, #12]
 800c450:	685b      	ldr	r3, [r3, #4]
 800c452:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c454:	8912      	ldrh	r2, [r2, #8]
 800c456:	441a      	add	r2, r3
 800c458:	4b12      	ldr	r3, [pc, #72]	@ (800c4a4 <tcp_receive+0xd00>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	1ad3      	subs	r3, r2, r3
 800c45e:	2b00      	cmp	r3, #0
 800c460:	dd12      	ble.n	800c488 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800c462:	4b10      	ldr	r3, [pc, #64]	@ (800c4a4 <tcp_receive+0xd00>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	b29a      	uxth	r2, r3
 800c468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c46a:	68db      	ldr	r3, [r3, #12]
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	b29b      	uxth	r3, r3
 800c470:	1ad3      	subs	r3, r2, r3
 800c472:	b29a      	uxth	r2, r3
 800c474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c476:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800c478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c47a:	685a      	ldr	r2, [r3, #4]
 800c47c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c47e:	891b      	ldrh	r3, [r3, #8]
 800c480:	4619      	mov	r1, r3
 800c482:	4610      	mov	r0, r2
 800c484:	f7fb fc80 	bl	8007d88 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800c488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c48a:	69fa      	ldr	r2, [r7, #28]
 800c48c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800c48e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c490:	69f8      	ldr	r0, [r7, #28]
 800c492:	f7ff f883 	bl	800b59c <tcp_oos_insert_segment>
                  }
                  break;
 800c496:	e0e1      	b.n	800c65c <tcp_receive+0xeb8>
 800c498:	200085f0 	.word	0x200085f0
 800c49c:	200085ed 	.word	0x200085ed
 800c4a0:	200085c0 	.word	0x200085c0
 800c4a4:	200085e0 	.word	0x200085e0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800c4a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4aa:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800c4ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	f040 80c5 	bne.w	800c640 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800c4b6:	4b7f      	ldr	r3, [pc, #508]	@ (800c6b4 <tcp_receive+0xf10>)
 800c4b8:	681a      	ldr	r2, [r3, #0]
 800c4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4bc:	68db      	ldr	r3, [r3, #12]
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	f340 80bc 	ble.w	800c640 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c4c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ca:	68db      	ldr	r3, [r3, #12]
 800c4cc:	899b      	ldrh	r3, [r3, #12]
 800c4ce:	b29b      	uxth	r3, r3
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f7fa fa4f 	bl	8006974 <lwip_htons>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	b2db      	uxtb	r3, r3
 800c4da:	f003 0301 	and.w	r3, r3, #1
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	f040 80be 	bne.w	800c660 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800c4e4:	4874      	ldr	r0, [pc, #464]	@ (800c6b8 <tcp_receive+0xf14>)
 800c4e6:	f7fd fa3b 	bl	8009960 <tcp_seg_copy>
 800c4ea:	4602      	mov	r2, r0
 800c4ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4ee:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800c4f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	f000 80b5 	beq.w	800c664 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800c4fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4fc:	68db      	ldr	r3, [r3, #12]
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c502:	8912      	ldrh	r2, [r2, #8]
 800c504:	441a      	add	r2, r3
 800c506:	4b6b      	ldr	r3, [pc, #428]	@ (800c6b4 <tcp_receive+0xf10>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	1ad3      	subs	r3, r2, r3
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	dd12      	ble.n	800c536 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800c510:	4b68      	ldr	r3, [pc, #416]	@ (800c6b4 <tcp_receive+0xf10>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	b29a      	uxth	r2, r3
 800c516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c518:	68db      	ldr	r3, [r3, #12]
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	b29b      	uxth	r3, r3
 800c51e:	1ad3      	subs	r3, r2, r3
 800c520:	b29a      	uxth	r2, r3
 800c522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c524:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800c526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c528:	685a      	ldr	r2, [r3, #4]
 800c52a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c52c:	891b      	ldrh	r3, [r3, #8]
 800c52e:	4619      	mov	r1, r3
 800c530:	4610      	mov	r0, r2
 800c532:	f7fb fc29 	bl	8007d88 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800c536:	4b61      	ldr	r3, [pc, #388]	@ (800c6bc <tcp_receive+0xf18>)
 800c538:	881b      	ldrh	r3, [r3, #0]
 800c53a:	461a      	mov	r2, r3
 800c53c:	4b5d      	ldr	r3, [pc, #372]	@ (800c6b4 <tcp_receive+0xf10>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	441a      	add	r2, r3
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c546:	6879      	ldr	r1, [r7, #4]
 800c548:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c54a:	440b      	add	r3, r1
 800c54c:	1ad3      	subs	r3, r2, r3
 800c54e:	2b00      	cmp	r3, #0
 800c550:	f340 8088 	ble.w	800c664 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800c554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	68db      	ldr	r3, [r3, #12]
 800c55a:	899b      	ldrh	r3, [r3, #12]
 800c55c:	b29b      	uxth	r3, r3
 800c55e:	4618      	mov	r0, r3
 800c560:	f7fa fa08 	bl	8006974 <lwip_htons>
 800c564:	4603      	mov	r3, r0
 800c566:	b2db      	uxtb	r3, r3
 800c568:	f003 0301 	and.w	r3, r3, #1
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d021      	beq.n	800c5b4 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800c570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	68db      	ldr	r3, [r3, #12]
 800c576:	899b      	ldrh	r3, [r3, #12]
 800c578:	b29b      	uxth	r3, r3
 800c57a:	b21b      	sxth	r3, r3
 800c57c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c580:	b21c      	sxth	r4, r3
 800c582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	68db      	ldr	r3, [r3, #12]
 800c588:	899b      	ldrh	r3, [r3, #12]
 800c58a:	b29b      	uxth	r3, r3
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7fa f9f1 	bl	8006974 <lwip_htons>
 800c592:	4603      	mov	r3, r0
 800c594:	b2db      	uxtb	r3, r3
 800c596:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800c59a:	b29b      	uxth	r3, r3
 800c59c:	4618      	mov	r0, r3
 800c59e:	f7fa f9e9 	bl	8006974 <lwip_htons>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	b21b      	sxth	r3, r3
 800c5a6:	4323      	orrs	r3, r4
 800c5a8:	b21a      	sxth	r2, r3
 800c5aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	68db      	ldr	r3, [r3, #12]
 800c5b0:	b292      	uxth	r2, r2
 800c5b2:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5b8:	b29a      	uxth	r2, r3
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c5be:	4413      	add	r3, r2
 800c5c0:	b299      	uxth	r1, r3
 800c5c2:	4b3c      	ldr	r3, [pc, #240]	@ (800c6b4 <tcp_receive+0xf10>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	b29a      	uxth	r2, r3
 800c5c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	1a8a      	subs	r2, r1, r2
 800c5ce:	b292      	uxth	r2, r2
 800c5d0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800c5d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	685a      	ldr	r2, [r3, #4]
 800c5d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	891b      	ldrh	r3, [r3, #8]
 800c5de:	4619      	mov	r1, r3
 800c5e0:	4610      	mov	r0, r2
 800c5e2:	f7fb fbd1 	bl	8007d88 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800c5e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	891c      	ldrh	r4, [r3, #8]
 800c5ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	68db      	ldr	r3, [r3, #12]
 800c5f2:	899b      	ldrh	r3, [r3, #12]
 800c5f4:	b29b      	uxth	r3, r3
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f7fa f9bc 	bl	8006974 <lwip_htons>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	b2db      	uxtb	r3, r3
 800c600:	f003 0303 	and.w	r3, r3, #3
 800c604:	2b00      	cmp	r3, #0
 800c606:	d001      	beq.n	800c60c <tcp_receive+0xe68>
 800c608:	2301      	movs	r3, #1
 800c60a:	e000      	b.n	800c60e <tcp_receive+0xe6a>
 800c60c:	2300      	movs	r3, #0
 800c60e:	4423      	add	r3, r4
 800c610:	b29a      	uxth	r2, r3
 800c612:	4b2a      	ldr	r3, [pc, #168]	@ (800c6bc <tcp_receive+0xf18>)
 800c614:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c616:	4b29      	ldr	r3, [pc, #164]	@ (800c6bc <tcp_receive+0xf18>)
 800c618:	881b      	ldrh	r3, [r3, #0]
 800c61a:	461a      	mov	r2, r3
 800c61c:	4b25      	ldr	r3, [pc, #148]	@ (800c6b4 <tcp_receive+0xf10>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	441a      	add	r2, r3
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c626:	6879      	ldr	r1, [r7, #4]
 800c628:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c62a:	440b      	add	r3, r1
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d019      	beq.n	800c664 <tcp_receive+0xec0>
 800c630:	4b23      	ldr	r3, [pc, #140]	@ (800c6c0 <tcp_receive+0xf1c>)
 800c632:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800c636:	4923      	ldr	r1, [pc, #140]	@ (800c6c4 <tcp_receive+0xf20>)
 800c638:	4823      	ldr	r0, [pc, #140]	@ (800c6c8 <tcp_receive+0xf24>)
 800c63a:	f004 fed9 	bl	80113f0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800c63e:	e011      	b.n	800c664 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800c640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c648:	2b00      	cmp	r3, #0
 800c64a:	f47f aea5 	bne.w	800c398 <tcp_receive+0xbf4>
 800c64e:	e00a      	b.n	800c666 <tcp_receive+0xec2>
                break;
 800c650:	bf00      	nop
 800c652:	e008      	b.n	800c666 <tcp_receive+0xec2>
                break;
 800c654:	bf00      	nop
 800c656:	e006      	b.n	800c666 <tcp_receive+0xec2>
                  break;
 800c658:	bf00      	nop
 800c65a:	e004      	b.n	800c666 <tcp_receive+0xec2>
                  break;
 800c65c:	bf00      	nop
 800c65e:	e002      	b.n	800c666 <tcp_receive+0xec2>
                  break;
 800c660:	bf00      	nop
 800c662:	e000      	b.n	800c666 <tcp_receive+0xec2>
                break;
 800c664:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f001 fe88 	bl	800e37c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800c66c:	e003      	b.n	800c676 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f001 fe84 	bl	800e37c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c674:	e01a      	b.n	800c6ac <tcp_receive+0xf08>
 800c676:	e019      	b.n	800c6ac <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c678:	4b0e      	ldr	r3, [pc, #56]	@ (800c6b4 <tcp_receive+0xf10>)
 800c67a:	681a      	ldr	r2, [r3, #0]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c680:	1ad3      	subs	r3, r2, r3
 800c682:	2b00      	cmp	r3, #0
 800c684:	db0a      	blt.n	800c69c <tcp_receive+0xef8>
 800c686:	4b0b      	ldr	r3, [pc, #44]	@ (800c6b4 <tcp_receive+0xf10>)
 800c688:	681a      	ldr	r2, [r3, #0]
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c68e:	6879      	ldr	r1, [r7, #4]
 800c690:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c692:	440b      	add	r3, r1
 800c694:	1ad3      	subs	r3, r2, r3
 800c696:	3301      	adds	r3, #1
 800c698:	2b00      	cmp	r3, #0
 800c69a:	dd07      	ble.n	800c6ac <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	8b5b      	ldrh	r3, [r3, #26]
 800c6a0:	f043 0302 	orr.w	r3, r3, #2
 800c6a4:	b29a      	uxth	r2, r3
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800c6aa:	e7ff      	b.n	800c6ac <tcp_receive+0xf08>
 800c6ac:	bf00      	nop
 800c6ae:	3750      	adds	r7, #80	@ 0x50
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bdb0      	pop	{r4, r5, r7, pc}
 800c6b4:	200085e0 	.word	0x200085e0
 800c6b8:	200085c0 	.word	0x200085c0
 800c6bc:	200085ea 	.word	0x200085ea
 800c6c0:	08013708 	.word	0x08013708
 800c6c4:	08013ab0 	.word	0x08013ab0
 800c6c8:	08013754 	.word	0x08013754

0800c6cc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b083      	sub	sp, #12
 800c6d0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800c6d2:	4b15      	ldr	r3, [pc, #84]	@ (800c728 <tcp_get_next_optbyte+0x5c>)
 800c6d4:	881b      	ldrh	r3, [r3, #0]
 800c6d6:	1c5a      	adds	r2, r3, #1
 800c6d8:	b291      	uxth	r1, r2
 800c6da:	4a13      	ldr	r2, [pc, #76]	@ (800c728 <tcp_get_next_optbyte+0x5c>)
 800c6dc:	8011      	strh	r1, [r2, #0]
 800c6de:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c6e0:	4b12      	ldr	r3, [pc, #72]	@ (800c72c <tcp_get_next_optbyte+0x60>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d004      	beq.n	800c6f2 <tcp_get_next_optbyte+0x26>
 800c6e8:	4b11      	ldr	r3, [pc, #68]	@ (800c730 <tcp_get_next_optbyte+0x64>)
 800c6ea:	881b      	ldrh	r3, [r3, #0]
 800c6ec:	88fa      	ldrh	r2, [r7, #6]
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	d208      	bcs.n	800c704 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800c6f2:	4b10      	ldr	r3, [pc, #64]	@ (800c734 <tcp_get_next_optbyte+0x68>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	3314      	adds	r3, #20
 800c6f8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800c6fa:	88fb      	ldrh	r3, [r7, #6]
 800c6fc:	683a      	ldr	r2, [r7, #0]
 800c6fe:	4413      	add	r3, r2
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	e00b      	b.n	800c71c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c704:	88fb      	ldrh	r3, [r7, #6]
 800c706:	b2da      	uxtb	r2, r3
 800c708:	4b09      	ldr	r3, [pc, #36]	@ (800c730 <tcp_get_next_optbyte+0x64>)
 800c70a:	881b      	ldrh	r3, [r3, #0]
 800c70c:	b2db      	uxtb	r3, r3
 800c70e:	1ad3      	subs	r3, r2, r3
 800c710:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800c712:	4b06      	ldr	r3, [pc, #24]	@ (800c72c <tcp_get_next_optbyte+0x60>)
 800c714:	681a      	ldr	r2, [r3, #0]
 800c716:	797b      	ldrb	r3, [r7, #5]
 800c718:	4413      	add	r3, r2
 800c71a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	370c      	adds	r7, #12
 800c720:	46bd      	mov	sp, r7
 800c722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c726:	4770      	bx	lr
 800c728:	200085dc 	.word	0x200085dc
 800c72c:	200085d8 	.word	0x200085d8
 800c730:	200085d6 	.word	0x200085d6
 800c734:	200085d0 	.word	0x200085d0

0800c738 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b084      	sub	sp, #16
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d106      	bne.n	800c754 <tcp_parseopt+0x1c>
 800c746:	4b32      	ldr	r3, [pc, #200]	@ (800c810 <tcp_parseopt+0xd8>)
 800c748:	f240 727d 	movw	r2, #1917	@ 0x77d
 800c74c:	4931      	ldr	r1, [pc, #196]	@ (800c814 <tcp_parseopt+0xdc>)
 800c74e:	4832      	ldr	r0, [pc, #200]	@ (800c818 <tcp_parseopt+0xe0>)
 800c750:	f004 fe4e 	bl	80113f0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c754:	4b31      	ldr	r3, [pc, #196]	@ (800c81c <tcp_parseopt+0xe4>)
 800c756:	881b      	ldrh	r3, [r3, #0]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d056      	beq.n	800c80a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c75c:	4b30      	ldr	r3, [pc, #192]	@ (800c820 <tcp_parseopt+0xe8>)
 800c75e:	2200      	movs	r2, #0
 800c760:	801a      	strh	r2, [r3, #0]
 800c762:	e046      	b.n	800c7f2 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800c764:	f7ff ffb2 	bl	800c6cc <tcp_get_next_optbyte>
 800c768:	4603      	mov	r3, r0
 800c76a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800c76c:	7bfb      	ldrb	r3, [r7, #15]
 800c76e:	2b02      	cmp	r3, #2
 800c770:	d006      	beq.n	800c780 <tcp_parseopt+0x48>
 800c772:	2b02      	cmp	r3, #2
 800c774:	dc2a      	bgt.n	800c7cc <tcp_parseopt+0x94>
 800c776:	2b00      	cmp	r3, #0
 800c778:	d042      	beq.n	800c800 <tcp_parseopt+0xc8>
 800c77a:	2b01      	cmp	r3, #1
 800c77c:	d038      	beq.n	800c7f0 <tcp_parseopt+0xb8>
 800c77e:	e025      	b.n	800c7cc <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c780:	f7ff ffa4 	bl	800c6cc <tcp_get_next_optbyte>
 800c784:	4603      	mov	r3, r0
 800c786:	2b04      	cmp	r3, #4
 800c788:	d13c      	bne.n	800c804 <tcp_parseopt+0xcc>
 800c78a:	4b25      	ldr	r3, [pc, #148]	@ (800c820 <tcp_parseopt+0xe8>)
 800c78c:	881b      	ldrh	r3, [r3, #0]
 800c78e:	3301      	adds	r3, #1
 800c790:	4a22      	ldr	r2, [pc, #136]	@ (800c81c <tcp_parseopt+0xe4>)
 800c792:	8812      	ldrh	r2, [r2, #0]
 800c794:	4293      	cmp	r3, r2
 800c796:	da35      	bge.n	800c804 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c798:	f7ff ff98 	bl	800c6cc <tcp_get_next_optbyte>
 800c79c:	4603      	mov	r3, r0
 800c79e:	021b      	lsls	r3, r3, #8
 800c7a0:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800c7a2:	f7ff ff93 	bl	800c6cc <tcp_get_next_optbyte>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	89bb      	ldrh	r3, [r7, #12]
 800c7ac:	4313      	orrs	r3, r2
 800c7ae:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c7b0:	89bb      	ldrh	r3, [r7, #12]
 800c7b2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800c7b6:	d804      	bhi.n	800c7c2 <tcp_parseopt+0x8a>
 800c7b8:	89bb      	ldrh	r3, [r7, #12]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d001      	beq.n	800c7c2 <tcp_parseopt+0x8a>
 800c7be:	89ba      	ldrh	r2, [r7, #12]
 800c7c0:	e001      	b.n	800c7c6 <tcp_parseopt+0x8e>
 800c7c2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800c7ca:	e012      	b.n	800c7f2 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800c7cc:	f7ff ff7e 	bl	800c6cc <tcp_get_next_optbyte>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800c7d4:	7afb      	ldrb	r3, [r7, #11]
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d916      	bls.n	800c808 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800c7da:	7afb      	ldrb	r3, [r7, #11]
 800c7dc:	b29a      	uxth	r2, r3
 800c7de:	4b10      	ldr	r3, [pc, #64]	@ (800c820 <tcp_parseopt+0xe8>)
 800c7e0:	881b      	ldrh	r3, [r3, #0]
 800c7e2:	4413      	add	r3, r2
 800c7e4:	b29b      	uxth	r3, r3
 800c7e6:	3b02      	subs	r3, #2
 800c7e8:	b29a      	uxth	r2, r3
 800c7ea:	4b0d      	ldr	r3, [pc, #52]	@ (800c820 <tcp_parseopt+0xe8>)
 800c7ec:	801a      	strh	r2, [r3, #0]
 800c7ee:	e000      	b.n	800c7f2 <tcp_parseopt+0xba>
          break;
 800c7f0:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c7f2:	4b0b      	ldr	r3, [pc, #44]	@ (800c820 <tcp_parseopt+0xe8>)
 800c7f4:	881a      	ldrh	r2, [r3, #0]
 800c7f6:	4b09      	ldr	r3, [pc, #36]	@ (800c81c <tcp_parseopt+0xe4>)
 800c7f8:	881b      	ldrh	r3, [r3, #0]
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d3b2      	bcc.n	800c764 <tcp_parseopt+0x2c>
 800c7fe:	e004      	b.n	800c80a <tcp_parseopt+0xd2>
          return;
 800c800:	bf00      	nop
 800c802:	e002      	b.n	800c80a <tcp_parseopt+0xd2>
            return;
 800c804:	bf00      	nop
 800c806:	e000      	b.n	800c80a <tcp_parseopt+0xd2>
            return;
 800c808:	bf00      	nop
      }
    }
  }
}
 800c80a:	3710      	adds	r7, #16
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}
 800c810:	08013708 	.word	0x08013708
 800c814:	08013b6c 	.word	0x08013b6c
 800c818:	08013754 	.word	0x08013754
 800c81c:	200085d4 	.word	0x200085d4
 800c820:	200085dc 	.word	0x200085dc

0800c824 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800c824:	b480      	push	{r7}
 800c826:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800c828:	4b05      	ldr	r3, [pc, #20]	@ (800c840 <tcp_trigger_input_pcb_close+0x1c>)
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	f043 0310 	orr.w	r3, r3, #16
 800c830:	b2da      	uxtb	r2, r3
 800c832:	4b03      	ldr	r3, [pc, #12]	@ (800c840 <tcp_trigger_input_pcb_close+0x1c>)
 800c834:	701a      	strb	r2, [r3, #0]
}
 800c836:	bf00      	nop
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	4770      	bx	lr
 800c840:	200085ed 	.word	0x200085ed

0800c844 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b084      	sub	sp, #16
 800c848:	af00      	add	r7, sp, #0
 800c84a:	60f8      	str	r0, [r7, #12]
 800c84c:	60b9      	str	r1, [r7, #8]
 800c84e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d00a      	beq.n	800c86c <tcp_route+0x28>
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	7a1b      	ldrb	r3, [r3, #8]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d006      	beq.n	800c86c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	7a1b      	ldrb	r3, [r3, #8]
 800c862:	4618      	mov	r0, r3
 800c864:	f7fb f8b6 	bl	80079d4 <netif_get_by_index>
 800c868:	4603      	mov	r3, r0
 800c86a:	e003      	b.n	800c874 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f003 fad3 	bl	800fe18 <ip4_route>
 800c872:	4603      	mov	r3, r0
  }
}
 800c874:	4618      	mov	r0, r3
 800c876:	3710      	adds	r7, #16
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}

0800c87c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800c87c:	b590      	push	{r4, r7, lr}
 800c87e:	b087      	sub	sp, #28
 800c880:	af00      	add	r7, sp, #0
 800c882:	60f8      	str	r0, [r7, #12]
 800c884:	60b9      	str	r1, [r7, #8]
 800c886:	603b      	str	r3, [r7, #0]
 800c888:	4613      	mov	r3, r2
 800c88a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d105      	bne.n	800c89e <tcp_create_segment+0x22>
 800c892:	4b43      	ldr	r3, [pc, #268]	@ (800c9a0 <tcp_create_segment+0x124>)
 800c894:	22a3      	movs	r2, #163	@ 0xa3
 800c896:	4943      	ldr	r1, [pc, #268]	@ (800c9a4 <tcp_create_segment+0x128>)
 800c898:	4843      	ldr	r0, [pc, #268]	@ (800c9a8 <tcp_create_segment+0x12c>)
 800c89a:	f004 fda9 	bl	80113f0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d105      	bne.n	800c8b0 <tcp_create_segment+0x34>
 800c8a4:	4b3e      	ldr	r3, [pc, #248]	@ (800c9a0 <tcp_create_segment+0x124>)
 800c8a6:	22a4      	movs	r2, #164	@ 0xa4
 800c8a8:	4940      	ldr	r1, [pc, #256]	@ (800c9ac <tcp_create_segment+0x130>)
 800c8aa:	483f      	ldr	r0, [pc, #252]	@ (800c9a8 <tcp_create_segment+0x12c>)
 800c8ac:	f004 fda0 	bl	80113f0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c8b0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c8b4:	009b      	lsls	r3, r3, #2
 800c8b6:	b2db      	uxtb	r3, r3
 800c8b8:	f003 0304 	and.w	r3, r3, #4
 800c8bc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c8be:	2003      	movs	r0, #3
 800c8c0:	f7fa fd02 	bl	80072c8 <memp_malloc>
 800c8c4:	6138      	str	r0, [r7, #16]
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d104      	bne.n	800c8d6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800c8cc:	68b8      	ldr	r0, [r7, #8]
 800c8ce:	f7fb fbe1 	bl	8008094 <pbuf_free>
    return NULL;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	e060      	b.n	800c998 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800c8dc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800c8de:	693b      	ldr	r3, [r7, #16]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	68ba      	ldr	r2, [r7, #8]
 800c8e8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	891a      	ldrh	r2, [r3, #8]
 800c8ee:	7dfb      	ldrb	r3, [r7, #23]
 800c8f0:	b29b      	uxth	r3, r3
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d205      	bcs.n	800c902 <tcp_create_segment+0x86>
 800c8f6:	4b2a      	ldr	r3, [pc, #168]	@ (800c9a0 <tcp_create_segment+0x124>)
 800c8f8:	22b0      	movs	r2, #176	@ 0xb0
 800c8fa:	492d      	ldr	r1, [pc, #180]	@ (800c9b0 <tcp_create_segment+0x134>)
 800c8fc:	482a      	ldr	r0, [pc, #168]	@ (800c9a8 <tcp_create_segment+0x12c>)
 800c8fe:	f004 fd77 	bl	80113f0 <iprintf>
  seg->len = p->tot_len - optlen;
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	891a      	ldrh	r2, [r3, #8]
 800c906:	7dfb      	ldrb	r3, [r7, #23]
 800c908:	b29b      	uxth	r3, r3
 800c90a:	1ad3      	subs	r3, r2, r3
 800c90c:	b29a      	uxth	r2, r3
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800c912:	2114      	movs	r1, #20
 800c914:	68b8      	ldr	r0, [r7, #8]
 800c916:	f7fb fb27 	bl	8007f68 <pbuf_add_header>
 800c91a:	4603      	mov	r3, r0
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d004      	beq.n	800c92a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800c920:	6938      	ldr	r0, [r7, #16]
 800c922:	f7fc ffe6 	bl	80098f2 <tcp_seg_free>
    return NULL;
 800c926:	2300      	movs	r3, #0
 800c928:	e036      	b.n	800c998 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	685b      	ldr	r3, [r3, #4]
 800c92e:	685a      	ldr	r2, [r3, #4]
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	8ada      	ldrh	r2, [r3, #22]
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	68dc      	ldr	r4, [r3, #12]
 800c93c:	4610      	mov	r0, r2
 800c93e:	f7fa f819 	bl	8006974 <lwip_htons>
 800c942:	4603      	mov	r3, r0
 800c944:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	8b1a      	ldrh	r2, [r3, #24]
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	68dc      	ldr	r4, [r3, #12]
 800c94e:	4610      	mov	r0, r2
 800c950:	f7fa f810 	bl	8006974 <lwip_htons>
 800c954:	4603      	mov	r3, r0
 800c956:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	68dc      	ldr	r4, [r3, #12]
 800c95c:	6838      	ldr	r0, [r7, #0]
 800c95e:	f7fa f81f 	bl	80069a0 <lwip_htonl>
 800c962:	4603      	mov	r3, r0
 800c964:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800c966:	7dfb      	ldrb	r3, [r7, #23]
 800c968:	089b      	lsrs	r3, r3, #2
 800c96a:	b2db      	uxtb	r3, r3
 800c96c:	3305      	adds	r3, #5
 800c96e:	b29b      	uxth	r3, r3
 800c970:	031b      	lsls	r3, r3, #12
 800c972:	b29a      	uxth	r2, r3
 800c974:	79fb      	ldrb	r3, [r7, #7]
 800c976:	b29b      	uxth	r3, r3
 800c978:	4313      	orrs	r3, r2
 800c97a:	b29a      	uxth	r2, r3
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	68dc      	ldr	r4, [r3, #12]
 800c980:	4610      	mov	r0, r2
 800c982:	f7f9 fff7 	bl	8006974 <lwip_htons>
 800c986:	4603      	mov	r3, r0
 800c988:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	68db      	ldr	r3, [r3, #12]
 800c98e:	2200      	movs	r2, #0
 800c990:	749a      	strb	r2, [r3, #18]
 800c992:	2200      	movs	r2, #0
 800c994:	74da      	strb	r2, [r3, #19]
  return seg;
 800c996:	693b      	ldr	r3, [r7, #16]
}
 800c998:	4618      	mov	r0, r3
 800c99a:	371c      	adds	r7, #28
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd90      	pop	{r4, r7, pc}
 800c9a0:	08013b88 	.word	0x08013b88
 800c9a4:	08013bbc 	.word	0x08013bbc
 800c9a8:	08013bdc 	.word	0x08013bdc
 800c9ac:	08013c04 	.word	0x08013c04
 800c9b0:	08013c28 	.word	0x08013c28

0800c9b4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b086      	sub	sp, #24
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	607b      	str	r3, [r7, #4]
 800c9bc:	4603      	mov	r3, r0
 800c9be:	73fb      	strb	r3, [r7, #15]
 800c9c0:	460b      	mov	r3, r1
 800c9c2:	81bb      	strh	r3, [r7, #12]
 800c9c4:	4613      	mov	r3, r2
 800c9c6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800c9c8:	89bb      	ldrh	r3, [r7, #12]
 800c9ca:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d105      	bne.n	800c9de <tcp_pbuf_prealloc+0x2a>
 800c9d2:	4b30      	ldr	r3, [pc, #192]	@ (800ca94 <tcp_pbuf_prealloc+0xe0>)
 800c9d4:	22e8      	movs	r2, #232	@ 0xe8
 800c9d6:	4930      	ldr	r1, [pc, #192]	@ (800ca98 <tcp_pbuf_prealloc+0xe4>)
 800c9d8:	4830      	ldr	r0, [pc, #192]	@ (800ca9c <tcp_pbuf_prealloc+0xe8>)
 800c9da:	f004 fd09 	bl	80113f0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800c9de:	6a3b      	ldr	r3, [r7, #32]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d105      	bne.n	800c9f0 <tcp_pbuf_prealloc+0x3c>
 800c9e4:	4b2b      	ldr	r3, [pc, #172]	@ (800ca94 <tcp_pbuf_prealloc+0xe0>)
 800c9e6:	22e9      	movs	r2, #233	@ 0xe9
 800c9e8:	492d      	ldr	r1, [pc, #180]	@ (800caa0 <tcp_pbuf_prealloc+0xec>)
 800c9ea:	482c      	ldr	r0, [pc, #176]	@ (800ca9c <tcp_pbuf_prealloc+0xe8>)
 800c9ec:	f004 fd00 	bl	80113f0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800c9f0:	89ba      	ldrh	r2, [r7, #12]
 800c9f2:	897b      	ldrh	r3, [r7, #10]
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	d221      	bcs.n	800ca3c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c9f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c9fc:	f003 0302 	and.w	r3, r3, #2
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d111      	bne.n	800ca28 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800ca04:	6a3b      	ldr	r3, [r7, #32]
 800ca06:	8b5b      	ldrh	r3, [r3, #26]
 800ca08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d115      	bne.n	800ca3c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800ca10:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d007      	beq.n	800ca28 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800ca18:	6a3b      	ldr	r3, [r7, #32]
 800ca1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d103      	bne.n	800ca28 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800ca20:	6a3b      	ldr	r3, [r7, #32]
 800ca22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d009      	beq.n	800ca3c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800ca28:	89bb      	ldrh	r3, [r7, #12]
 800ca2a:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 800ca2e:	f023 0203 	bic.w	r2, r3, #3
 800ca32:	897b      	ldrh	r3, [r7, #10]
 800ca34:	4293      	cmp	r3, r2
 800ca36:	bf28      	it	cs
 800ca38:	4613      	movcs	r3, r2
 800ca3a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800ca3c:	8af9      	ldrh	r1, [r7, #22]
 800ca3e:	7bfb      	ldrb	r3, [r7, #15]
 800ca40:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ca44:	4618      	mov	r0, r3
 800ca46:	f7fb f841 	bl	8007acc <pbuf_alloc>
 800ca4a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d101      	bne.n	800ca56 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800ca52:	2300      	movs	r3, #0
 800ca54:	e019      	b.n	800ca8a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800ca56:	693b      	ldr	r3, [r7, #16]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d006      	beq.n	800ca6c <tcp_pbuf_prealloc+0xb8>
 800ca5e:	4b0d      	ldr	r3, [pc, #52]	@ (800ca94 <tcp_pbuf_prealloc+0xe0>)
 800ca60:	f240 120b 	movw	r2, #267	@ 0x10b
 800ca64:	490f      	ldr	r1, [pc, #60]	@ (800caa4 <tcp_pbuf_prealloc+0xf0>)
 800ca66:	480d      	ldr	r0, [pc, #52]	@ (800ca9c <tcp_pbuf_prealloc+0xe8>)
 800ca68:	f004 fcc2 	bl	80113f0 <iprintf>
  *oversize = p->len - length;
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	895a      	ldrh	r2, [r3, #10]
 800ca70:	89bb      	ldrh	r3, [r7, #12]
 800ca72:	1ad3      	subs	r3, r2, r3
 800ca74:	b29a      	uxth	r2, r3
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	89ba      	ldrh	r2, [r7, #12]
 800ca7e:	811a      	strh	r2, [r3, #8]
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	891a      	ldrh	r2, [r3, #8]
 800ca84:	693b      	ldr	r3, [r7, #16]
 800ca86:	815a      	strh	r2, [r3, #10]
  return p;
 800ca88:	693b      	ldr	r3, [r7, #16]
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3718      	adds	r7, #24
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop
 800ca94:	08013b88 	.word	0x08013b88
 800ca98:	08013c40 	.word	0x08013c40
 800ca9c:	08013bdc 	.word	0x08013bdc
 800caa0:	08013c64 	.word	0x08013c64
 800caa4:	08013c84 	.word	0x08013c84

0800caa8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	460b      	mov	r3, r1
 800cab2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d106      	bne.n	800cac8 <tcp_write_checks+0x20>
 800caba:	4b33      	ldr	r3, [pc, #204]	@ (800cb88 <tcp_write_checks+0xe0>)
 800cabc:	f240 1233 	movw	r2, #307	@ 0x133
 800cac0:	4932      	ldr	r1, [pc, #200]	@ (800cb8c <tcp_write_checks+0xe4>)
 800cac2:	4833      	ldr	r0, [pc, #204]	@ (800cb90 <tcp_write_checks+0xe8>)
 800cac4:	f004 fc94 	bl	80113f0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	7d1b      	ldrb	r3, [r3, #20]
 800cacc:	2b04      	cmp	r3, #4
 800cace:	d00e      	beq.n	800caee <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800cad4:	2b07      	cmp	r3, #7
 800cad6:	d00a      	beq.n	800caee <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800cadc:	2b02      	cmp	r3, #2
 800cade:	d006      	beq.n	800caee <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800cae4:	2b03      	cmp	r3, #3
 800cae6:	d002      	beq.n	800caee <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800cae8:	f06f 030a 	mvn.w	r3, #10
 800caec:	e048      	b.n	800cb80 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800caee:	887b      	ldrh	r3, [r7, #2]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d101      	bne.n	800caf8 <tcp_write_checks+0x50>
    return ERR_OK;
 800caf4:	2300      	movs	r3, #0
 800caf6:	e043      	b.n	800cb80 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800cafe:	887a      	ldrh	r2, [r7, #2]
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d909      	bls.n	800cb18 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	8b5b      	ldrh	r3, [r3, #26]
 800cb08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb0c:	b29a      	uxth	r2, r3
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800cb12:	f04f 33ff 	mov.w	r3, #4294967295
 800cb16:	e033      	b.n	800cb80 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cb1e:	2b08      	cmp	r3, #8
 800cb20:	d909      	bls.n	800cb36 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	8b5b      	ldrh	r3, [r3, #26]
 800cb26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb2a:	b29a      	uxth	r2, r3
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800cb30:	f04f 33ff 	mov.w	r3, #4294967295
 800cb34:	e024      	b.n	800cb80 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d00f      	beq.n	800cb60 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d11a      	bne.n	800cb7e <tcp_write_checks+0xd6>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d116      	bne.n	800cb7e <tcp_write_checks+0xd6>
 800cb50:	4b0d      	ldr	r3, [pc, #52]	@ (800cb88 <tcp_write_checks+0xe0>)
 800cb52:	f240 1255 	movw	r2, #341	@ 0x155
 800cb56:	490f      	ldr	r1, [pc, #60]	@ (800cb94 <tcp_write_checks+0xec>)
 800cb58:	480d      	ldr	r0, [pc, #52]	@ (800cb90 <tcp_write_checks+0xe8>)
 800cb5a:	f004 fc49 	bl	80113f0 <iprintf>
 800cb5e:	e00e      	b.n	800cb7e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d103      	bne.n	800cb70 <tcp_write_checks+0xc8>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d006      	beq.n	800cb7e <tcp_write_checks+0xd6>
 800cb70:	4b05      	ldr	r3, [pc, #20]	@ (800cb88 <tcp_write_checks+0xe0>)
 800cb72:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800cb76:	4908      	ldr	r1, [pc, #32]	@ (800cb98 <tcp_write_checks+0xf0>)
 800cb78:	4805      	ldr	r0, [pc, #20]	@ (800cb90 <tcp_write_checks+0xe8>)
 800cb7a:	f004 fc39 	bl	80113f0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800cb7e:	2300      	movs	r3, #0
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3708      	adds	r7, #8
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}
 800cb88:	08013b88 	.word	0x08013b88
 800cb8c:	08013c98 	.word	0x08013c98
 800cb90:	08013bdc 	.word	0x08013bdc
 800cb94:	08013cb8 	.word	0x08013cb8
 800cb98:	08013cf4 	.word	0x08013cf4

0800cb9c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800cb9c:	b590      	push	{r4, r7, lr}
 800cb9e:	b09b      	sub	sp, #108	@ 0x6c
 800cba0:	af04      	add	r7, sp, #16
 800cba2:	60f8      	str	r0, [r7, #12]
 800cba4:	60b9      	str	r1, [r7, #8]
 800cba6:	4611      	mov	r1, r2
 800cba8:	461a      	mov	r2, r3
 800cbaa:	460b      	mov	r3, r1
 800cbac:	80fb      	strh	r3, [r7, #6]
 800cbae:	4613      	mov	r3, r2
 800cbb0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	653b      	str	r3, [r7, #80]	@ 0x50
 800cbba:	2300      	movs	r3, #0
 800cbbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d109      	bne.n	800cbf8 <tcp_write+0x5c>
 800cbe4:	4ba4      	ldr	r3, [pc, #656]	@ (800ce78 <tcp_write+0x2dc>)
 800cbe6:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800cbea:	49a4      	ldr	r1, [pc, #656]	@ (800ce7c <tcp_write+0x2e0>)
 800cbec:	48a4      	ldr	r0, [pc, #656]	@ (800ce80 <tcp_write+0x2e4>)
 800cbee:	f004 fbff 	bl	80113f0 <iprintf>
 800cbf2:	f06f 030f 	mvn.w	r3, #15
 800cbf6:	e32a      	b.n	800d24e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800cbfe:	085b      	lsrs	r3, r3, #1
 800cc00:	b29a      	uxth	r2, r3
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cc06:	4293      	cmp	r3, r2
 800cc08:	bf28      	it	cs
 800cc0a:	4613      	movcs	r3, r2
 800cc0c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800cc0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d102      	bne.n	800cc1a <tcp_write+0x7e>
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cc18:	e000      	b.n	800cc1c <tcp_write+0x80>
 800cc1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cc1c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d109      	bne.n	800cc38 <tcp_write+0x9c>
 800cc24:	4b94      	ldr	r3, [pc, #592]	@ (800ce78 <tcp_write+0x2dc>)
 800cc26:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800cc2a:	4996      	ldr	r1, [pc, #600]	@ (800ce84 <tcp_write+0x2e8>)
 800cc2c:	4894      	ldr	r0, [pc, #592]	@ (800ce80 <tcp_write+0x2e4>)
 800cc2e:	f004 fbdf 	bl	80113f0 <iprintf>
 800cc32:	f06f 030f 	mvn.w	r3, #15
 800cc36:	e30a      	b.n	800d24e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800cc38:	88fb      	ldrh	r3, [r7, #6]
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	68f8      	ldr	r0, [r7, #12]
 800cc3e:	f7ff ff33 	bl	800caa8 <tcp_write_checks>
 800cc42:	4603      	mov	r3, r0
 800cc44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 800cc48:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d002      	beq.n	800cc56 <tcp_write+0xba>
    return err;
 800cc50:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800cc54:	e2fb      	b.n	800d24e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cc5c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800cc60:	2300      	movs	r3, #0
 800cc62:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	f000 80f6 	beq.w	800ce5c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc74:	653b      	str	r3, [r7, #80]	@ 0x50
 800cc76:	e002      	b.n	800cc7e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800cc78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cc7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d1f8      	bne.n	800cc78 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800cc86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc88:	7a9b      	ldrb	r3, [r3, #10]
 800cc8a:	009b      	lsls	r3, r3, #2
 800cc8c:	b29b      	uxth	r3, r3
 800cc8e:	f003 0304 	and.w	r3, r3, #4
 800cc92:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800cc94:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800cc96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc98:	891b      	ldrh	r3, [r3, #8]
 800cc9a:	4619      	mov	r1, r3
 800cc9c:	8c3b      	ldrh	r3, [r7, #32]
 800cc9e:	440b      	add	r3, r1
 800cca0:	429a      	cmp	r2, r3
 800cca2:	da06      	bge.n	800ccb2 <tcp_write+0x116>
 800cca4:	4b74      	ldr	r3, [pc, #464]	@ (800ce78 <tcp_write+0x2dc>)
 800cca6:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800ccaa:	4977      	ldr	r1, [pc, #476]	@ (800ce88 <tcp_write+0x2ec>)
 800ccac:	4874      	ldr	r0, [pc, #464]	@ (800ce80 <tcp_write+0x2e4>)
 800ccae:	f004 fb9f 	bl	80113f0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800ccb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccb4:	891a      	ldrh	r2, [r3, #8]
 800ccb6:	8c3b      	ldrh	r3, [r7, #32]
 800ccb8:	4413      	add	r3, r2
 800ccba:	b29b      	uxth	r3, r3
 800ccbc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ccbe:	1ad3      	subs	r3, r2, r3
 800ccc0:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ccc8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800ccca:	8a7b      	ldrh	r3, [r7, #18]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d026      	beq.n	800cd1e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800ccd0:	8a7b      	ldrh	r3, [r7, #18]
 800ccd2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d206      	bcs.n	800cce6 <tcp_write+0x14a>
 800ccd8:	4b67      	ldr	r3, [pc, #412]	@ (800ce78 <tcp_write+0x2dc>)
 800ccda:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800ccde:	496b      	ldr	r1, [pc, #428]	@ (800ce8c <tcp_write+0x2f0>)
 800cce0:	4867      	ldr	r0, [pc, #412]	@ (800ce80 <tcp_write+0x2e4>)
 800cce2:	f004 fb85 	bl	80113f0 <iprintf>
      seg = last_unsent;
 800cce6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cce8:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800ccea:	8a7b      	ldrh	r3, [r7, #18]
 800ccec:	88fa      	ldrh	r2, [r7, #6]
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	bf28      	it	cs
 800ccf2:	4613      	movcs	r3, r2
 800ccf4:	b29b      	uxth	r3, r3
 800ccf6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	bf28      	it	cs
 800ccfc:	4613      	movcs	r3, r2
 800ccfe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 800cd00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800cd04:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800cd06:	4413      	add	r3, r2
 800cd08:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 800cd0c:	8a7a      	ldrh	r2, [r7, #18]
 800cd0e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800cd10:	1ad3      	subs	r3, r2, r3
 800cd12:	b29b      	uxth	r3, r3
 800cd14:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800cd16:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800cd18:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800cd1a:	1ad3      	subs	r3, r2, r3
 800cd1c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800cd1e:	8a7b      	ldrh	r3, [r7, #18]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d00b      	beq.n	800cd3c <tcp_write+0x1a0>
 800cd24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800cd28:	88fb      	ldrh	r3, [r7, #6]
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d006      	beq.n	800cd3c <tcp_write+0x1a0>
 800cd2e:	4b52      	ldr	r3, [pc, #328]	@ (800ce78 <tcp_write+0x2dc>)
 800cd30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cd34:	4956      	ldr	r1, [pc, #344]	@ (800ce90 <tcp_write+0x2f4>)
 800cd36:	4852      	ldr	r0, [pc, #328]	@ (800ce80 <tcp_write+0x2e4>)
 800cd38:	f004 fb5a 	bl	80113f0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800cd3c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800cd40:	88fb      	ldrh	r3, [r7, #6]
 800cd42:	429a      	cmp	r2, r3
 800cd44:	f080 8167 	bcs.w	800d016 <tcp_write+0x47a>
 800cd48:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	f000 8163 	beq.w	800d016 <tcp_write+0x47a>
 800cd50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd52:	891b      	ldrh	r3, [r3, #8]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	f000 815e 	beq.w	800d016 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800cd5a:	88fa      	ldrh	r2, [r7, #6]
 800cd5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800cd60:	1ad2      	subs	r2, r2, r3
 800cd62:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800cd64:	4293      	cmp	r3, r2
 800cd66:	bfa8      	it	ge
 800cd68:	4613      	movge	r3, r2
 800cd6a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800cd6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd6e:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cd70:	797b      	ldrb	r3, [r7, #5]
 800cd72:	f003 0301 	and.w	r3, r3, #1
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d027      	beq.n	800cdca <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800cd7a:	f107 0012 	add.w	r0, r7, #18
 800cd7e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800cd80:	8bf9      	ldrh	r1, [r7, #30]
 800cd82:	2301      	movs	r3, #1
 800cd84:	9302      	str	r3, [sp, #8]
 800cd86:	797b      	ldrb	r3, [r7, #5]
 800cd88:	9301      	str	r3, [sp, #4]
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	9300      	str	r3, [sp, #0]
 800cd8e:	4603      	mov	r3, r0
 800cd90:	2000      	movs	r0, #0
 800cd92:	f7ff fe0f 	bl	800c9b4 <tcp_pbuf_prealloc>
 800cd96:	6578      	str	r0, [r7, #84]	@ 0x54
 800cd98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	f000 8225 	beq.w	800d1ea <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800cda0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cda2:	6858      	ldr	r0, [r3, #4]
 800cda4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800cda8:	68ba      	ldr	r2, [r7, #8]
 800cdaa:	4413      	add	r3, r2
 800cdac:	8bfa      	ldrh	r2, [r7, #30]
 800cdae:	4619      	mov	r1, r3
 800cdb0:	f004 fc17 	bl	80115e2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800cdb4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800cdb6:	f7fb f9f5 	bl	80081a4 <pbuf_clen>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	461a      	mov	r2, r3
 800cdbe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800cdc2:	4413      	add	r3, r2
 800cdc4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800cdc8:	e041      	b.n	800ce4e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800cdca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cdcc:	685b      	ldr	r3, [r3, #4]
 800cdce:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdd0:	e002      	b.n	800cdd8 <tcp_write+0x23c>
 800cdd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d1f8      	bne.n	800cdd2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800cde0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cde2:	7b1b      	ldrb	r3, [r3, #12]
 800cde4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d115      	bne.n	800ce18 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800cdec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdee:	685b      	ldr	r3, [r3, #4]
 800cdf0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cdf2:	8952      	ldrh	r2, [r2, #10]
 800cdf4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800cdf6:	68ba      	ldr	r2, [r7, #8]
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d10d      	bne.n	800ce18 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800cdfc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d006      	beq.n	800ce12 <tcp_write+0x276>
 800ce04:	4b1c      	ldr	r3, [pc, #112]	@ (800ce78 <tcp_write+0x2dc>)
 800ce06:	f240 2231 	movw	r2, #561	@ 0x231
 800ce0a:	4922      	ldr	r1, [pc, #136]	@ (800ce94 <tcp_write+0x2f8>)
 800ce0c:	481c      	ldr	r0, [pc, #112]	@ (800ce80 <tcp_write+0x2e4>)
 800ce0e:	f004 faef 	bl	80113f0 <iprintf>
          extendlen = seglen;
 800ce12:	8bfb      	ldrh	r3, [r7, #30]
 800ce14:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800ce16:	e01a      	b.n	800ce4e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800ce18:	8bfb      	ldrh	r3, [r7, #30]
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	2000      	movs	r0, #0
 800ce20:	f7fa fe54 	bl	8007acc <pbuf_alloc>
 800ce24:	6578      	str	r0, [r7, #84]	@ 0x54
 800ce26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	f000 81e0 	beq.w	800d1ee <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800ce2e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ce32:	68ba      	ldr	r2, [r7, #8]
 800ce34:	441a      	add	r2, r3
 800ce36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce38:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800ce3a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800ce3c:	f7fb f9b2 	bl	80081a4 <pbuf_clen>
 800ce40:	4603      	mov	r3, r0
 800ce42:	461a      	mov	r2, r3
 800ce44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800ce48:	4413      	add	r3, r2
 800ce4a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800ce4e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ce52:	8bfb      	ldrh	r3, [r7, #30]
 800ce54:	4413      	add	r3, r2
 800ce56:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800ce5a:	e0dc      	b.n	800d016 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	f000 80d7 	beq.w	800d016 <tcp_write+0x47a>
 800ce68:	4b03      	ldr	r3, [pc, #12]	@ (800ce78 <tcp_write+0x2dc>)
 800ce6a:	f240 224a 	movw	r2, #586	@ 0x24a
 800ce6e:	490a      	ldr	r1, [pc, #40]	@ (800ce98 <tcp_write+0x2fc>)
 800ce70:	4803      	ldr	r0, [pc, #12]	@ (800ce80 <tcp_write+0x2e4>)
 800ce72:	f004 fabd 	bl	80113f0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800ce76:	e0ce      	b.n	800d016 <tcp_write+0x47a>
 800ce78:	08013b88 	.word	0x08013b88
 800ce7c:	08013d28 	.word	0x08013d28
 800ce80:	08013bdc 	.word	0x08013bdc
 800ce84:	08013d40 	.word	0x08013d40
 800ce88:	08013d74 	.word	0x08013d74
 800ce8c:	08013d8c 	.word	0x08013d8c
 800ce90:	08013dac 	.word	0x08013dac
 800ce94:	08013dcc 	.word	0x08013dcc
 800ce98:	08013df8 	.word	0x08013df8
    struct pbuf *p;
    u16_t left = len - pos;
 800ce9c:	88fa      	ldrh	r2, [r7, #6]
 800ce9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800cea2:	1ad3      	subs	r3, r2, r3
 800cea4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800cea6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ceaa:	b29b      	uxth	r3, r3
 800ceac:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ceae:	1ad3      	subs	r3, r2, r3
 800ceb0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800ceb2:	8b7a      	ldrh	r2, [r7, #26]
 800ceb4:	8bbb      	ldrh	r3, [r7, #28]
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	bf28      	it	cs
 800ceba:	4613      	movcs	r3, r2
 800cebc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800cebe:	797b      	ldrb	r3, [r7, #5]
 800cec0:	f003 0301 	and.w	r3, r3, #1
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d036      	beq.n	800cf36 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800cec8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800cecc:	b29a      	uxth	r2, r3
 800cece:	8b3b      	ldrh	r3, [r7, #24]
 800ced0:	4413      	add	r3, r2
 800ced2:	b299      	uxth	r1, r3
 800ced4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	bf0c      	ite	eq
 800ceda:	2301      	moveq	r3, #1
 800cedc:	2300      	movne	r3, #0
 800cede:	b2db      	uxtb	r3, r3
 800cee0:	f107 0012 	add.w	r0, r7, #18
 800cee4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800cee6:	9302      	str	r3, [sp, #8]
 800cee8:	797b      	ldrb	r3, [r7, #5]
 800ceea:	9301      	str	r3, [sp, #4]
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	9300      	str	r3, [sp, #0]
 800cef0:	4603      	mov	r3, r0
 800cef2:	2036      	movs	r0, #54	@ 0x36
 800cef4:	f7ff fd5e 	bl	800c9b4 <tcp_pbuf_prealloc>
 800cef8:	6338      	str	r0, [r7, #48]	@ 0x30
 800cefa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	f000 8178 	beq.w	800d1f2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800cf02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf04:	895b      	ldrh	r3, [r3, #10]
 800cf06:	8b3a      	ldrh	r2, [r7, #24]
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	d906      	bls.n	800cf1a <tcp_write+0x37e>
 800cf0c:	4b8c      	ldr	r3, [pc, #560]	@ (800d140 <tcp_write+0x5a4>)
 800cf0e:	f240 2266 	movw	r2, #614	@ 0x266
 800cf12:	498c      	ldr	r1, [pc, #560]	@ (800d144 <tcp_write+0x5a8>)
 800cf14:	488c      	ldr	r0, [pc, #560]	@ (800d148 <tcp_write+0x5ac>)
 800cf16:	f004 fa6b 	bl	80113f0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800cf1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf1c:	685a      	ldr	r2, [r3, #4]
 800cf1e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800cf22:	18d0      	adds	r0, r2, r3
 800cf24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800cf28:	68ba      	ldr	r2, [r7, #8]
 800cf2a:	4413      	add	r3, r2
 800cf2c:	8b3a      	ldrh	r2, [r7, #24]
 800cf2e:	4619      	mov	r1, r3
 800cf30:	f004 fb57 	bl	80115e2 <memcpy>
 800cf34:	e02f      	b.n	800cf96 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800cf36:	8a7b      	ldrh	r3, [r7, #18]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d006      	beq.n	800cf4a <tcp_write+0x3ae>
 800cf3c:	4b80      	ldr	r3, [pc, #512]	@ (800d140 <tcp_write+0x5a4>)
 800cf3e:	f240 2271 	movw	r2, #625	@ 0x271
 800cf42:	4982      	ldr	r1, [pc, #520]	@ (800d14c <tcp_write+0x5b0>)
 800cf44:	4880      	ldr	r0, [pc, #512]	@ (800d148 <tcp_write+0x5ac>)
 800cf46:	f004 fa53 	bl	80113f0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800cf4a:	8b3b      	ldrh	r3, [r7, #24]
 800cf4c:	2201      	movs	r2, #1
 800cf4e:	4619      	mov	r1, r3
 800cf50:	2036      	movs	r0, #54	@ 0x36
 800cf52:	f7fa fdbb 	bl	8007acc <pbuf_alloc>
 800cf56:	6178      	str	r0, [r7, #20]
 800cf58:	697b      	ldr	r3, [r7, #20]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	f000 814b 	beq.w	800d1f6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800cf60:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800cf64:	68ba      	ldr	r2, [r7, #8]
 800cf66:	441a      	add	r2, r3
 800cf68:	697b      	ldr	r3, [r7, #20]
 800cf6a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cf6c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800cf70:	b29b      	uxth	r3, r3
 800cf72:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800cf76:	4619      	mov	r1, r3
 800cf78:	2036      	movs	r0, #54	@ 0x36
 800cf7a:	f7fa fda7 	bl	8007acc <pbuf_alloc>
 800cf7e:	6338      	str	r0, [r7, #48]	@ 0x30
 800cf80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d103      	bne.n	800cf8e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800cf86:	6978      	ldr	r0, [r7, #20]
 800cf88:	f7fb f884 	bl	8008094 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800cf8c:	e136      	b.n	800d1fc <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800cf8e:	6979      	ldr	r1, [r7, #20]
 800cf90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cf92:	f7fb f941 	bl	8008218 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800cf96:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cf98:	f7fb f904 	bl	80081a4 <pbuf_clen>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800cfa4:	4413      	add	r3, r2
 800cfa6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800cfaa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800cfae:	2b09      	cmp	r3, #9
 800cfb0:	d903      	bls.n	800cfba <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800cfb2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800cfb4:	f7fb f86e 	bl	8008094 <pbuf_free>
      goto memerr;
 800cfb8:	e120      	b.n	800d1fc <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cfbe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800cfc2:	441a      	add	r2, r3
 800cfc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cfc8:	9300      	str	r3, [sp, #0]
 800cfca:	4613      	mov	r3, r2
 800cfcc:	2200      	movs	r2, #0
 800cfce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cfd0:	68f8      	ldr	r0, [r7, #12]
 800cfd2:	f7ff fc53 	bl	800c87c <tcp_create_segment>
 800cfd6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800cfd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	f000 810d 	beq.w	800d1fa <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800cfe0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d102      	bne.n	800cfec <tcp_write+0x450>
      queue = seg;
 800cfe6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cfe8:	647b      	str	r3, [r7, #68]	@ 0x44
 800cfea:	e00c      	b.n	800d006 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800cfec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d106      	bne.n	800d000 <tcp_write+0x464>
 800cff2:	4b53      	ldr	r3, [pc, #332]	@ (800d140 <tcp_write+0x5a4>)
 800cff4:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800cff8:	4955      	ldr	r1, [pc, #340]	@ (800d150 <tcp_write+0x5b4>)
 800cffa:	4853      	ldr	r0, [pc, #332]	@ (800d148 <tcp_write+0x5ac>)
 800cffc:	f004 f9f8 	bl	80113f0 <iprintf>
      prev_seg->next = seg;
 800d000:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d002:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d004:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800d006:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d008:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800d00a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d00e:	8b3b      	ldrh	r3, [r7, #24]
 800d010:	4413      	add	r3, r2
 800d012:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 800d016:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d01a:	88fb      	ldrh	r3, [r7, #6]
 800d01c:	429a      	cmp	r2, r3
 800d01e:	f4ff af3d 	bcc.w	800ce9c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800d022:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d024:	2b00      	cmp	r3, #0
 800d026:	d02c      	beq.n	800d082 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800d028:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d02e:	e01e      	b.n	800d06e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800d030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d032:	891a      	ldrh	r2, [r3, #8]
 800d034:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d036:	4413      	add	r3, r2
 800d038:	b29a      	uxth	r2, r3
 800d03a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d03c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800d03e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d110      	bne.n	800d068 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800d046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d048:	685b      	ldr	r3, [r3, #4]
 800d04a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d04c:	8952      	ldrh	r2, [r2, #10]
 800d04e:	4413      	add	r3, r2
 800d050:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800d052:	68b9      	ldr	r1, [r7, #8]
 800d054:	4618      	mov	r0, r3
 800d056:	f004 fac4 	bl	80115e2 <memcpy>
        p->len += oversize_used;
 800d05a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d05c:	895a      	ldrh	r2, [r3, #10]
 800d05e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d060:	4413      	add	r3, r2
 800d062:	b29a      	uxth	r2, r3
 800d064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d066:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800d068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d06e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d070:	2b00      	cmp	r3, #0
 800d072:	d1dd      	bne.n	800d030 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800d074:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d076:	891a      	ldrh	r2, [r3, #8]
 800d078:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d07a:	4413      	add	r3, r2
 800d07c:	b29a      	uxth	r2, r3
 800d07e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d080:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800d082:	8a7a      	ldrh	r2, [r7, #18]
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800d08a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d018      	beq.n	800d0c2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800d090:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d092:	2b00      	cmp	r3, #0
 800d094:	d106      	bne.n	800d0a4 <tcp_write+0x508>
 800d096:	4b2a      	ldr	r3, [pc, #168]	@ (800d140 <tcp_write+0x5a4>)
 800d098:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800d09c:	492d      	ldr	r1, [pc, #180]	@ (800d154 <tcp_write+0x5b8>)
 800d09e:	482a      	ldr	r0, [pc, #168]	@ (800d148 <tcp_write+0x5ac>)
 800d0a0:	f004 f9a6 	bl	80113f0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800d0a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0a6:	685b      	ldr	r3, [r3, #4]
 800d0a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f7fb f8b4 	bl	8008218 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800d0b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0b2:	891a      	ldrh	r2, [r3, #8]
 800d0b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0b6:	891b      	ldrh	r3, [r3, #8]
 800d0b8:	4413      	add	r3, r2
 800d0ba:	b29a      	uxth	r2, r3
 800d0bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0be:	811a      	strh	r2, [r3, #8]
 800d0c0:	e037      	b.n	800d132 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800d0c2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d034      	beq.n	800d132 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800d0c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d003      	beq.n	800d0d6 <tcp_write+0x53a>
 800d0ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0d0:	685b      	ldr	r3, [r3, #4]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d106      	bne.n	800d0e4 <tcp_write+0x548>
 800d0d6:	4b1a      	ldr	r3, [pc, #104]	@ (800d140 <tcp_write+0x5a4>)
 800d0d8:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800d0dc:	491e      	ldr	r1, [pc, #120]	@ (800d158 <tcp_write+0x5bc>)
 800d0de:	481a      	ldr	r0, [pc, #104]	@ (800d148 <tcp_write+0x5ac>)
 800d0e0:	f004 f986 	bl	80113f0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d0e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0e6:	685b      	ldr	r3, [r3, #4]
 800d0e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d0ea:	e009      	b.n	800d100 <tcp_write+0x564>
      p->tot_len += extendlen;
 800d0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0ee:	891a      	ldrh	r2, [r3, #8]
 800d0f0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d0f2:	4413      	add	r3, r2
 800d0f4:	b29a      	uxth	r2, r3
 800d0f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0f8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d0fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d1f1      	bne.n	800d0ec <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800d108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d10a:	891a      	ldrh	r2, [r3, #8]
 800d10c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d10e:	4413      	add	r3, r2
 800d110:	b29a      	uxth	r2, r3
 800d112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d114:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800d116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d118:	895a      	ldrh	r2, [r3, #10]
 800d11a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d11c:	4413      	add	r3, r2
 800d11e:	b29a      	uxth	r2, r3
 800d120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d122:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800d124:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d126:	891a      	ldrh	r2, [r3, #8]
 800d128:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d12a:	4413      	add	r3, r2
 800d12c:	b29a      	uxth	r2, r3
 800d12e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d130:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800d132:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d134:	2b00      	cmp	r3, #0
 800d136:	d111      	bne.n	800d15c <tcp_write+0x5c0>
    pcb->unsent = queue;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d13c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800d13e:	e010      	b.n	800d162 <tcp_write+0x5c6>
 800d140:	08013b88 	.word	0x08013b88
 800d144:	08013e28 	.word	0x08013e28
 800d148:	08013bdc 	.word	0x08013bdc
 800d14c:	08013e68 	.word	0x08013e68
 800d150:	08013e78 	.word	0x08013e78
 800d154:	08013e8c 	.word	0x08013e8c
 800d158:	08013ec4 	.word	0x08013ec4
  } else {
    last_unsent->next = queue;
 800d15c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d15e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d160:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d166:	88fb      	ldrh	r3, [r7, #6]
 800d168:	441a      	add	r2, r3
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800d174:	88fb      	ldrh	r3, [r7, #6]
 800d176:	1ad3      	subs	r3, r2, r3
 800d178:	b29a      	uxth	r2, r3
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800d186:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d190:	2b00      	cmp	r3, #0
 800d192:	d00e      	beq.n	800d1b2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d10a      	bne.n	800d1b2 <tcp_write+0x616>
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d106      	bne.n	800d1b2 <tcp_write+0x616>
 800d1a4:	4b2c      	ldr	r3, [pc, #176]	@ (800d258 <tcp_write+0x6bc>)
 800d1a6:	f240 3212 	movw	r2, #786	@ 0x312
 800d1aa:	492c      	ldr	r1, [pc, #176]	@ (800d25c <tcp_write+0x6c0>)
 800d1ac:	482c      	ldr	r0, [pc, #176]	@ (800d260 <tcp_write+0x6c4>)
 800d1ae:	f004 f91f 	bl	80113f0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800d1b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d016      	beq.n	800d1e6 <tcp_write+0x64a>
 800d1b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1ba:	68db      	ldr	r3, [r3, #12]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d012      	beq.n	800d1e6 <tcp_write+0x64a>
 800d1c0:	797b      	ldrb	r3, [r7, #5]
 800d1c2:	f003 0302 	and.w	r3, r3, #2
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d10d      	bne.n	800d1e6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800d1ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1cc:	68db      	ldr	r3, [r3, #12]
 800d1ce:	899b      	ldrh	r3, [r3, #12]
 800d1d0:	b29c      	uxth	r4, r3
 800d1d2:	2008      	movs	r0, #8
 800d1d4:	f7f9 fbce 	bl	8006974 <lwip_htons>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	461a      	mov	r2, r3
 800d1dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1de:	68db      	ldr	r3, [r3, #12]
 800d1e0:	4322      	orrs	r2, r4
 800d1e2:	b292      	uxth	r2, r2
 800d1e4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	e031      	b.n	800d24e <tcp_write+0x6b2>
          goto memerr;
 800d1ea:	bf00      	nop
 800d1ec:	e006      	b.n	800d1fc <tcp_write+0x660>
            goto memerr;
 800d1ee:	bf00      	nop
 800d1f0:	e004      	b.n	800d1fc <tcp_write+0x660>
        goto memerr;
 800d1f2:	bf00      	nop
 800d1f4:	e002      	b.n	800d1fc <tcp_write+0x660>
        goto memerr;
 800d1f6:	bf00      	nop
 800d1f8:	e000      	b.n	800d1fc <tcp_write+0x660>
      goto memerr;
 800d1fa:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	8b5b      	ldrh	r3, [r3, #26]
 800d200:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d204:	b29a      	uxth	r2, r3
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800d20a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d002      	beq.n	800d216 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800d210:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d212:	f7fa ff3f 	bl	8008094 <pbuf_free>
  }
  if (queue != NULL) {
 800d216:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d002      	beq.n	800d222 <tcp_write+0x686>
    tcp_segs_free(queue);
 800d21c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800d21e:	f7fc fb53 	bl	80098c8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d00e      	beq.n	800d24a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d230:	2b00      	cmp	r3, #0
 800d232:	d10a      	bne.n	800d24a <tcp_write+0x6ae>
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d106      	bne.n	800d24a <tcp_write+0x6ae>
 800d23c:	4b06      	ldr	r3, [pc, #24]	@ (800d258 <tcp_write+0x6bc>)
 800d23e:	f240 3227 	movw	r2, #807	@ 0x327
 800d242:	4906      	ldr	r1, [pc, #24]	@ (800d25c <tcp_write+0x6c0>)
 800d244:	4806      	ldr	r0, [pc, #24]	@ (800d260 <tcp_write+0x6c4>)
 800d246:	f004 f8d3 	bl	80113f0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800d24a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d24e:	4618      	mov	r0, r3
 800d250:	375c      	adds	r7, #92	@ 0x5c
 800d252:	46bd      	mov	sp, r7
 800d254:	bd90      	pop	{r4, r7, pc}
 800d256:	bf00      	nop
 800d258:	08013b88 	.word	0x08013b88
 800d25c:	08013efc 	.word	0x08013efc
 800d260:	08013bdc 	.word	0x08013bdc

0800d264 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800d264:	b590      	push	{r4, r7, lr}
 800d266:	b08b      	sub	sp, #44	@ 0x2c
 800d268:	af02      	add	r7, sp, #8
 800d26a:	6078      	str	r0, [r7, #4]
 800d26c:	460b      	mov	r3, r1
 800d26e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800d270:	2300      	movs	r3, #0
 800d272:	61fb      	str	r3, [r7, #28]
 800d274:	2300      	movs	r3, #0
 800d276:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d278:	2300      	movs	r3, #0
 800d27a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d106      	bne.n	800d290 <tcp_split_unsent_seg+0x2c>
 800d282:	4b95      	ldr	r3, [pc, #596]	@ (800d4d8 <tcp_split_unsent_seg+0x274>)
 800d284:	f240 324b 	movw	r2, #843	@ 0x34b
 800d288:	4994      	ldr	r1, [pc, #592]	@ (800d4dc <tcp_split_unsent_seg+0x278>)
 800d28a:	4895      	ldr	r0, [pc, #596]	@ (800d4e0 <tcp_split_unsent_seg+0x27c>)
 800d28c:	f004 f8b0 	bl	80113f0 <iprintf>

  useg = pcb->unsent;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d294:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d102      	bne.n	800d2a2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800d29c:	f04f 33ff 	mov.w	r3, #4294967295
 800d2a0:	e116      	b.n	800d4d0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800d2a2:	887b      	ldrh	r3, [r7, #2]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d109      	bne.n	800d2bc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800d2a8:	4b8b      	ldr	r3, [pc, #556]	@ (800d4d8 <tcp_split_unsent_seg+0x274>)
 800d2aa:	f240 3253 	movw	r2, #851	@ 0x353
 800d2ae:	498d      	ldr	r1, [pc, #564]	@ (800d4e4 <tcp_split_unsent_seg+0x280>)
 800d2b0:	488b      	ldr	r0, [pc, #556]	@ (800d4e0 <tcp_split_unsent_seg+0x27c>)
 800d2b2:	f004 f89d 	bl	80113f0 <iprintf>
    return ERR_VAL;
 800d2b6:	f06f 0305 	mvn.w	r3, #5
 800d2ba:	e109      	b.n	800d4d0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	891b      	ldrh	r3, [r3, #8]
 800d2c0:	887a      	ldrh	r2, [r7, #2]
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d301      	bcc.n	800d2ca <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	e102      	b.n	800d4d0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d2ce:	887a      	ldrh	r2, [r7, #2]
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	d906      	bls.n	800d2e2 <tcp_split_unsent_seg+0x7e>
 800d2d4:	4b80      	ldr	r3, [pc, #512]	@ (800d4d8 <tcp_split_unsent_seg+0x274>)
 800d2d6:	f240 325b 	movw	r2, #859	@ 0x35b
 800d2da:	4983      	ldr	r1, [pc, #524]	@ (800d4e8 <tcp_split_unsent_seg+0x284>)
 800d2dc:	4880      	ldr	r0, [pc, #512]	@ (800d4e0 <tcp_split_unsent_seg+0x27c>)
 800d2de:	f004 f887 	bl	80113f0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	891b      	ldrh	r3, [r3, #8]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d106      	bne.n	800d2f8 <tcp_split_unsent_seg+0x94>
 800d2ea:	4b7b      	ldr	r3, [pc, #492]	@ (800d4d8 <tcp_split_unsent_seg+0x274>)
 800d2ec:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800d2f0:	497e      	ldr	r1, [pc, #504]	@ (800d4ec <tcp_split_unsent_seg+0x288>)
 800d2f2:	487b      	ldr	r0, [pc, #492]	@ (800d4e0 <tcp_split_unsent_seg+0x27c>)
 800d2f4:	f004 f87c 	bl	80113f0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	7a9b      	ldrb	r3, [r3, #10]
 800d2fc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d2fe:	7bfb      	ldrb	r3, [r7, #15]
 800d300:	009b      	lsls	r3, r3, #2
 800d302:	b2db      	uxtb	r3, r3
 800d304:	f003 0304 	and.w	r3, r3, #4
 800d308:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	891a      	ldrh	r2, [r3, #8]
 800d30e:	887b      	ldrh	r3, [r7, #2]
 800d310:	1ad3      	subs	r3, r2, r3
 800d312:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d314:	7bbb      	ldrb	r3, [r7, #14]
 800d316:	b29a      	uxth	r2, r3
 800d318:	89bb      	ldrh	r3, [r7, #12]
 800d31a:	4413      	add	r3, r2
 800d31c:	b29b      	uxth	r3, r3
 800d31e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d322:	4619      	mov	r1, r3
 800d324:	2036      	movs	r0, #54	@ 0x36
 800d326:	f7fa fbd1 	bl	8007acc <pbuf_alloc>
 800d32a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	f000 80b7 	beq.w	800d4a2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800d334:	697b      	ldr	r3, [r7, #20]
 800d336:	685b      	ldr	r3, [r3, #4]
 800d338:	891a      	ldrh	r2, [r3, #8]
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	891b      	ldrh	r3, [r3, #8]
 800d33e:	1ad3      	subs	r3, r2, r3
 800d340:	b29a      	uxth	r2, r3
 800d342:	887b      	ldrh	r3, [r7, #2]
 800d344:	4413      	add	r3, r2
 800d346:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	6858      	ldr	r0, [r3, #4]
 800d34c:	693b      	ldr	r3, [r7, #16]
 800d34e:	685a      	ldr	r2, [r3, #4]
 800d350:	7bbb      	ldrb	r3, [r7, #14]
 800d352:	18d1      	adds	r1, r2, r3
 800d354:	897b      	ldrh	r3, [r7, #10]
 800d356:	89ba      	ldrh	r2, [r7, #12]
 800d358:	f7fb f886 	bl	8008468 <pbuf_copy_partial>
 800d35c:	4603      	mov	r3, r0
 800d35e:	461a      	mov	r2, r3
 800d360:	89bb      	ldrh	r3, [r7, #12]
 800d362:	4293      	cmp	r3, r2
 800d364:	f040 809f 	bne.w	800d4a6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	68db      	ldr	r3, [r3, #12]
 800d36c:	899b      	ldrh	r3, [r3, #12]
 800d36e:	b29b      	uxth	r3, r3
 800d370:	4618      	mov	r0, r3
 800d372:	f7f9 faff 	bl	8006974 <lwip_htons>
 800d376:	4603      	mov	r3, r0
 800d378:	b2db      	uxtb	r3, r3
 800d37a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d37e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800d380:	2300      	movs	r3, #0
 800d382:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800d384:	7efb      	ldrb	r3, [r7, #27]
 800d386:	f003 0308 	and.w	r3, r3, #8
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d007      	beq.n	800d39e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800d38e:	7efb      	ldrb	r3, [r7, #27]
 800d390:	f023 0308 	bic.w	r3, r3, #8
 800d394:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800d396:	7ebb      	ldrb	r3, [r7, #26]
 800d398:	f043 0308 	orr.w	r3, r3, #8
 800d39c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800d39e:	7efb      	ldrb	r3, [r7, #27]
 800d3a0:	f003 0301 	and.w	r3, r3, #1
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d007      	beq.n	800d3b8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800d3a8:	7efb      	ldrb	r3, [r7, #27]
 800d3aa:	f023 0301 	bic.w	r3, r3, #1
 800d3ae:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800d3b0:	7ebb      	ldrb	r3, [r7, #26]
 800d3b2:	f043 0301 	orr.w	r3, r3, #1
 800d3b6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	68db      	ldr	r3, [r3, #12]
 800d3bc:	685b      	ldr	r3, [r3, #4]
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f7f9 faee 	bl	80069a0 <lwip_htonl>
 800d3c4:	4602      	mov	r2, r0
 800d3c6:	887b      	ldrh	r3, [r7, #2]
 800d3c8:	18d1      	adds	r1, r2, r3
 800d3ca:	7eba      	ldrb	r2, [r7, #26]
 800d3cc:	7bfb      	ldrb	r3, [r7, #15]
 800d3ce:	9300      	str	r3, [sp, #0]
 800d3d0:	460b      	mov	r3, r1
 800d3d2:	6939      	ldr	r1, [r7, #16]
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	f7ff fa51 	bl	800c87c <tcp_create_segment>
 800d3da:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800d3dc:	69fb      	ldr	r3, [r7, #28]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d063      	beq.n	800d4aa <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	685b      	ldr	r3, [r3, #4]
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f7fa fedc 	bl	80081a4 <pbuf_clen>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	461a      	mov	r2, r3
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d3f6:	1a9b      	subs	r3, r3, r2
 800d3f8:	b29a      	uxth	r2, r3
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	6858      	ldr	r0, [r3, #4]
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	685b      	ldr	r3, [r3, #4]
 800d408:	891a      	ldrh	r2, [r3, #8]
 800d40a:	89bb      	ldrh	r3, [r7, #12]
 800d40c:	1ad3      	subs	r3, r2, r3
 800d40e:	b29b      	uxth	r3, r3
 800d410:	4619      	mov	r1, r3
 800d412:	f7fa fcb9 	bl	8007d88 <pbuf_realloc>
  useg->len -= remainder;
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	891a      	ldrh	r2, [r3, #8]
 800d41a:	89bb      	ldrh	r3, [r7, #12]
 800d41c:	1ad3      	subs	r3, r2, r3
 800d41e:	b29a      	uxth	r2, r3
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	68db      	ldr	r3, [r3, #12]
 800d428:	899b      	ldrh	r3, [r3, #12]
 800d42a:	b29c      	uxth	r4, r3
 800d42c:	7efb      	ldrb	r3, [r7, #27]
 800d42e:	b29b      	uxth	r3, r3
 800d430:	4618      	mov	r0, r3
 800d432:	f7f9 fa9f 	bl	8006974 <lwip_htons>
 800d436:	4603      	mov	r3, r0
 800d438:	461a      	mov	r2, r3
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	68db      	ldr	r3, [r3, #12]
 800d43e:	4322      	orrs	r2, r4
 800d440:	b292      	uxth	r2, r2
 800d442:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	685b      	ldr	r3, [r3, #4]
 800d448:	4618      	mov	r0, r3
 800d44a:	f7fa feab 	bl	80081a4 <pbuf_clen>
 800d44e:	4603      	mov	r3, r0
 800d450:	461a      	mov	r2, r3
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d458:	4413      	add	r3, r2
 800d45a:	b29a      	uxth	r2, r3
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d462:	69fb      	ldr	r3, [r7, #28]
 800d464:	685b      	ldr	r3, [r3, #4]
 800d466:	4618      	mov	r0, r3
 800d468:	f7fa fe9c 	bl	80081a4 <pbuf_clen>
 800d46c:	4603      	mov	r3, r0
 800d46e:	461a      	mov	r2, r3
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d476:	4413      	add	r3, r2
 800d478:	b29a      	uxth	r2, r3
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	681a      	ldr	r2, [r3, #0]
 800d484:	69fb      	ldr	r3, [r7, #28]
 800d486:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	69fa      	ldr	r2, [r7, #28]
 800d48c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800d48e:	69fb      	ldr	r3, [r7, #28]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d103      	bne.n	800d49e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2200      	movs	r2, #0
 800d49a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	e016      	b.n	800d4d0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800d4a2:	bf00      	nop
 800d4a4:	e002      	b.n	800d4ac <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d4a6:	bf00      	nop
 800d4a8:	e000      	b.n	800d4ac <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d4aa:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800d4ac:	69fb      	ldr	r3, [r7, #28]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d006      	beq.n	800d4c0 <tcp_split_unsent_seg+0x25c>
 800d4b2:	4b09      	ldr	r3, [pc, #36]	@ (800d4d8 <tcp_split_unsent_seg+0x274>)
 800d4b4:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800d4b8:	490d      	ldr	r1, [pc, #52]	@ (800d4f0 <tcp_split_unsent_seg+0x28c>)
 800d4ba:	4809      	ldr	r0, [pc, #36]	@ (800d4e0 <tcp_split_unsent_seg+0x27c>)
 800d4bc:	f003 ff98 	bl	80113f0 <iprintf>
  if (p != NULL) {
 800d4c0:	693b      	ldr	r3, [r7, #16]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d002      	beq.n	800d4cc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800d4c6:	6938      	ldr	r0, [r7, #16]
 800d4c8:	f7fa fde4 	bl	8008094 <pbuf_free>
  }

  return ERR_MEM;
 800d4cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	3724      	adds	r7, #36	@ 0x24
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd90      	pop	{r4, r7, pc}
 800d4d8:	08013b88 	.word	0x08013b88
 800d4dc:	08013f1c 	.word	0x08013f1c
 800d4e0:	08013bdc 	.word	0x08013bdc
 800d4e4:	08013f40 	.word	0x08013f40
 800d4e8:	08013f64 	.word	0x08013f64
 800d4ec:	08013f74 	.word	0x08013f74
 800d4f0:	08013f84 	.word	0x08013f84

0800d4f4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d4f4:	b590      	push	{r4, r7, lr}
 800d4f6:	b085      	sub	sp, #20
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d106      	bne.n	800d510 <tcp_send_fin+0x1c>
 800d502:	4b21      	ldr	r3, [pc, #132]	@ (800d588 <tcp_send_fin+0x94>)
 800d504:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800d508:	4920      	ldr	r1, [pc, #128]	@ (800d58c <tcp_send_fin+0x98>)
 800d50a:	4821      	ldr	r0, [pc, #132]	@ (800d590 <tcp_send_fin+0x9c>)
 800d50c:	f003 ff70 	bl	80113f0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d514:	2b00      	cmp	r3, #0
 800d516:	d02e      	beq.n	800d576 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d51c:	60fb      	str	r3, [r7, #12]
 800d51e:	e002      	b.n	800d526 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d1f8      	bne.n	800d520 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	68db      	ldr	r3, [r3, #12]
 800d532:	899b      	ldrh	r3, [r3, #12]
 800d534:	b29b      	uxth	r3, r3
 800d536:	4618      	mov	r0, r3
 800d538:	f7f9 fa1c 	bl	8006974 <lwip_htons>
 800d53c:	4603      	mov	r3, r0
 800d53e:	b2db      	uxtb	r3, r3
 800d540:	f003 0307 	and.w	r3, r3, #7
 800d544:	2b00      	cmp	r3, #0
 800d546:	d116      	bne.n	800d576 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	68db      	ldr	r3, [r3, #12]
 800d54c:	899b      	ldrh	r3, [r3, #12]
 800d54e:	b29c      	uxth	r4, r3
 800d550:	2001      	movs	r0, #1
 800d552:	f7f9 fa0f 	bl	8006974 <lwip_htons>
 800d556:	4603      	mov	r3, r0
 800d558:	461a      	mov	r2, r3
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	68db      	ldr	r3, [r3, #12]
 800d55e:	4322      	orrs	r2, r4
 800d560:	b292      	uxth	r2, r2
 800d562:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	8b5b      	ldrh	r3, [r3, #26]
 800d568:	f043 0320 	orr.w	r3, r3, #32
 800d56c:	b29a      	uxth	r2, r3
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800d572:	2300      	movs	r3, #0
 800d574:	e004      	b.n	800d580 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d576:	2101      	movs	r1, #1
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f000 f80b 	bl	800d594 <tcp_enqueue_flags>
 800d57e:	4603      	mov	r3, r0
}
 800d580:	4618      	mov	r0, r3
 800d582:	3714      	adds	r7, #20
 800d584:	46bd      	mov	sp, r7
 800d586:	bd90      	pop	{r4, r7, pc}
 800d588:	08013b88 	.word	0x08013b88
 800d58c:	08013f90 	.word	0x08013f90
 800d590:	08013bdc 	.word	0x08013bdc

0800d594 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b08a      	sub	sp, #40	@ 0x28
 800d598:	af02      	add	r7, sp, #8
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	460b      	mov	r3, r1
 800d59e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d5a8:	78fb      	ldrb	r3, [r7, #3]
 800d5aa:	f003 0303 	and.w	r3, r3, #3
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d106      	bne.n	800d5c0 <tcp_enqueue_flags+0x2c>
 800d5b2:	4b67      	ldr	r3, [pc, #412]	@ (800d750 <tcp_enqueue_flags+0x1bc>)
 800d5b4:	f240 4211 	movw	r2, #1041	@ 0x411
 800d5b8:	4966      	ldr	r1, [pc, #408]	@ (800d754 <tcp_enqueue_flags+0x1c0>)
 800d5ba:	4867      	ldr	r0, [pc, #412]	@ (800d758 <tcp_enqueue_flags+0x1c4>)
 800d5bc:	f003 ff18 	bl	80113f0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d106      	bne.n	800d5d4 <tcp_enqueue_flags+0x40>
 800d5c6:	4b62      	ldr	r3, [pc, #392]	@ (800d750 <tcp_enqueue_flags+0x1bc>)
 800d5c8:	f240 4213 	movw	r2, #1043	@ 0x413
 800d5cc:	4963      	ldr	r1, [pc, #396]	@ (800d75c <tcp_enqueue_flags+0x1c8>)
 800d5ce:	4862      	ldr	r0, [pc, #392]	@ (800d758 <tcp_enqueue_flags+0x1c4>)
 800d5d0:	f003 ff0e 	bl	80113f0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800d5d4:	78fb      	ldrb	r3, [r7, #3]
 800d5d6:	f003 0302 	and.w	r3, r3, #2
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d001      	beq.n	800d5e2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800d5de:	2301      	movs	r3, #1
 800d5e0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d5e2:	7ffb      	ldrb	r3, [r7, #31]
 800d5e4:	009b      	lsls	r3, r3, #2
 800d5e6:	b2db      	uxtb	r3, r3
 800d5e8:	f003 0304 	and.w	r3, r3, #4
 800d5ec:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d5ee:	7dfb      	ldrb	r3, [r7, #23]
 800d5f0:	b29b      	uxth	r3, r3
 800d5f2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	2036      	movs	r0, #54	@ 0x36
 800d5fa:	f7fa fa67 	bl	8007acc <pbuf_alloc>
 800d5fe:	6138      	str	r0, [r7, #16]
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d109      	bne.n	800d61a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	8b5b      	ldrh	r3, [r3, #26]
 800d60a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d60e:	b29a      	uxth	r2, r3
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d614:	f04f 33ff 	mov.w	r3, #4294967295
 800d618:	e095      	b.n	800d746 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d61a:	693b      	ldr	r3, [r7, #16]
 800d61c:	895a      	ldrh	r2, [r3, #10]
 800d61e:	7dfb      	ldrb	r3, [r7, #23]
 800d620:	b29b      	uxth	r3, r3
 800d622:	429a      	cmp	r2, r3
 800d624:	d206      	bcs.n	800d634 <tcp_enqueue_flags+0xa0>
 800d626:	4b4a      	ldr	r3, [pc, #296]	@ (800d750 <tcp_enqueue_flags+0x1bc>)
 800d628:	f240 4239 	movw	r2, #1081	@ 0x439
 800d62c:	494c      	ldr	r1, [pc, #304]	@ (800d760 <tcp_enqueue_flags+0x1cc>)
 800d62e:	484a      	ldr	r0, [pc, #296]	@ (800d758 <tcp_enqueue_flags+0x1c4>)
 800d630:	f003 fede 	bl	80113f0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800d638:	78fa      	ldrb	r2, [r7, #3]
 800d63a:	7ffb      	ldrb	r3, [r7, #31]
 800d63c:	9300      	str	r3, [sp, #0]
 800d63e:	460b      	mov	r3, r1
 800d640:	6939      	ldr	r1, [r7, #16]
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f7ff f91a 	bl	800c87c <tcp_create_segment>
 800d648:	60f8      	str	r0, [r7, #12]
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d109      	bne.n	800d664 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	8b5b      	ldrh	r3, [r3, #26]
 800d654:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d658:	b29a      	uxth	r2, r3
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d65e:	f04f 33ff 	mov.w	r3, #4294967295
 800d662:	e070      	b.n	800d746 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	68db      	ldr	r3, [r3, #12]
 800d668:	f003 0303 	and.w	r3, r3, #3
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d006      	beq.n	800d67e <tcp_enqueue_flags+0xea>
 800d670:	4b37      	ldr	r3, [pc, #220]	@ (800d750 <tcp_enqueue_flags+0x1bc>)
 800d672:	f240 4242 	movw	r2, #1090	@ 0x442
 800d676:	493b      	ldr	r1, [pc, #236]	@ (800d764 <tcp_enqueue_flags+0x1d0>)
 800d678:	4837      	ldr	r0, [pc, #220]	@ (800d758 <tcp_enqueue_flags+0x1c4>)
 800d67a:	f003 feb9 	bl	80113f0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	891b      	ldrh	r3, [r3, #8]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d006      	beq.n	800d694 <tcp_enqueue_flags+0x100>
 800d686:	4b32      	ldr	r3, [pc, #200]	@ (800d750 <tcp_enqueue_flags+0x1bc>)
 800d688:	f240 4243 	movw	r2, #1091	@ 0x443
 800d68c:	4936      	ldr	r1, [pc, #216]	@ (800d768 <tcp_enqueue_flags+0x1d4>)
 800d68e:	4832      	ldr	r0, [pc, #200]	@ (800d758 <tcp_enqueue_flags+0x1c4>)
 800d690:	f003 feae 	bl	80113f0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d103      	bne.n	800d6a4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	68fa      	ldr	r2, [r7, #12]
 800d6a0:	66da      	str	r2, [r3, #108]	@ 0x6c
 800d6a2:	e00d      	b.n	800d6c0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d6a8:	61bb      	str	r3, [r7, #24]
 800d6aa:	e002      	b.n	800d6b2 <tcp_enqueue_flags+0x11e>
 800d6ac:	69bb      	ldr	r3, [r7, #24]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	61bb      	str	r3, [r7, #24]
 800d6b2:	69bb      	ldr	r3, [r7, #24]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d1f8      	bne.n	800d6ac <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800d6ba:	69bb      	ldr	r3, [r7, #24]
 800d6bc:	68fa      	ldr	r2, [r7, #12]
 800d6be:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d6c8:	78fb      	ldrb	r3, [r7, #3]
 800d6ca:	f003 0302 	and.w	r3, r3, #2
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d104      	bne.n	800d6dc <tcp_enqueue_flags+0x148>
 800d6d2:	78fb      	ldrb	r3, [r7, #3]
 800d6d4:	f003 0301 	and.w	r3, r3, #1
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d004      	beq.n	800d6e6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d6e0:	1c5a      	adds	r2, r3, #1
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800d6e6:	78fb      	ldrb	r3, [r7, #3]
 800d6e8:	f003 0301 	and.w	r3, r3, #1
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d006      	beq.n	800d6fe <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	8b5b      	ldrh	r3, [r3, #26]
 800d6f4:	f043 0320 	orr.w	r3, r3, #32
 800d6f8:	b29a      	uxth	r2, r3
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	685b      	ldr	r3, [r3, #4]
 800d702:	4618      	mov	r0, r3
 800d704:	f7fa fd4e 	bl	80081a4 <pbuf_clen>
 800d708:	4603      	mov	r3, r0
 800d70a:	461a      	mov	r2, r3
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d712:	4413      	add	r3, r2
 800d714:	b29a      	uxth	r2, r3
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d722:	2b00      	cmp	r3, #0
 800d724:	d00e      	beq.n	800d744 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d10a      	bne.n	800d744 <tcp_enqueue_flags+0x1b0>
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d732:	2b00      	cmp	r3, #0
 800d734:	d106      	bne.n	800d744 <tcp_enqueue_flags+0x1b0>
 800d736:	4b06      	ldr	r3, [pc, #24]	@ (800d750 <tcp_enqueue_flags+0x1bc>)
 800d738:	f240 4265 	movw	r2, #1125	@ 0x465
 800d73c:	490b      	ldr	r1, [pc, #44]	@ (800d76c <tcp_enqueue_flags+0x1d8>)
 800d73e:	4806      	ldr	r0, [pc, #24]	@ (800d758 <tcp_enqueue_flags+0x1c4>)
 800d740:	f003 fe56 	bl	80113f0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d744:	2300      	movs	r3, #0
}
 800d746:	4618      	mov	r0, r3
 800d748:	3720      	adds	r7, #32
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}
 800d74e:	bf00      	nop
 800d750:	08013b88 	.word	0x08013b88
 800d754:	08013fac 	.word	0x08013fac
 800d758:	08013bdc 	.word	0x08013bdc
 800d75c:	08014004 	.word	0x08014004
 800d760:	08014024 	.word	0x08014024
 800d764:	08014060 	.word	0x08014060
 800d768:	08014078 	.word	0x08014078
 800d76c:	080140a4 	.word	0x080140a4

0800d770 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d770:	b5b0      	push	{r4, r5, r7, lr}
 800d772:	b08a      	sub	sp, #40	@ 0x28
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d106      	bne.n	800d78c <tcp_output+0x1c>
 800d77e:	4b8a      	ldr	r3, [pc, #552]	@ (800d9a8 <tcp_output+0x238>)
 800d780:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800d784:	4989      	ldr	r1, [pc, #548]	@ (800d9ac <tcp_output+0x23c>)
 800d786:	488a      	ldr	r0, [pc, #552]	@ (800d9b0 <tcp_output+0x240>)
 800d788:	f003 fe32 	bl	80113f0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	7d1b      	ldrb	r3, [r3, #20]
 800d790:	2b01      	cmp	r3, #1
 800d792:	d106      	bne.n	800d7a2 <tcp_output+0x32>
 800d794:	4b84      	ldr	r3, [pc, #528]	@ (800d9a8 <tcp_output+0x238>)
 800d796:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800d79a:	4986      	ldr	r1, [pc, #536]	@ (800d9b4 <tcp_output+0x244>)
 800d79c:	4884      	ldr	r0, [pc, #528]	@ (800d9b0 <tcp_output+0x240>)
 800d79e:	f003 fe27 	bl	80113f0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d7a2:	4b85      	ldr	r3, [pc, #532]	@ (800d9b8 <tcp_output+0x248>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	687a      	ldr	r2, [r7, #4]
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	d101      	bne.n	800d7b0 <tcp_output+0x40>
    return ERR_OK;
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	e1ce      	b.n	800db4e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	bf28      	it	cs
 800d7c0:	4613      	movcs	r3, r2
 800d7c2:	b29b      	uxth	r3, r3
 800d7c4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d7ca:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800d7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d10b      	bne.n	800d7ea <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	8b5b      	ldrh	r3, [r3, #26]
 800d7d6:	f003 0302 	and.w	r3, r3, #2
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	f000 81aa 	beq.w	800db34 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f000 fdcb 	bl	800e37c <tcp_send_empty_ack>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	e1b1      	b.n	800db4e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d7ea:	6879      	ldr	r1, [r7, #4]
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	3304      	adds	r3, #4
 800d7f0:	461a      	mov	r2, r3
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f7ff f826 	bl	800c844 <tcp_route>
 800d7f8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d102      	bne.n	800d806 <tcp_output+0x96>
    return ERR_RTE;
 800d800:	f06f 0303 	mvn.w	r3, #3
 800d804:	e1a3      	b.n	800db4e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d003      	beq.n	800d814 <tcp_output+0xa4>
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d111      	bne.n	800d838 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d814:	697b      	ldr	r3, [r7, #20]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d002      	beq.n	800d820 <tcp_output+0xb0>
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	3304      	adds	r3, #4
 800d81e:	e000      	b.n	800d822 <tcp_output+0xb2>
 800d820:	2300      	movs	r3, #0
 800d822:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800d824:	693b      	ldr	r3, [r7, #16]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d102      	bne.n	800d830 <tcp_output+0xc0>
      return ERR_RTE;
 800d82a:	f06f 0303 	mvn.w	r3, #3
 800d82e:	e18e      	b.n	800db4e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d830:	693b      	ldr	r3, [r7, #16]
 800d832:	681a      	ldr	r2, [r3, #0]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d83a:	68db      	ldr	r3, [r3, #12]
 800d83c:	685b      	ldr	r3, [r3, #4]
 800d83e:	4618      	mov	r0, r3
 800d840:	f7f9 f8ae 	bl	80069a0 <lwip_htonl>
 800d844:	4602      	mov	r2, r0
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d84a:	1ad3      	subs	r3, r2, r3
 800d84c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d84e:	8912      	ldrh	r2, [r2, #8]
 800d850:	4413      	add	r3, r2
 800d852:	69ba      	ldr	r2, [r7, #24]
 800d854:	429a      	cmp	r2, r3
 800d856:	d227      	bcs.n	800d8a8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d85e:	461a      	mov	r2, r3
 800d860:	69bb      	ldr	r3, [r7, #24]
 800d862:	4293      	cmp	r3, r2
 800d864:	d114      	bne.n	800d890 <tcp_output+0x120>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d110      	bne.n	800d890 <tcp_output+0x120>
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d874:	2b00      	cmp	r3, #0
 800d876:	d10b      	bne.n	800d890 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2200      	movs	r2, #0
 800d87c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2201      	movs	r2, #1
 800d884:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2200      	movs	r2, #0
 800d88c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	8b5b      	ldrh	r3, [r3, #26]
 800d894:	f003 0302 	and.w	r3, r3, #2
 800d898:	2b00      	cmp	r3, #0
 800d89a:	f000 814d 	beq.w	800db38 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f000 fd6c 	bl	800e37c <tcp_send_empty_ack>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	e152      	b.n	800db4e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d8b4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d8b6:	6a3b      	ldr	r3, [r7, #32]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	f000 811c 	beq.w	800daf6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800d8be:	e002      	b.n	800d8c6 <tcp_output+0x156>
 800d8c0:	6a3b      	ldr	r3, [r7, #32]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	623b      	str	r3, [r7, #32]
 800d8c6:	6a3b      	ldr	r3, [r7, #32]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d1f8      	bne.n	800d8c0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d8ce:	e112      	b.n	800daf6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8d2:	68db      	ldr	r3, [r3, #12]
 800d8d4:	899b      	ldrh	r3, [r3, #12]
 800d8d6:	b29b      	uxth	r3, r3
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f7f9 f84b 	bl	8006974 <lwip_htons>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	b2db      	uxtb	r3, r3
 800d8e2:	f003 0304 	and.w	r3, r3, #4
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d006      	beq.n	800d8f8 <tcp_output+0x188>
 800d8ea:	4b2f      	ldr	r3, [pc, #188]	@ (800d9a8 <tcp_output+0x238>)
 800d8ec:	f240 5236 	movw	r2, #1334	@ 0x536
 800d8f0:	4932      	ldr	r1, [pc, #200]	@ (800d9bc <tcp_output+0x24c>)
 800d8f2:	482f      	ldr	r0, [pc, #188]	@ (800d9b0 <tcp_output+0x240>)
 800d8f4:	f003 fd7c 	bl	80113f0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d01f      	beq.n	800d940 <tcp_output+0x1d0>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	8b5b      	ldrh	r3, [r3, #26]
 800d904:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d119      	bne.n	800d940 <tcp_output+0x1d0>
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d910:	2b00      	cmp	r3, #0
 800d912:	d00b      	beq.n	800d92c <tcp_output+0x1bc>
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d110      	bne.n	800d940 <tcp_output+0x1d0>
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d922:	891a      	ldrh	r2, [r3, #8]
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d928:	429a      	cmp	r2, r3
 800d92a:	d209      	bcs.n	800d940 <tcp_output+0x1d0>
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800d932:	2b00      	cmp	r3, #0
 800d934:	d004      	beq.n	800d940 <tcp_output+0x1d0>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d93c:	2b08      	cmp	r3, #8
 800d93e:	d901      	bls.n	800d944 <tcp_output+0x1d4>
 800d940:	2301      	movs	r3, #1
 800d942:	e000      	b.n	800d946 <tcp_output+0x1d6>
 800d944:	2300      	movs	r3, #0
 800d946:	2b00      	cmp	r3, #0
 800d948:	d106      	bne.n	800d958 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	8b5b      	ldrh	r3, [r3, #26]
 800d94e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d952:	2b00      	cmp	r3, #0
 800d954:	f000 80e4 	beq.w	800db20 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	7d1b      	ldrb	r3, [r3, #20]
 800d95c:	2b02      	cmp	r3, #2
 800d95e:	d00d      	beq.n	800d97c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d962:	68db      	ldr	r3, [r3, #12]
 800d964:	899b      	ldrh	r3, [r3, #12]
 800d966:	b29c      	uxth	r4, r3
 800d968:	2010      	movs	r0, #16
 800d96a:	f7f9 f803 	bl	8006974 <lwip_htons>
 800d96e:	4603      	mov	r3, r0
 800d970:	461a      	mov	r2, r3
 800d972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d974:	68db      	ldr	r3, [r3, #12]
 800d976:	4322      	orrs	r2, r4
 800d978:	b292      	uxth	r2, r2
 800d97a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d97c:	697a      	ldr	r2, [r7, #20]
 800d97e:	6879      	ldr	r1, [r7, #4]
 800d980:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d982:	f000 f909 	bl	800db98 <tcp_output_segment>
 800d986:	4603      	mov	r3, r0
 800d988:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d98a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d016      	beq.n	800d9c0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	8b5b      	ldrh	r3, [r3, #26]
 800d996:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d99a:	b29a      	uxth	r2, r3
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	835a      	strh	r2, [r3, #26]
      return err;
 800d9a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9a4:	e0d3      	b.n	800db4e <tcp_output+0x3de>
 800d9a6:	bf00      	nop
 800d9a8:	08013b88 	.word	0x08013b88
 800d9ac:	080140cc 	.word	0x080140cc
 800d9b0:	08013bdc 	.word	0x08013bdc
 800d9b4:	080140e4 	.word	0x080140e4
 800d9b8:	200085f4 	.word	0x200085f4
 800d9bc:	0801410c 	.word	0x0801410c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d9c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9c2:	681a      	ldr	r2, [r3, #0]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	7d1b      	ldrb	r3, [r3, #20]
 800d9cc:	2b02      	cmp	r3, #2
 800d9ce:	d006      	beq.n	800d9de <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	8b5b      	ldrh	r3, [r3, #26]
 800d9d4:	f023 0303 	bic.w	r3, r3, #3
 800d9d8:	b29a      	uxth	r2, r3
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9e0:	68db      	ldr	r3, [r3, #12]
 800d9e2:	685b      	ldr	r3, [r3, #4]
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f7f8 ffdb 	bl	80069a0 <lwip_htonl>
 800d9ea:	4604      	mov	r4, r0
 800d9ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ee:	891b      	ldrh	r3, [r3, #8]
 800d9f0:	461d      	mov	r5, r3
 800d9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9f4:	68db      	ldr	r3, [r3, #12]
 800d9f6:	899b      	ldrh	r3, [r3, #12]
 800d9f8:	b29b      	uxth	r3, r3
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f7f8 ffba 	bl	8006974 <lwip_htons>
 800da00:	4603      	mov	r3, r0
 800da02:	b2db      	uxtb	r3, r3
 800da04:	f003 0303 	and.w	r3, r3, #3
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d001      	beq.n	800da10 <tcp_output+0x2a0>
 800da0c:	2301      	movs	r3, #1
 800da0e:	e000      	b.n	800da12 <tcp_output+0x2a2>
 800da10:	2300      	movs	r3, #0
 800da12:	442b      	add	r3, r5
 800da14:	4423      	add	r3, r4
 800da16:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	1ad3      	subs	r3, r2, r3
 800da20:	2b00      	cmp	r3, #0
 800da22:	da02      	bge.n	800da2a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	68ba      	ldr	r2, [r7, #8]
 800da28:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800da2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da2c:	891b      	ldrh	r3, [r3, #8]
 800da2e:	461c      	mov	r4, r3
 800da30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da32:	68db      	ldr	r3, [r3, #12]
 800da34:	899b      	ldrh	r3, [r3, #12]
 800da36:	b29b      	uxth	r3, r3
 800da38:	4618      	mov	r0, r3
 800da3a:	f7f8 ff9b 	bl	8006974 <lwip_htons>
 800da3e:	4603      	mov	r3, r0
 800da40:	b2db      	uxtb	r3, r3
 800da42:	f003 0303 	and.w	r3, r3, #3
 800da46:	2b00      	cmp	r3, #0
 800da48:	d001      	beq.n	800da4e <tcp_output+0x2de>
 800da4a:	2301      	movs	r3, #1
 800da4c:	e000      	b.n	800da50 <tcp_output+0x2e0>
 800da4e:	2300      	movs	r3, #0
 800da50:	4423      	add	r3, r4
 800da52:	2b00      	cmp	r3, #0
 800da54:	d049      	beq.n	800daea <tcp_output+0x37a>
      seg->next = NULL;
 800da56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da58:	2200      	movs	r2, #0
 800da5a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da60:	2b00      	cmp	r3, #0
 800da62:	d105      	bne.n	800da70 <tcp_output+0x300>
        pcb->unacked = seg;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da68:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800da6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da6c:	623b      	str	r3, [r7, #32]
 800da6e:	e03f      	b.n	800daf0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800da70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da72:	68db      	ldr	r3, [r3, #12]
 800da74:	685b      	ldr	r3, [r3, #4]
 800da76:	4618      	mov	r0, r3
 800da78:	f7f8 ff92 	bl	80069a0 <lwip_htonl>
 800da7c:	4604      	mov	r4, r0
 800da7e:	6a3b      	ldr	r3, [r7, #32]
 800da80:	68db      	ldr	r3, [r3, #12]
 800da82:	685b      	ldr	r3, [r3, #4]
 800da84:	4618      	mov	r0, r3
 800da86:	f7f8 ff8b 	bl	80069a0 <lwip_htonl>
 800da8a:	4603      	mov	r3, r0
 800da8c:	1ae3      	subs	r3, r4, r3
 800da8e:	2b00      	cmp	r3, #0
 800da90:	da24      	bge.n	800dadc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	3370      	adds	r3, #112	@ 0x70
 800da96:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800da98:	e002      	b.n	800daa0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800da9a:	69fb      	ldr	r3, [r7, #28]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800daa0:	69fb      	ldr	r3, [r7, #28]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d011      	beq.n	800dacc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800daa8:	69fb      	ldr	r3, [r7, #28]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	68db      	ldr	r3, [r3, #12]
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	4618      	mov	r0, r3
 800dab2:	f7f8 ff75 	bl	80069a0 <lwip_htonl>
 800dab6:	4604      	mov	r4, r0
 800dab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daba:	68db      	ldr	r3, [r3, #12]
 800dabc:	685b      	ldr	r3, [r3, #4]
 800dabe:	4618      	mov	r0, r3
 800dac0:	f7f8 ff6e 	bl	80069a0 <lwip_htonl>
 800dac4:	4603      	mov	r3, r0
 800dac6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800dac8:	2b00      	cmp	r3, #0
 800daca:	dbe6      	blt.n	800da9a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800dacc:	69fb      	ldr	r3, [r7, #28]
 800dace:	681a      	ldr	r2, [r3, #0]
 800dad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dad2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800dad4:	69fb      	ldr	r3, [r7, #28]
 800dad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dad8:	601a      	str	r2, [r3, #0]
 800dada:	e009      	b.n	800daf0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800dadc:	6a3b      	ldr	r3, [r7, #32]
 800dade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dae0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800dae2:	6a3b      	ldr	r3, [r7, #32]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	623b      	str	r3, [r7, #32]
 800dae8:	e002      	b.n	800daf0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800daea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800daec:	f7fb ff01 	bl	80098f2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800daf4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800daf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d012      	beq.n	800db22 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800dafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dafe:	68db      	ldr	r3, [r3, #12]
 800db00:	685b      	ldr	r3, [r3, #4]
 800db02:	4618      	mov	r0, r3
 800db04:	f7f8 ff4c 	bl	80069a0 <lwip_htonl>
 800db08:	4602      	mov	r2, r0
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db0e:	1ad3      	subs	r3, r2, r3
 800db10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db12:	8912      	ldrh	r2, [r2, #8]
 800db14:	4413      	add	r3, r2
  while (seg != NULL &&
 800db16:	69ba      	ldr	r2, [r7, #24]
 800db18:	429a      	cmp	r2, r3
 800db1a:	f4bf aed9 	bcs.w	800d8d0 <tcp_output+0x160>
 800db1e:	e000      	b.n	800db22 <tcp_output+0x3b2>
      break;
 800db20:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db26:	2b00      	cmp	r3, #0
 800db28:	d108      	bne.n	800db3c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2200      	movs	r2, #0
 800db2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800db32:	e004      	b.n	800db3e <tcp_output+0x3ce>
    goto output_done;
 800db34:	bf00      	nop
 800db36:	e002      	b.n	800db3e <tcp_output+0x3ce>
    goto output_done;
 800db38:	bf00      	nop
 800db3a:	e000      	b.n	800db3e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800db3c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	8b5b      	ldrh	r3, [r3, #26]
 800db42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800db46:	b29a      	uxth	r2, r3
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800db4c:	2300      	movs	r3, #0
}
 800db4e:	4618      	mov	r0, r3
 800db50:	3728      	adds	r7, #40	@ 0x28
 800db52:	46bd      	mov	sp, r7
 800db54:	bdb0      	pop	{r4, r5, r7, pc}
 800db56:	bf00      	nop

0800db58 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d106      	bne.n	800db74 <tcp_output_segment_busy+0x1c>
 800db66:	4b09      	ldr	r3, [pc, #36]	@ (800db8c <tcp_output_segment_busy+0x34>)
 800db68:	f240 529a 	movw	r2, #1434	@ 0x59a
 800db6c:	4908      	ldr	r1, [pc, #32]	@ (800db90 <tcp_output_segment_busy+0x38>)
 800db6e:	4809      	ldr	r0, [pc, #36]	@ (800db94 <tcp_output_segment_busy+0x3c>)
 800db70:	f003 fc3e 	bl	80113f0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	685b      	ldr	r3, [r3, #4]
 800db78:	7b9b      	ldrb	r3, [r3, #14]
 800db7a:	2b01      	cmp	r3, #1
 800db7c:	d001      	beq.n	800db82 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800db7e:	2301      	movs	r3, #1
 800db80:	e000      	b.n	800db84 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800db82:	2300      	movs	r3, #0
}
 800db84:	4618      	mov	r0, r3
 800db86:	3708      	adds	r7, #8
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}
 800db8c:	08013b88 	.word	0x08013b88
 800db90:	08014124 	.word	0x08014124
 800db94:	08013bdc 	.word	0x08013bdc

0800db98 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800db98:	b5b0      	push	{r4, r5, r7, lr}
 800db9a:	b08c      	sub	sp, #48	@ 0x30
 800db9c:	af04      	add	r7, sp, #16
 800db9e:	60f8      	str	r0, [r7, #12]
 800dba0:	60b9      	str	r1, [r7, #8]
 800dba2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d106      	bne.n	800dbb8 <tcp_output_segment+0x20>
 800dbaa:	4b64      	ldr	r3, [pc, #400]	@ (800dd3c <tcp_output_segment+0x1a4>)
 800dbac:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800dbb0:	4963      	ldr	r1, [pc, #396]	@ (800dd40 <tcp_output_segment+0x1a8>)
 800dbb2:	4864      	ldr	r0, [pc, #400]	@ (800dd44 <tcp_output_segment+0x1ac>)
 800dbb4:	f003 fc1c 	bl	80113f0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d106      	bne.n	800dbcc <tcp_output_segment+0x34>
 800dbbe:	4b5f      	ldr	r3, [pc, #380]	@ (800dd3c <tcp_output_segment+0x1a4>)
 800dbc0:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800dbc4:	4960      	ldr	r1, [pc, #384]	@ (800dd48 <tcp_output_segment+0x1b0>)
 800dbc6:	485f      	ldr	r0, [pc, #380]	@ (800dd44 <tcp_output_segment+0x1ac>)
 800dbc8:	f003 fc12 	bl	80113f0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d106      	bne.n	800dbe0 <tcp_output_segment+0x48>
 800dbd2:	4b5a      	ldr	r3, [pc, #360]	@ (800dd3c <tcp_output_segment+0x1a4>)
 800dbd4:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800dbd8:	495c      	ldr	r1, [pc, #368]	@ (800dd4c <tcp_output_segment+0x1b4>)
 800dbda:	485a      	ldr	r0, [pc, #360]	@ (800dd44 <tcp_output_segment+0x1ac>)
 800dbdc:	f003 fc08 	bl	80113f0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800dbe0:	68f8      	ldr	r0, [r7, #12]
 800dbe2:	f7ff ffb9 	bl	800db58 <tcp_output_segment_busy>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d001      	beq.n	800dbf0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800dbec:	2300      	movs	r3, #0
 800dbee:	e0a1      	b.n	800dd34 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	68dc      	ldr	r4, [r3, #12]
 800dbf8:	4610      	mov	r0, r2
 800dbfa:	f7f8 fed1 	bl	80069a0 <lwip_htonl>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	68dc      	ldr	r4, [r3, #12]
 800dc0a:	4610      	mov	r0, r2
 800dc0c:	f7f8 feb2 	bl	8006974 <lwip_htons>
 800dc10:	4603      	mov	r3, r0
 800dc12:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc18:	68ba      	ldr	r2, [r7, #8]
 800dc1a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800dc1c:	441a      	add	r2, r3
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	68db      	ldr	r3, [r3, #12]
 800dc26:	3314      	adds	r3, #20
 800dc28:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	7a9b      	ldrb	r3, [r3, #10]
 800dc2e:	f003 0301 	and.w	r3, r3, #1
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d015      	beq.n	800dc62 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	3304      	adds	r3, #4
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	6879      	ldr	r1, [r7, #4]
 800dc3e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800dc42:	f7fc fa39 	bl	800a0b8 <tcp_eff_send_mss_netif>
 800dc46:	4603      	mov	r3, r0
 800dc48:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800dc4a:	8b7b      	ldrh	r3, [r7, #26]
 800dc4c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800dc50:	4618      	mov	r0, r3
 800dc52:	f7f8 fea5 	bl	80069a0 <lwip_htonl>
 800dc56:	4602      	mov	r2, r0
 800dc58:	69fb      	ldr	r3, [r7, #28]
 800dc5a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800dc5c:	69fb      	ldr	r3, [r7, #28]
 800dc5e:	3304      	adds	r3, #4
 800dc60:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	da02      	bge.n	800dc72 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	2200      	movs	r2, #0
 800dc70:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d10c      	bne.n	800dc94 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800dc7a:	4b35      	ldr	r3, [pc, #212]	@ (800dd50 <tcp_output_segment+0x1b8>)
 800dc7c:	681a      	ldr	r2, [r3, #0]
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	68db      	ldr	r3, [r3, #12]
 800dc86:	685b      	ldr	r3, [r3, #4]
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f7f8 fe89 	bl	80069a0 <lwip_htonl>
 800dc8e:	4602      	mov	r2, r0
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	68da      	ldr	r2, [r3, #12]
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	685b      	ldr	r3, [r3, #4]
 800dc9c:	685b      	ldr	r3, [r3, #4]
 800dc9e:	1ad3      	subs	r3, r2, r3
 800dca0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	685b      	ldr	r3, [r3, #4]
 800dca6:	8959      	ldrh	r1, [r3, #10]
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	685b      	ldr	r3, [r3, #4]
 800dcac:	8b3a      	ldrh	r2, [r7, #24]
 800dcae:	1a8a      	subs	r2, r1, r2
 800dcb0:	b292      	uxth	r2, r2
 800dcb2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	685b      	ldr	r3, [r3, #4]
 800dcb8:	8919      	ldrh	r1, [r3, #8]
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	685b      	ldr	r3, [r3, #4]
 800dcbe:	8b3a      	ldrh	r2, [r7, #24]
 800dcc0:	1a8a      	subs	r2, r1, r2
 800dcc2:	b292      	uxth	r2, r2
 800dcc4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	685b      	ldr	r3, [r3, #4]
 800dcca:	68fa      	ldr	r2, [r7, #12]
 800dccc:	68d2      	ldr	r2, [r2, #12]
 800dcce:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	68db      	ldr	r3, [r3, #12]
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	741a      	strb	r2, [r3, #16]
 800dcd8:	2200      	movs	r2, #0
 800dcda:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	68da      	ldr	r2, [r3, #12]
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	7a9b      	ldrb	r3, [r3, #10]
 800dce4:	f003 0301 	and.w	r3, r3, #1
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d001      	beq.n	800dcf0 <tcp_output_segment+0x158>
 800dcec:	2318      	movs	r3, #24
 800dcee:	e000      	b.n	800dcf2 <tcp_output_segment+0x15a>
 800dcf0:	2314      	movs	r3, #20
 800dcf2:	4413      	add	r3, r2
 800dcf4:	69fa      	ldr	r2, [r7, #28]
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	d006      	beq.n	800dd08 <tcp_output_segment+0x170>
 800dcfa:	4b10      	ldr	r3, [pc, #64]	@ (800dd3c <tcp_output_segment+0x1a4>)
 800dcfc:	f240 621c 	movw	r2, #1564	@ 0x61c
 800dd00:	4914      	ldr	r1, [pc, #80]	@ (800dd54 <tcp_output_segment+0x1bc>)
 800dd02:	4810      	ldr	r0, [pc, #64]	@ (800dd44 <tcp_output_segment+0x1ac>)
 800dd04:	f003 fb74 	bl	80113f0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	6858      	ldr	r0, [r3, #4]
 800dd0c:	68b9      	ldr	r1, [r7, #8]
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	1d1c      	adds	r4, r3, #4
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	7add      	ldrb	r5, [r3, #11]
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	7a9b      	ldrb	r3, [r3, #10]
 800dd1a:	687a      	ldr	r2, [r7, #4]
 800dd1c:	9202      	str	r2, [sp, #8]
 800dd1e:	2206      	movs	r2, #6
 800dd20:	9201      	str	r2, [sp, #4]
 800dd22:	9300      	str	r3, [sp, #0]
 800dd24:	462b      	mov	r3, r5
 800dd26:	4622      	mov	r2, r4
 800dd28:	f002 fa34 	bl	8010194 <ip4_output_if>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800dd30:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3720      	adds	r7, #32
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bdb0      	pop	{r4, r5, r7, pc}
 800dd3c:	08013b88 	.word	0x08013b88
 800dd40:	0801414c 	.word	0x0801414c
 800dd44:	08013bdc 	.word	0x08013bdc
 800dd48:	0801416c 	.word	0x0801416c
 800dd4c:	0801418c 	.word	0x0801418c
 800dd50:	200085a8 	.word	0x200085a8
 800dd54:	080141b0 	.word	0x080141b0

0800dd58 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800dd58:	b5b0      	push	{r4, r5, r7, lr}
 800dd5a:	b084      	sub	sp, #16
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d106      	bne.n	800dd74 <tcp_rexmit_rto_prepare+0x1c>
 800dd66:	4b31      	ldr	r3, [pc, #196]	@ (800de2c <tcp_rexmit_rto_prepare+0xd4>)
 800dd68:	f240 6263 	movw	r2, #1635	@ 0x663
 800dd6c:	4930      	ldr	r1, [pc, #192]	@ (800de30 <tcp_rexmit_rto_prepare+0xd8>)
 800dd6e:	4831      	ldr	r0, [pc, #196]	@ (800de34 <tcp_rexmit_rto_prepare+0xdc>)
 800dd70:	f003 fb3e 	bl	80113f0 <iprintf>

  if (pcb->unacked == NULL) {
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d102      	bne.n	800dd82 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800dd7c:	f06f 0305 	mvn.w	r3, #5
 800dd80:	e050      	b.n	800de24 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dd86:	60fb      	str	r3, [r7, #12]
 800dd88:	e00b      	b.n	800dda2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800dd8a:	68f8      	ldr	r0, [r7, #12]
 800dd8c:	f7ff fee4 	bl	800db58 <tcp_output_segment_busy>
 800dd90:	4603      	mov	r3, r0
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d002      	beq.n	800dd9c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800dd96:	f06f 0305 	mvn.w	r3, #5
 800dd9a:	e043      	b.n	800de24 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	60fb      	str	r3, [r7, #12]
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d1ef      	bne.n	800dd8a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800ddaa:	68f8      	ldr	r0, [r7, #12]
 800ddac:	f7ff fed4 	bl	800db58 <tcp_output_segment_busy>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d002      	beq.n	800ddbc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800ddb6:	f06f 0305 	mvn.w	r3, #5
 800ddba:	e033      	b.n	800de24 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	8b5b      	ldrh	r3, [r3, #26]
 800ddd6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800ddda:	b29a      	uxth	r2, r3
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	68db      	ldr	r3, [r3, #12]
 800dde4:	685b      	ldr	r3, [r3, #4]
 800dde6:	4618      	mov	r0, r3
 800dde8:	f7f8 fdda 	bl	80069a0 <lwip_htonl>
 800ddec:	4604      	mov	r4, r0
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	891b      	ldrh	r3, [r3, #8]
 800ddf2:	461d      	mov	r5, r3
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	68db      	ldr	r3, [r3, #12]
 800ddf8:	899b      	ldrh	r3, [r3, #12]
 800ddfa:	b29b      	uxth	r3, r3
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f7f8 fdb9 	bl	8006974 <lwip_htons>
 800de02:	4603      	mov	r3, r0
 800de04:	b2db      	uxtb	r3, r3
 800de06:	f003 0303 	and.w	r3, r3, #3
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d001      	beq.n	800de12 <tcp_rexmit_rto_prepare+0xba>
 800de0e:	2301      	movs	r3, #1
 800de10:	e000      	b.n	800de14 <tcp_rexmit_rto_prepare+0xbc>
 800de12:	2300      	movs	r3, #0
 800de14:	442b      	add	r3, r5
 800de16:	18e2      	adds	r2, r4, r3
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2200      	movs	r2, #0
 800de20:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800de22:	2300      	movs	r3, #0
}
 800de24:	4618      	mov	r0, r3
 800de26:	3710      	adds	r7, #16
 800de28:	46bd      	mov	sp, r7
 800de2a:	bdb0      	pop	{r4, r5, r7, pc}
 800de2c:	08013b88 	.word	0x08013b88
 800de30:	080141c4 	.word	0x080141c4
 800de34:	08013bdc 	.word	0x08013bdc

0800de38 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b082      	sub	sp, #8
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d106      	bne.n	800de54 <tcp_rexmit_rto_commit+0x1c>
 800de46:	4b0d      	ldr	r3, [pc, #52]	@ (800de7c <tcp_rexmit_rto_commit+0x44>)
 800de48:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800de4c:	490c      	ldr	r1, [pc, #48]	@ (800de80 <tcp_rexmit_rto_commit+0x48>)
 800de4e:	480d      	ldr	r0, [pc, #52]	@ (800de84 <tcp_rexmit_rto_commit+0x4c>)
 800de50:	f003 face 	bl	80113f0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800de5a:	2bff      	cmp	r3, #255	@ 0xff
 800de5c:	d007      	beq.n	800de6e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800de64:	3301      	adds	r3, #1
 800de66:	b2da      	uxtb	r2, r3
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f7ff fc7e 	bl	800d770 <tcp_output>
}
 800de74:	bf00      	nop
 800de76:	3708      	adds	r7, #8
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}
 800de7c:	08013b88 	.word	0x08013b88
 800de80:	080141e8 	.word	0x080141e8
 800de84:	08013bdc 	.word	0x08013bdc

0800de88 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b082      	sub	sp, #8
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d106      	bne.n	800dea4 <tcp_rexmit_rto+0x1c>
 800de96:	4b0a      	ldr	r3, [pc, #40]	@ (800dec0 <tcp_rexmit_rto+0x38>)
 800de98:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800de9c:	4909      	ldr	r1, [pc, #36]	@ (800dec4 <tcp_rexmit_rto+0x3c>)
 800de9e:	480a      	ldr	r0, [pc, #40]	@ (800dec8 <tcp_rexmit_rto+0x40>)
 800dea0:	f003 faa6 	bl	80113f0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f7ff ff57 	bl	800dd58 <tcp_rexmit_rto_prepare>
 800deaa:	4603      	mov	r3, r0
 800deac:	2b00      	cmp	r3, #0
 800deae:	d102      	bne.n	800deb6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f7ff ffc1 	bl	800de38 <tcp_rexmit_rto_commit>
  }
}
 800deb6:	bf00      	nop
 800deb8:	3708      	adds	r7, #8
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
 800debe:	bf00      	nop
 800dec0:	08013b88 	.word	0x08013b88
 800dec4:	0801420c 	.word	0x0801420c
 800dec8:	08013bdc 	.word	0x08013bdc

0800decc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800decc:	b590      	push	{r4, r7, lr}
 800dece:	b085      	sub	sp, #20
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d106      	bne.n	800dee8 <tcp_rexmit+0x1c>
 800deda:	4b2f      	ldr	r3, [pc, #188]	@ (800df98 <tcp_rexmit+0xcc>)
 800dedc:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800dee0:	492e      	ldr	r1, [pc, #184]	@ (800df9c <tcp_rexmit+0xd0>)
 800dee2:	482f      	ldr	r0, [pc, #188]	@ (800dfa0 <tcp_rexmit+0xd4>)
 800dee4:	f003 fa84 	bl	80113f0 <iprintf>

  if (pcb->unacked == NULL) {
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800deec:	2b00      	cmp	r3, #0
 800deee:	d102      	bne.n	800def6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800def0:	f06f 0305 	mvn.w	r3, #5
 800def4:	e04c      	b.n	800df90 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800defa:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800defc:	68b8      	ldr	r0, [r7, #8]
 800defe:	f7ff fe2b 	bl	800db58 <tcp_output_segment_busy>
 800df02:	4603      	mov	r3, r0
 800df04:	2b00      	cmp	r3, #0
 800df06:	d002      	beq.n	800df0e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800df08:	f06f 0305 	mvn.w	r3, #5
 800df0c:	e040      	b.n	800df90 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	681a      	ldr	r2, [r3, #0]
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	336c      	adds	r3, #108	@ 0x6c
 800df1a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800df1c:	e002      	b.n	800df24 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d011      	beq.n	800df50 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	68db      	ldr	r3, [r3, #12]
 800df32:	685b      	ldr	r3, [r3, #4]
 800df34:	4618      	mov	r0, r3
 800df36:	f7f8 fd33 	bl	80069a0 <lwip_htonl>
 800df3a:	4604      	mov	r4, r0
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	68db      	ldr	r3, [r3, #12]
 800df40:	685b      	ldr	r3, [r3, #4]
 800df42:	4618      	mov	r0, r3
 800df44:	f7f8 fd2c 	bl	80069a0 <lwip_htonl>
 800df48:	4603      	mov	r3, r0
 800df4a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	dbe6      	blt.n	800df1e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	681a      	ldr	r2, [r3, #0]
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	68ba      	ldr	r2, [r7, #8]
 800df5c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d103      	bne.n	800df6e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2200      	movs	r2, #0
 800df6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800df74:	2bff      	cmp	r3, #255	@ 0xff
 800df76:	d007      	beq.n	800df88 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800df7e:	3301      	adds	r3, #1
 800df80:	b2da      	uxtb	r2, r3
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2200      	movs	r2, #0
 800df8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800df8e:	2300      	movs	r3, #0
}
 800df90:	4618      	mov	r0, r3
 800df92:	3714      	adds	r7, #20
 800df94:	46bd      	mov	sp, r7
 800df96:	bd90      	pop	{r4, r7, pc}
 800df98:	08013b88 	.word	0x08013b88
 800df9c:	08014228 	.word	0x08014228
 800dfa0:	08013bdc 	.word	0x08013bdc

0800dfa4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b082      	sub	sp, #8
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d106      	bne.n	800dfc0 <tcp_rexmit_fast+0x1c>
 800dfb2:	4b2a      	ldr	r3, [pc, #168]	@ (800e05c <tcp_rexmit_fast+0xb8>)
 800dfb4:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800dfb8:	4929      	ldr	r1, [pc, #164]	@ (800e060 <tcp_rexmit_fast+0xbc>)
 800dfba:	482a      	ldr	r0, [pc, #168]	@ (800e064 <tcp_rexmit_fast+0xc0>)
 800dfbc:	f003 fa18 	bl	80113f0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d045      	beq.n	800e054 <tcp_rexmit_fast+0xb0>
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	8b5b      	ldrh	r3, [r3, #26]
 800dfcc:	f003 0304 	and.w	r3, r3, #4
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d13f      	bne.n	800e054 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f7ff ff79 	bl	800decc <tcp_rexmit>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d139      	bne.n	800e054 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800dfec:	4293      	cmp	r3, r2
 800dfee:	bf28      	it	cs
 800dff0:	4613      	movcs	r3, r2
 800dff2:	b29b      	uxth	r3, r3
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	da00      	bge.n	800dffa <tcp_rexmit_fast+0x56>
 800dff8:	3301      	adds	r3, #1
 800dffa:	105b      	asrs	r3, r3, #1
 800dffc:	b29a      	uxth	r2, r3
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800e00a:	461a      	mov	r2, r3
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e010:	005b      	lsls	r3, r3, #1
 800e012:	429a      	cmp	r2, r3
 800e014:	d206      	bcs.n	800e024 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e01a:	005b      	lsls	r3, r3, #1
 800e01c:	b29a      	uxth	r2, r3
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e02e:	4619      	mov	r1, r3
 800e030:	0049      	lsls	r1, r1, #1
 800e032:	440b      	add	r3, r1
 800e034:	b29b      	uxth	r3, r3
 800e036:	4413      	add	r3, r2
 800e038:	b29a      	uxth	r2, r3
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	8b5b      	ldrh	r3, [r3, #26]
 800e044:	f043 0304 	orr.w	r3, r3, #4
 800e048:	b29a      	uxth	r2, r3
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	2200      	movs	r2, #0
 800e052:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800e054:	bf00      	nop
 800e056:	3708      	adds	r7, #8
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}
 800e05c:	08013b88 	.word	0x08013b88
 800e060:	08014240 	.word	0x08014240
 800e064:	08013bdc 	.word	0x08013bdc

0800e068 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b086      	sub	sp, #24
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	60f8      	str	r0, [r7, #12]
 800e070:	607b      	str	r3, [r7, #4]
 800e072:	460b      	mov	r3, r1
 800e074:	817b      	strh	r3, [r7, #10]
 800e076:	4613      	mov	r3, r2
 800e078:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e07a:	897a      	ldrh	r2, [r7, #10]
 800e07c:	893b      	ldrh	r3, [r7, #8]
 800e07e:	4413      	add	r3, r2
 800e080:	b29b      	uxth	r3, r3
 800e082:	3314      	adds	r3, #20
 800e084:	b29b      	uxth	r3, r3
 800e086:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e08a:	4619      	mov	r1, r3
 800e08c:	2022      	movs	r0, #34	@ 0x22
 800e08e:	f7f9 fd1d 	bl	8007acc <pbuf_alloc>
 800e092:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d04d      	beq.n	800e136 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e09a:	897b      	ldrh	r3, [r7, #10]
 800e09c:	3313      	adds	r3, #19
 800e09e:	697a      	ldr	r2, [r7, #20]
 800e0a0:	8952      	ldrh	r2, [r2, #10]
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	db06      	blt.n	800e0b4 <tcp_output_alloc_header_common+0x4c>
 800e0a6:	4b26      	ldr	r3, [pc, #152]	@ (800e140 <tcp_output_alloc_header_common+0xd8>)
 800e0a8:	f240 7223 	movw	r2, #1827	@ 0x723
 800e0ac:	4925      	ldr	r1, [pc, #148]	@ (800e144 <tcp_output_alloc_header_common+0xdc>)
 800e0ae:	4826      	ldr	r0, [pc, #152]	@ (800e148 <tcp_output_alloc_header_common+0xe0>)
 800e0b0:	f003 f99e 	bl	80113f0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	685b      	ldr	r3, [r3, #4]
 800e0b8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800e0ba:	8c3b      	ldrh	r3, [r7, #32]
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f7f8 fc59 	bl	8006974 <lwip_htons>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	461a      	mov	r2, r3
 800e0c6:	693b      	ldr	r3, [r7, #16]
 800e0c8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800e0ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f7f8 fc51 	bl	8006974 <lwip_htons>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	693b      	ldr	r3, [r7, #16]
 800e0d8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e0da:	693b      	ldr	r3, [r7, #16]
 800e0dc:	687a      	ldr	r2, [r7, #4]
 800e0de:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800e0e0:	68f8      	ldr	r0, [r7, #12]
 800e0e2:	f7f8 fc5d 	bl	80069a0 <lwip_htonl>
 800e0e6:	4602      	mov	r2, r0
 800e0e8:	693b      	ldr	r3, [r7, #16]
 800e0ea:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800e0ec:	897b      	ldrh	r3, [r7, #10]
 800e0ee:	089b      	lsrs	r3, r3, #2
 800e0f0:	b29b      	uxth	r3, r3
 800e0f2:	3305      	adds	r3, #5
 800e0f4:	b29b      	uxth	r3, r3
 800e0f6:	031b      	lsls	r3, r3, #12
 800e0f8:	b29a      	uxth	r2, r3
 800e0fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e0fe:	b29b      	uxth	r3, r3
 800e100:	4313      	orrs	r3, r2
 800e102:	b29b      	uxth	r3, r3
 800e104:	4618      	mov	r0, r3
 800e106:	f7f8 fc35 	bl	8006974 <lwip_htons>
 800e10a:	4603      	mov	r3, r0
 800e10c:	461a      	mov	r2, r3
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800e112:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800e114:	4618      	mov	r0, r3
 800e116:	f7f8 fc2d 	bl	8006974 <lwip_htons>
 800e11a:	4603      	mov	r3, r0
 800e11c:	461a      	mov	r2, r3
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e122:	693b      	ldr	r3, [r7, #16]
 800e124:	2200      	movs	r2, #0
 800e126:	741a      	strb	r2, [r3, #16]
 800e128:	2200      	movs	r2, #0
 800e12a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e12c:	693b      	ldr	r3, [r7, #16]
 800e12e:	2200      	movs	r2, #0
 800e130:	749a      	strb	r2, [r3, #18]
 800e132:	2200      	movs	r2, #0
 800e134:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800e136:	697b      	ldr	r3, [r7, #20]
}
 800e138:	4618      	mov	r0, r3
 800e13a:	3718      	adds	r7, #24
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}
 800e140:	08013b88 	.word	0x08013b88
 800e144:	08014260 	.word	0x08014260
 800e148:	08013bdc 	.word	0x08013bdc

0800e14c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800e14c:	b5b0      	push	{r4, r5, r7, lr}
 800e14e:	b08a      	sub	sp, #40	@ 0x28
 800e150:	af04      	add	r7, sp, #16
 800e152:	60f8      	str	r0, [r7, #12]
 800e154:	607b      	str	r3, [r7, #4]
 800e156:	460b      	mov	r3, r1
 800e158:	817b      	strh	r3, [r7, #10]
 800e15a:	4613      	mov	r3, r2
 800e15c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d106      	bne.n	800e172 <tcp_output_alloc_header+0x26>
 800e164:	4b15      	ldr	r3, [pc, #84]	@ (800e1bc <tcp_output_alloc_header+0x70>)
 800e166:	f240 7242 	movw	r2, #1858	@ 0x742
 800e16a:	4915      	ldr	r1, [pc, #84]	@ (800e1c0 <tcp_output_alloc_header+0x74>)
 800e16c:	4815      	ldr	r0, [pc, #84]	@ (800e1c4 <tcp_output_alloc_header+0x78>)
 800e16e:	f003 f93f 	bl	80113f0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	8adb      	ldrh	r3, [r3, #22]
 800e17a:	68fa      	ldr	r2, [r7, #12]
 800e17c:	8b12      	ldrh	r2, [r2, #24]
 800e17e:	68f9      	ldr	r1, [r7, #12]
 800e180:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800e182:	893d      	ldrh	r5, [r7, #8]
 800e184:	897c      	ldrh	r4, [r7, #10]
 800e186:	9103      	str	r1, [sp, #12]
 800e188:	2110      	movs	r1, #16
 800e18a:	9102      	str	r1, [sp, #8]
 800e18c:	9201      	str	r2, [sp, #4]
 800e18e:	9300      	str	r3, [sp, #0]
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	462a      	mov	r2, r5
 800e194:	4621      	mov	r1, r4
 800e196:	f7ff ff67 	bl	800e068 <tcp_output_alloc_header_common>
 800e19a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800e19c:	697b      	ldr	r3, [r7, #20]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d006      	beq.n	800e1b0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1a6:	68fa      	ldr	r2, [r7, #12]
 800e1a8:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800e1aa:	441a      	add	r2, r3
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800e1b0:	697b      	ldr	r3, [r7, #20]
}
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	3718      	adds	r7, #24
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bdb0      	pop	{r4, r5, r7, pc}
 800e1ba:	bf00      	nop
 800e1bc:	08013b88 	.word	0x08013b88
 800e1c0:	08014290 	.word	0x08014290
 800e1c4:	08013bdc 	.word	0x08013bdc

0800e1c8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b088      	sub	sp, #32
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	60f8      	str	r0, [r7, #12]
 800e1d0:	60b9      	str	r1, [r7, #8]
 800e1d2:	4611      	mov	r1, r2
 800e1d4:	461a      	mov	r2, r3
 800e1d6:	460b      	mov	r3, r1
 800e1d8:	71fb      	strb	r3, [r7, #7]
 800e1da:	4613      	mov	r3, r2
 800e1dc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d106      	bne.n	800e1f6 <tcp_output_fill_options+0x2e>
 800e1e8:	4b12      	ldr	r3, [pc, #72]	@ (800e234 <tcp_output_fill_options+0x6c>)
 800e1ea:	f240 7256 	movw	r2, #1878	@ 0x756
 800e1ee:	4912      	ldr	r1, [pc, #72]	@ (800e238 <tcp_output_fill_options+0x70>)
 800e1f0:	4812      	ldr	r0, [pc, #72]	@ (800e23c <tcp_output_fill_options+0x74>)
 800e1f2:	f003 f8fd 	bl	80113f0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	685b      	ldr	r3, [r3, #4]
 800e1fa:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800e1fc:	69bb      	ldr	r3, [r7, #24]
 800e1fe:	3314      	adds	r3, #20
 800e200:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800e202:	8bfb      	ldrh	r3, [r7, #30]
 800e204:	009b      	lsls	r3, r3, #2
 800e206:	461a      	mov	r2, r3
 800e208:	79fb      	ldrb	r3, [r7, #7]
 800e20a:	009b      	lsls	r3, r3, #2
 800e20c:	f003 0304 	and.w	r3, r3, #4
 800e210:	4413      	add	r3, r2
 800e212:	3314      	adds	r3, #20
 800e214:	69ba      	ldr	r2, [r7, #24]
 800e216:	4413      	add	r3, r2
 800e218:	697a      	ldr	r2, [r7, #20]
 800e21a:	429a      	cmp	r2, r3
 800e21c:	d006      	beq.n	800e22c <tcp_output_fill_options+0x64>
 800e21e:	4b05      	ldr	r3, [pc, #20]	@ (800e234 <tcp_output_fill_options+0x6c>)
 800e220:	f240 7275 	movw	r2, #1909	@ 0x775
 800e224:	4906      	ldr	r1, [pc, #24]	@ (800e240 <tcp_output_fill_options+0x78>)
 800e226:	4805      	ldr	r0, [pc, #20]	@ (800e23c <tcp_output_fill_options+0x74>)
 800e228:	f003 f8e2 	bl	80113f0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800e22c:	bf00      	nop
 800e22e:	3720      	adds	r7, #32
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}
 800e234:	08013b88 	.word	0x08013b88
 800e238:	080142b8 	.word	0x080142b8
 800e23c:	08013bdc 	.word	0x08013bdc
 800e240:	080141b0 	.word	0x080141b0

0800e244 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b08a      	sub	sp, #40	@ 0x28
 800e248:	af04      	add	r7, sp, #16
 800e24a:	60f8      	str	r0, [r7, #12]
 800e24c:	60b9      	str	r1, [r7, #8]
 800e24e:	607a      	str	r2, [r7, #4]
 800e250:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d106      	bne.n	800e266 <tcp_output_control_segment+0x22>
 800e258:	4b1c      	ldr	r3, [pc, #112]	@ (800e2cc <tcp_output_control_segment+0x88>)
 800e25a:	f240 7287 	movw	r2, #1927	@ 0x787
 800e25e:	491c      	ldr	r1, [pc, #112]	@ (800e2d0 <tcp_output_control_segment+0x8c>)
 800e260:	481c      	ldr	r0, [pc, #112]	@ (800e2d4 <tcp_output_control_segment+0x90>)
 800e262:	f003 f8c5 	bl	80113f0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800e266:	683a      	ldr	r2, [r7, #0]
 800e268:	6879      	ldr	r1, [r7, #4]
 800e26a:	68f8      	ldr	r0, [r7, #12]
 800e26c:	f7fe faea 	bl	800c844 <tcp_route>
 800e270:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800e272:	693b      	ldr	r3, [r7, #16]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d102      	bne.n	800e27e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800e278:	23fc      	movs	r3, #252	@ 0xfc
 800e27a:	75fb      	strb	r3, [r7, #23]
 800e27c:	e01c      	b.n	800e2b8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d006      	beq.n	800e292 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	7adb      	ldrb	r3, [r3, #11]
 800e288:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	7a9b      	ldrb	r3, [r3, #10]
 800e28e:	757b      	strb	r3, [r7, #21]
 800e290:	e003      	b.n	800e29a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800e292:	23ff      	movs	r3, #255	@ 0xff
 800e294:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800e296:	2300      	movs	r3, #0
 800e298:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800e29a:	7dba      	ldrb	r2, [r7, #22]
 800e29c:	693b      	ldr	r3, [r7, #16]
 800e29e:	9302      	str	r3, [sp, #8]
 800e2a0:	2306      	movs	r3, #6
 800e2a2:	9301      	str	r3, [sp, #4]
 800e2a4:	7d7b      	ldrb	r3, [r7, #21]
 800e2a6:	9300      	str	r3, [sp, #0]
 800e2a8:	4613      	mov	r3, r2
 800e2aa:	683a      	ldr	r2, [r7, #0]
 800e2ac:	6879      	ldr	r1, [r7, #4]
 800e2ae:	68b8      	ldr	r0, [r7, #8]
 800e2b0:	f001 ff70 	bl	8010194 <ip4_output_if>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800e2b8:	68b8      	ldr	r0, [r7, #8]
 800e2ba:	f7f9 feeb 	bl	8008094 <pbuf_free>
  return err;
 800e2be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	3718      	adds	r7, #24
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}
 800e2ca:	bf00      	nop
 800e2cc:	08013b88 	.word	0x08013b88
 800e2d0:	080142e0 	.word	0x080142e0
 800e2d4:	08013bdc 	.word	0x08013bdc

0800e2d8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e2d8:	b590      	push	{r4, r7, lr}
 800e2da:	b08b      	sub	sp, #44	@ 0x2c
 800e2dc:	af04      	add	r7, sp, #16
 800e2de:	60f8      	str	r0, [r7, #12]
 800e2e0:	60b9      	str	r1, [r7, #8]
 800e2e2:	607a      	str	r2, [r7, #4]
 800e2e4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d106      	bne.n	800e2fa <tcp_rst+0x22>
 800e2ec:	4b1f      	ldr	r3, [pc, #124]	@ (800e36c <tcp_rst+0x94>)
 800e2ee:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800e2f2:	491f      	ldr	r1, [pc, #124]	@ (800e370 <tcp_rst+0x98>)
 800e2f4:	481f      	ldr	r0, [pc, #124]	@ (800e374 <tcp_rst+0x9c>)
 800e2f6:	f003 f87b 	bl	80113f0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d106      	bne.n	800e30e <tcp_rst+0x36>
 800e300:	4b1a      	ldr	r3, [pc, #104]	@ (800e36c <tcp_rst+0x94>)
 800e302:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800e306:	491c      	ldr	r1, [pc, #112]	@ (800e378 <tcp_rst+0xa0>)
 800e308:	481a      	ldr	r0, [pc, #104]	@ (800e374 <tcp_rst+0x9c>)
 800e30a:	f003 f871 	bl	80113f0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e30e:	2300      	movs	r3, #0
 800e310:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800e312:	f246 0308 	movw	r3, #24584	@ 0x6008
 800e316:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800e318:	7dfb      	ldrb	r3, [r7, #23]
 800e31a:	b29c      	uxth	r4, r3
 800e31c:	68b8      	ldr	r0, [r7, #8]
 800e31e:	f7f8 fb3f 	bl	80069a0 <lwip_htonl>
 800e322:	4602      	mov	r2, r0
 800e324:	8abb      	ldrh	r3, [r7, #20]
 800e326:	9303      	str	r3, [sp, #12]
 800e328:	2314      	movs	r3, #20
 800e32a:	9302      	str	r3, [sp, #8]
 800e32c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800e32e:	9301      	str	r3, [sp, #4]
 800e330:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800e332:	9300      	str	r3, [sp, #0]
 800e334:	4613      	mov	r3, r2
 800e336:	2200      	movs	r2, #0
 800e338:	4621      	mov	r1, r4
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f7ff fe94 	bl	800e068 <tcp_output_alloc_header_common>
 800e340:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800e342:	693b      	ldr	r3, [r7, #16]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d00c      	beq.n	800e362 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e348:	7dfb      	ldrb	r3, [r7, #23]
 800e34a:	2200      	movs	r2, #0
 800e34c:	6939      	ldr	r1, [r7, #16]
 800e34e:	68f8      	ldr	r0, [r7, #12]
 800e350:	f7ff ff3a 	bl	800e1c8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e356:	683a      	ldr	r2, [r7, #0]
 800e358:	6939      	ldr	r1, [r7, #16]
 800e35a:	68f8      	ldr	r0, [r7, #12]
 800e35c:	f7ff ff72 	bl	800e244 <tcp_output_control_segment>
 800e360:	e000      	b.n	800e364 <tcp_rst+0x8c>
    return;
 800e362:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e364:	371c      	adds	r7, #28
 800e366:	46bd      	mov	sp, r7
 800e368:	bd90      	pop	{r4, r7, pc}
 800e36a:	bf00      	nop
 800e36c:	08013b88 	.word	0x08013b88
 800e370:	0801430c 	.word	0x0801430c
 800e374:	08013bdc 	.word	0x08013bdc
 800e378:	08014328 	.word	0x08014328

0800e37c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e37c:	b590      	push	{r4, r7, lr}
 800e37e:	b087      	sub	sp, #28
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800e384:	2300      	movs	r3, #0
 800e386:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800e388:	2300      	movs	r3, #0
 800e38a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d106      	bne.n	800e3a0 <tcp_send_empty_ack+0x24>
 800e392:	4b28      	ldr	r3, [pc, #160]	@ (800e434 <tcp_send_empty_ack+0xb8>)
 800e394:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800e398:	4927      	ldr	r1, [pc, #156]	@ (800e438 <tcp_send_empty_ack+0xbc>)
 800e39a:	4828      	ldr	r0, [pc, #160]	@ (800e43c <tcp_send_empty_ack+0xc0>)
 800e39c:	f003 f828 	bl	80113f0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e3a0:	7dfb      	ldrb	r3, [r7, #23]
 800e3a2:	009b      	lsls	r3, r3, #2
 800e3a4:	b2db      	uxtb	r3, r3
 800e3a6:	f003 0304 	and.w	r3, r3, #4
 800e3aa:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e3ac:	7d7b      	ldrb	r3, [r7, #21]
 800e3ae:	b29c      	uxth	r4, r3
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f7f8 faf3 	bl	80069a0 <lwip_htonl>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	2200      	movs	r2, #0
 800e3be:	4621      	mov	r1, r4
 800e3c0:	6878      	ldr	r0, [r7, #4]
 800e3c2:	f7ff fec3 	bl	800e14c <tcp_output_alloc_header>
 800e3c6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e3c8:	693b      	ldr	r3, [r7, #16]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d109      	bne.n	800e3e2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	8b5b      	ldrh	r3, [r3, #26]
 800e3d2:	f043 0303 	orr.w	r3, r3, #3
 800e3d6:	b29a      	uxth	r2, r3
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800e3dc:	f06f 0301 	mvn.w	r3, #1
 800e3e0:	e023      	b.n	800e42a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800e3e2:	7dbb      	ldrb	r3, [r7, #22]
 800e3e4:	7dfa      	ldrb	r2, [r7, #23]
 800e3e6:	6939      	ldr	r1, [r7, #16]
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f7ff feed 	bl	800e1c8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e3ee:	687a      	ldr	r2, [r7, #4]
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	3304      	adds	r3, #4
 800e3f4:	6939      	ldr	r1, [r7, #16]
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f7ff ff24 	bl	800e244 <tcp_output_control_segment>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800e400:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d007      	beq.n	800e418 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	8b5b      	ldrh	r3, [r3, #26]
 800e40c:	f043 0303 	orr.w	r3, r3, #3
 800e410:	b29a      	uxth	r2, r3
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	835a      	strh	r2, [r3, #26]
 800e416:	e006      	b.n	800e426 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	8b5b      	ldrh	r3, [r3, #26]
 800e41c:	f023 0303 	bic.w	r3, r3, #3
 800e420:	b29a      	uxth	r2, r3
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800e426:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	371c      	adds	r7, #28
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd90      	pop	{r4, r7, pc}
 800e432:	bf00      	nop
 800e434:	08013b88 	.word	0x08013b88
 800e438:	08014344 	.word	0x08014344
 800e43c:	08013bdc 	.word	0x08013bdc

0800e440 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e440:	b590      	push	{r4, r7, lr}
 800e442:	b087      	sub	sp, #28
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e448:	2300      	movs	r3, #0
 800e44a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d106      	bne.n	800e460 <tcp_keepalive+0x20>
 800e452:	4b18      	ldr	r3, [pc, #96]	@ (800e4b4 <tcp_keepalive+0x74>)
 800e454:	f640 0224 	movw	r2, #2084	@ 0x824
 800e458:	4917      	ldr	r1, [pc, #92]	@ (800e4b8 <tcp_keepalive+0x78>)
 800e45a:	4818      	ldr	r0, [pc, #96]	@ (800e4bc <tcp_keepalive+0x7c>)
 800e45c:	f002 ffc8 	bl	80113f0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e460:	7dfb      	ldrb	r3, [r7, #23]
 800e462:	b29c      	uxth	r4, r3
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e468:	3b01      	subs	r3, #1
 800e46a:	4618      	mov	r0, r3
 800e46c:	f7f8 fa98 	bl	80069a0 <lwip_htonl>
 800e470:	4603      	mov	r3, r0
 800e472:	2200      	movs	r2, #0
 800e474:	4621      	mov	r1, r4
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f7ff fe68 	bl	800e14c <tcp_output_alloc_header>
 800e47c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e47e:	693b      	ldr	r3, [r7, #16]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d102      	bne.n	800e48a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800e484:	f04f 33ff 	mov.w	r3, #4294967295
 800e488:	e010      	b.n	800e4ac <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e48a:	7dfb      	ldrb	r3, [r7, #23]
 800e48c:	2200      	movs	r2, #0
 800e48e:	6939      	ldr	r1, [r7, #16]
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	f7ff fe99 	bl	800e1c8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e496:	687a      	ldr	r2, [r7, #4]
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	3304      	adds	r3, #4
 800e49c:	6939      	ldr	r1, [r7, #16]
 800e49e:	6878      	ldr	r0, [r7, #4]
 800e4a0:	f7ff fed0 	bl	800e244 <tcp_output_control_segment>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e4a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	371c      	adds	r7, #28
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	bd90      	pop	{r4, r7, pc}
 800e4b4:	08013b88 	.word	0x08013b88
 800e4b8:	08014364 	.word	0x08014364
 800e4bc:	08013bdc 	.word	0x08013bdc

0800e4c0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e4c0:	b590      	push	{r4, r7, lr}
 800e4c2:	b08b      	sub	sp, #44	@ 0x2c
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d106      	bne.n	800e4e2 <tcp_zero_window_probe+0x22>
 800e4d4:	4b4c      	ldr	r3, [pc, #304]	@ (800e608 <tcp_zero_window_probe+0x148>)
 800e4d6:	f640 024f 	movw	r2, #2127	@ 0x84f
 800e4da:	494c      	ldr	r1, [pc, #304]	@ (800e60c <tcp_zero_window_probe+0x14c>)
 800e4dc:	484c      	ldr	r0, [pc, #304]	@ (800e610 <tcp_zero_window_probe+0x150>)
 800e4de:	f002 ff87 	bl	80113f0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e4e6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800e4e8:	6a3b      	ldr	r3, [r7, #32]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d101      	bne.n	800e4f2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	e086      	b.n	800e600 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800e4f8:	2bff      	cmp	r3, #255	@ 0xff
 800e4fa:	d007      	beq.n	800e50c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800e502:	3301      	adds	r3, #1
 800e504:	b2da      	uxtb	r2, r3
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e50c:	6a3b      	ldr	r3, [r7, #32]
 800e50e:	68db      	ldr	r3, [r3, #12]
 800e510:	899b      	ldrh	r3, [r3, #12]
 800e512:	b29b      	uxth	r3, r3
 800e514:	4618      	mov	r0, r3
 800e516:	f7f8 fa2d 	bl	8006974 <lwip_htons>
 800e51a:	4603      	mov	r3, r0
 800e51c:	b2db      	uxtb	r3, r3
 800e51e:	f003 0301 	and.w	r3, r3, #1
 800e522:	2b00      	cmp	r3, #0
 800e524:	d005      	beq.n	800e532 <tcp_zero_window_probe+0x72>
 800e526:	6a3b      	ldr	r3, [r7, #32]
 800e528:	891b      	ldrh	r3, [r3, #8]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d101      	bne.n	800e532 <tcp_zero_window_probe+0x72>
 800e52e:	2301      	movs	r3, #1
 800e530:	e000      	b.n	800e534 <tcp_zero_window_probe+0x74>
 800e532:	2300      	movs	r3, #0
 800e534:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800e536:	7ffb      	ldrb	r3, [r7, #31]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	bf0c      	ite	eq
 800e53c:	2301      	moveq	r3, #1
 800e53e:	2300      	movne	r3, #0
 800e540:	b2db      	uxtb	r3, r3
 800e542:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e544:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e548:	b299      	uxth	r1, r3
 800e54a:	6a3b      	ldr	r3, [r7, #32]
 800e54c:	68db      	ldr	r3, [r3, #12]
 800e54e:	685b      	ldr	r3, [r3, #4]
 800e550:	8bba      	ldrh	r2, [r7, #28]
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f7ff fdfa 	bl	800e14c <tcp_output_alloc_header>
 800e558:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800e55a:	69bb      	ldr	r3, [r7, #24]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d102      	bne.n	800e566 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800e560:	f04f 33ff 	mov.w	r3, #4294967295
 800e564:	e04c      	b.n	800e600 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800e566:	69bb      	ldr	r3, [r7, #24]
 800e568:	685b      	ldr	r3, [r3, #4]
 800e56a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800e56c:	7ffb      	ldrb	r3, [r7, #31]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d011      	beq.n	800e596 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	899b      	ldrh	r3, [r3, #12]
 800e576:	b29b      	uxth	r3, r3
 800e578:	b21b      	sxth	r3, r3
 800e57a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800e57e:	b21c      	sxth	r4, r3
 800e580:	2011      	movs	r0, #17
 800e582:	f7f8 f9f7 	bl	8006974 <lwip_htons>
 800e586:	4603      	mov	r3, r0
 800e588:	b21b      	sxth	r3, r3
 800e58a:	4323      	orrs	r3, r4
 800e58c:	b21b      	sxth	r3, r3
 800e58e:	b29a      	uxth	r2, r3
 800e590:	697b      	ldr	r3, [r7, #20]
 800e592:	819a      	strh	r2, [r3, #12]
 800e594:	e010      	b.n	800e5b8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800e596:	69bb      	ldr	r3, [r7, #24]
 800e598:	685b      	ldr	r3, [r3, #4]
 800e59a:	3314      	adds	r3, #20
 800e59c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e59e:	6a3b      	ldr	r3, [r7, #32]
 800e5a0:	6858      	ldr	r0, [r3, #4]
 800e5a2:	6a3b      	ldr	r3, [r7, #32]
 800e5a4:	685b      	ldr	r3, [r3, #4]
 800e5a6:	891a      	ldrh	r2, [r3, #8]
 800e5a8:	6a3b      	ldr	r3, [r7, #32]
 800e5aa:	891b      	ldrh	r3, [r3, #8]
 800e5ac:	1ad3      	subs	r3, r2, r3
 800e5ae:	b29b      	uxth	r3, r3
 800e5b0:	2201      	movs	r2, #1
 800e5b2:	6939      	ldr	r1, [r7, #16]
 800e5b4:	f7f9 ff58 	bl	8008468 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e5b8:	6a3b      	ldr	r3, [r7, #32]
 800e5ba:	68db      	ldr	r3, [r3, #12]
 800e5bc:	685b      	ldr	r3, [r3, #4]
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f7f8 f9ee 	bl	80069a0 <lwip_htonl>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	3301      	adds	r3, #1
 800e5c8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	1ad3      	subs	r3, r2, r3
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	da02      	bge.n	800e5dc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	68fa      	ldr	r2, [r7, #12]
 800e5da:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e5dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	69b9      	ldr	r1, [r7, #24]
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f7ff fdef 	bl	800e1c8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e5ea:	687a      	ldr	r2, [r7, #4]
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	3304      	adds	r3, #4
 800e5f0:	69b9      	ldr	r1, [r7, #24]
 800e5f2:	6878      	ldr	r0, [r7, #4]
 800e5f4:	f7ff fe26 	bl	800e244 <tcp_output_control_segment>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e5fc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e600:	4618      	mov	r0, r3
 800e602:	372c      	adds	r7, #44	@ 0x2c
 800e604:	46bd      	mov	sp, r7
 800e606:	bd90      	pop	{r4, r7, pc}
 800e608:	08013b88 	.word	0x08013b88
 800e60c:	08014380 	.word	0x08014380
 800e610:	08013bdc 	.word	0x08013bdc

0800e614 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b082      	sub	sp, #8
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800e61c:	f7fa f812 	bl	8008644 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e620:	4b0a      	ldr	r3, [pc, #40]	@ (800e64c <tcpip_tcp_timer+0x38>)
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d103      	bne.n	800e630 <tcpip_tcp_timer+0x1c>
 800e628:	4b09      	ldr	r3, [pc, #36]	@ (800e650 <tcpip_tcp_timer+0x3c>)
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d005      	beq.n	800e63c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e630:	2200      	movs	r2, #0
 800e632:	4908      	ldr	r1, [pc, #32]	@ (800e654 <tcpip_tcp_timer+0x40>)
 800e634:	20fa      	movs	r0, #250	@ 0xfa
 800e636:	f000 f8f3 	bl	800e820 <sys_timeout>
 800e63a:	e003      	b.n	800e644 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800e63c:	4b06      	ldr	r3, [pc, #24]	@ (800e658 <tcpip_tcp_timer+0x44>)
 800e63e:	2200      	movs	r2, #0
 800e640:	601a      	str	r2, [r3, #0]
  }
}
 800e642:	bf00      	nop
 800e644:	bf00      	nop
 800e646:	3708      	adds	r7, #8
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}
 800e64c:	200085b4 	.word	0x200085b4
 800e650:	200085b8 	.word	0x200085b8
 800e654:	0800e615 	.word	0x0800e615
 800e658:	20008600 	.word	0x20008600

0800e65c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e660:	4b0a      	ldr	r3, [pc, #40]	@ (800e68c <tcp_timer_needed+0x30>)
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d10f      	bne.n	800e688 <tcp_timer_needed+0x2c>
 800e668:	4b09      	ldr	r3, [pc, #36]	@ (800e690 <tcp_timer_needed+0x34>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d103      	bne.n	800e678 <tcp_timer_needed+0x1c>
 800e670:	4b08      	ldr	r3, [pc, #32]	@ (800e694 <tcp_timer_needed+0x38>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d007      	beq.n	800e688 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800e678:	4b04      	ldr	r3, [pc, #16]	@ (800e68c <tcp_timer_needed+0x30>)
 800e67a:	2201      	movs	r2, #1
 800e67c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e67e:	2200      	movs	r2, #0
 800e680:	4905      	ldr	r1, [pc, #20]	@ (800e698 <tcp_timer_needed+0x3c>)
 800e682:	20fa      	movs	r0, #250	@ 0xfa
 800e684:	f000 f8cc 	bl	800e820 <sys_timeout>
  }
}
 800e688:	bf00      	nop
 800e68a:	bd80      	pop	{r7, pc}
 800e68c:	20008600 	.word	0x20008600
 800e690:	200085b4 	.word	0x200085b4
 800e694:	200085b8 	.word	0x200085b8
 800e698:	0800e615 	.word	0x0800e615

0800e69c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b086      	sub	sp, #24
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	60f8      	str	r0, [r7, #12]
 800e6a4:	60b9      	str	r1, [r7, #8]
 800e6a6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e6a8:	2006      	movs	r0, #6
 800e6aa:	f7f8 fe0d 	bl	80072c8 <memp_malloc>
 800e6ae:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800e6b0:	693b      	ldr	r3, [r7, #16]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d109      	bne.n	800e6ca <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e6b6:	693b      	ldr	r3, [r7, #16]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d151      	bne.n	800e760 <sys_timeout_abs+0xc4>
 800e6bc:	4b2a      	ldr	r3, [pc, #168]	@ (800e768 <sys_timeout_abs+0xcc>)
 800e6be:	22be      	movs	r2, #190	@ 0xbe
 800e6c0:	492a      	ldr	r1, [pc, #168]	@ (800e76c <sys_timeout_abs+0xd0>)
 800e6c2:	482b      	ldr	r0, [pc, #172]	@ (800e770 <sys_timeout_abs+0xd4>)
 800e6c4:	f002 fe94 	bl	80113f0 <iprintf>
    return;
 800e6c8:	e04a      	b.n	800e760 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e6d0:	693b      	ldr	r3, [r7, #16]
 800e6d2:	68ba      	ldr	r2, [r7, #8]
 800e6d4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e6d6:	693b      	ldr	r3, [r7, #16]
 800e6d8:	687a      	ldr	r2, [r7, #4]
 800e6da:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800e6dc:	693b      	ldr	r3, [r7, #16]
 800e6de:	68fa      	ldr	r2, [r7, #12]
 800e6e0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e6e2:	4b24      	ldr	r3, [pc, #144]	@ (800e774 <sys_timeout_abs+0xd8>)
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d103      	bne.n	800e6f2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800e6ea:	4a22      	ldr	r2, [pc, #136]	@ (800e774 <sys_timeout_abs+0xd8>)
 800e6ec:	693b      	ldr	r3, [r7, #16]
 800e6ee:	6013      	str	r3, [r2, #0]
    return;
 800e6f0:	e037      	b.n	800e762 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	685a      	ldr	r2, [r3, #4]
 800e6f6:	4b1f      	ldr	r3, [pc, #124]	@ (800e774 <sys_timeout_abs+0xd8>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	685b      	ldr	r3, [r3, #4]
 800e6fc:	1ad3      	subs	r3, r2, r3
 800e6fe:	0fdb      	lsrs	r3, r3, #31
 800e700:	f003 0301 	and.w	r3, r3, #1
 800e704:	b2db      	uxtb	r3, r3
 800e706:	2b00      	cmp	r3, #0
 800e708:	d007      	beq.n	800e71a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800e70a:	4b1a      	ldr	r3, [pc, #104]	@ (800e774 <sys_timeout_abs+0xd8>)
 800e70c:	681a      	ldr	r2, [r3, #0]
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e712:	4a18      	ldr	r2, [pc, #96]	@ (800e774 <sys_timeout_abs+0xd8>)
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	6013      	str	r3, [r2, #0]
 800e718:	e023      	b.n	800e762 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e71a:	4b16      	ldr	r3, [pc, #88]	@ (800e774 <sys_timeout_abs+0xd8>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	617b      	str	r3, [r7, #20]
 800e720:	e01a      	b.n	800e758 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e722:	697b      	ldr	r3, [r7, #20]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d00b      	beq.n	800e742 <sys_timeout_abs+0xa6>
 800e72a:	693b      	ldr	r3, [r7, #16]
 800e72c:	685a      	ldr	r2, [r3, #4]
 800e72e:	697b      	ldr	r3, [r7, #20]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	685b      	ldr	r3, [r3, #4]
 800e734:	1ad3      	subs	r3, r2, r3
 800e736:	0fdb      	lsrs	r3, r3, #31
 800e738:	f003 0301 	and.w	r3, r3, #1
 800e73c:	b2db      	uxtb	r3, r3
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d007      	beq.n	800e752 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800e742:	697b      	ldr	r3, [r7, #20]
 800e744:	681a      	ldr	r2, [r3, #0]
 800e746:	693b      	ldr	r3, [r7, #16]
 800e748:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800e74a:	697b      	ldr	r3, [r7, #20]
 800e74c:	693a      	ldr	r2, [r7, #16]
 800e74e:	601a      	str	r2, [r3, #0]
        break;
 800e750:	e007      	b.n	800e762 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	617b      	str	r3, [r7, #20]
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d1e1      	bne.n	800e722 <sys_timeout_abs+0x86>
 800e75e:	e000      	b.n	800e762 <sys_timeout_abs+0xc6>
    return;
 800e760:	bf00      	nop
      }
    }
  }
}
 800e762:	3718      	adds	r7, #24
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}
 800e768:	080143a4 	.word	0x080143a4
 800e76c:	080143d8 	.word	0x080143d8
 800e770:	08014418 	.word	0x08014418
 800e774:	200085f8 	.word	0x200085f8

0800e778 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b086      	sub	sp, #24
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e784:	697b      	ldr	r3, [r7, #20]
 800e786:	685b      	ldr	r3, [r3, #4]
 800e788:	4798      	blx	r3

  now = sys_now();
 800e78a:	f7f6 ffef 	bl	800576c <sys_now>
 800e78e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e790:	697b      	ldr	r3, [r7, #20]
 800e792:	681a      	ldr	r2, [r3, #0]
 800e794:	4b0f      	ldr	r3, [pc, #60]	@ (800e7d4 <lwip_cyclic_timer+0x5c>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	4413      	add	r3, r2
 800e79a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e79c:	68fa      	ldr	r2, [r7, #12]
 800e79e:	693b      	ldr	r3, [r7, #16]
 800e7a0:	1ad3      	subs	r3, r2, r3
 800e7a2:	0fdb      	lsrs	r3, r3, #31
 800e7a4:	f003 0301 	and.w	r3, r3, #1
 800e7a8:	b2db      	uxtb	r3, r3
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d009      	beq.n	800e7c2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e7ae:	697b      	ldr	r3, [r7, #20]
 800e7b0:	681a      	ldr	r2, [r3, #0]
 800e7b2:	693b      	ldr	r3, [r7, #16]
 800e7b4:	4413      	add	r3, r2
 800e7b6:	687a      	ldr	r2, [r7, #4]
 800e7b8:	4907      	ldr	r1, [pc, #28]	@ (800e7d8 <lwip_cyclic_timer+0x60>)
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f7ff ff6e 	bl	800e69c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800e7c0:	e004      	b.n	800e7cc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e7c2:	687a      	ldr	r2, [r7, #4]
 800e7c4:	4904      	ldr	r1, [pc, #16]	@ (800e7d8 <lwip_cyclic_timer+0x60>)
 800e7c6:	68f8      	ldr	r0, [r7, #12]
 800e7c8:	f7ff ff68 	bl	800e69c <sys_timeout_abs>
}
 800e7cc:	bf00      	nop
 800e7ce:	3718      	adds	r7, #24
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}
 800e7d4:	200085fc 	.word	0x200085fc
 800e7d8:	0800e779 	.word	0x0800e779

0800e7dc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b082      	sub	sp, #8
 800e7e0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	607b      	str	r3, [r7, #4]
 800e7e6:	e00e      	b.n	800e806 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800e7e8:	4a0b      	ldr	r2, [pc, #44]	@ (800e818 <sys_timeouts_init+0x3c>)
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	00db      	lsls	r3, r3, #3
 800e7f4:	4a08      	ldr	r2, [pc, #32]	@ (800e818 <sys_timeouts_init+0x3c>)
 800e7f6:	4413      	add	r3, r2
 800e7f8:	461a      	mov	r2, r3
 800e7fa:	4908      	ldr	r1, [pc, #32]	@ (800e81c <sys_timeouts_init+0x40>)
 800e7fc:	f000 f810 	bl	800e820 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	3301      	adds	r3, #1
 800e804:	607b      	str	r3, [r7, #4]
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	2b02      	cmp	r3, #2
 800e80a:	d9ed      	bls.n	800e7e8 <sys_timeouts_init+0xc>
  }
}
 800e80c:	bf00      	nop
 800e80e:	bf00      	nop
 800e810:	3708      	adds	r7, #8
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}
 800e816:	bf00      	nop
 800e818:	080153fc 	.word	0x080153fc
 800e81c:	0800e779 	.word	0x0800e779

0800e820 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b086      	sub	sp, #24
 800e824:	af00      	add	r7, sp, #0
 800e826:	60f8      	str	r0, [r7, #12]
 800e828:	60b9      	str	r1, [r7, #8]
 800e82a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e832:	d306      	bcc.n	800e842 <sys_timeout+0x22>
 800e834:	4b0a      	ldr	r3, [pc, #40]	@ (800e860 <sys_timeout+0x40>)
 800e836:	f240 1229 	movw	r2, #297	@ 0x129
 800e83a:	490a      	ldr	r1, [pc, #40]	@ (800e864 <sys_timeout+0x44>)
 800e83c:	480a      	ldr	r0, [pc, #40]	@ (800e868 <sys_timeout+0x48>)
 800e83e:	f002 fdd7 	bl	80113f0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e842:	f7f6 ff93 	bl	800576c <sys_now>
 800e846:	4602      	mov	r2, r0
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	4413      	add	r3, r2
 800e84c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e84e:	687a      	ldr	r2, [r7, #4]
 800e850:	68b9      	ldr	r1, [r7, #8]
 800e852:	6978      	ldr	r0, [r7, #20]
 800e854:	f7ff ff22 	bl	800e69c <sys_timeout_abs>
#endif
}
 800e858:	bf00      	nop
 800e85a:	3718      	adds	r7, #24
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}
 800e860:	080143a4 	.word	0x080143a4
 800e864:	08014440 	.word	0x08014440
 800e868:	08014418 	.word	0x08014418

0800e86c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b084      	sub	sp, #16
 800e870:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800e872:	f7f6 ff7b 	bl	800576c <sys_now>
 800e876:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800e878:	4b1a      	ldr	r3, [pc, #104]	@ (800e8e4 <sys_check_timeouts+0x78>)
 800e87a:	781b      	ldrb	r3, [r3, #0]
 800e87c:	b2db      	uxtb	r3, r3
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d001      	beq.n	800e886 <sys_check_timeouts+0x1a>
 800e882:	f7f9 f8cd 	bl	8007a20 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800e886:	4b18      	ldr	r3, [pc, #96]	@ (800e8e8 <sys_check_timeouts+0x7c>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800e88c:	68bb      	ldr	r3, [r7, #8]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d022      	beq.n	800e8d8 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	685b      	ldr	r3, [r3, #4]
 800e896:	68fa      	ldr	r2, [r7, #12]
 800e898:	1ad3      	subs	r3, r2, r3
 800e89a:	0fdb      	lsrs	r3, r3, #31
 800e89c:	f003 0301 	and.w	r3, r3, #1
 800e8a0:	b2db      	uxtb	r3, r3
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d11a      	bne.n	800e8dc <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800e8a6:	68bb      	ldr	r3, [r7, #8]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	4a0f      	ldr	r2, [pc, #60]	@ (800e8e8 <sys_check_timeouts+0x7c>)
 800e8ac:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	689b      	ldr	r3, [r3, #8]
 800e8b2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800e8b4:	68bb      	ldr	r3, [r7, #8]
 800e8b6:	68db      	ldr	r3, [r3, #12]
 800e8b8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	685b      	ldr	r3, [r3, #4]
 800e8be:	4a0b      	ldr	r2, [pc, #44]	@ (800e8ec <sys_check_timeouts+0x80>)
 800e8c0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e8c2:	68b9      	ldr	r1, [r7, #8]
 800e8c4:	2006      	movs	r0, #6
 800e8c6:	f7f8 fd6f 	bl	80073a8 <memp_free>
    if (handler != NULL) {
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d0d3      	beq.n	800e878 <sys_check_timeouts+0xc>
      handler(arg);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6838      	ldr	r0, [r7, #0]
 800e8d4:	4798      	blx	r3
  do {
 800e8d6:	e7cf      	b.n	800e878 <sys_check_timeouts+0xc>
      return;
 800e8d8:	bf00      	nop
 800e8da:	e000      	b.n	800e8de <sys_check_timeouts+0x72>
      return;
 800e8dc:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800e8de:	3710      	adds	r7, #16
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}
 800e8e4:	200085a5 	.word	0x200085a5
 800e8e8:	200085f8 	.word	0x200085f8
 800e8ec:	200085fc 	.word	0x200085fc

0800e8f0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e8f4:	f002 fc7c 	bl	80111f0 <rand>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	b29b      	uxth	r3, r3
 800e8fc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e900:	b29b      	uxth	r3, r3
 800e902:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800e906:	b29a      	uxth	r2, r3
 800e908:	4b01      	ldr	r3, [pc, #4]	@ (800e910 <udp_init+0x20>)
 800e90a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e90c:	bf00      	nop
 800e90e:	bd80      	pop	{r7, pc}
 800e910:	20000028 	.word	0x20000028

0800e914 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b084      	sub	sp, #16
 800e918:	af00      	add	r7, sp, #0
 800e91a:	60f8      	str	r0, [r7, #12]
 800e91c:	60b9      	str	r1, [r7, #8]
 800e91e:	4613      	mov	r3, r2
 800e920:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d105      	bne.n	800e934 <udp_input_local_match+0x20>
 800e928:	4b27      	ldr	r3, [pc, #156]	@ (800e9c8 <udp_input_local_match+0xb4>)
 800e92a:	2287      	movs	r2, #135	@ 0x87
 800e92c:	4927      	ldr	r1, [pc, #156]	@ (800e9cc <udp_input_local_match+0xb8>)
 800e92e:	4828      	ldr	r0, [pc, #160]	@ (800e9d0 <udp_input_local_match+0xbc>)
 800e930:	f002 fd5e 	bl	80113f0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e934:	68bb      	ldr	r3, [r7, #8]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d105      	bne.n	800e946 <udp_input_local_match+0x32>
 800e93a:	4b23      	ldr	r3, [pc, #140]	@ (800e9c8 <udp_input_local_match+0xb4>)
 800e93c:	2288      	movs	r2, #136	@ 0x88
 800e93e:	4925      	ldr	r1, [pc, #148]	@ (800e9d4 <udp_input_local_match+0xc0>)
 800e940:	4823      	ldr	r0, [pc, #140]	@ (800e9d0 <udp_input_local_match+0xbc>)
 800e942:	f002 fd55 	bl	80113f0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	7a1b      	ldrb	r3, [r3, #8]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d00b      	beq.n	800e966 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	7a1a      	ldrb	r2, [r3, #8]
 800e952:	4b21      	ldr	r3, [pc, #132]	@ (800e9d8 <udp_input_local_match+0xc4>)
 800e954:	685b      	ldr	r3, [r3, #4]
 800e956:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e95a:	3301      	adds	r3, #1
 800e95c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e95e:	429a      	cmp	r2, r3
 800e960:	d001      	beq.n	800e966 <udp_input_local_match+0x52>
    return 0;
 800e962:	2300      	movs	r3, #0
 800e964:	e02b      	b.n	800e9be <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e966:	79fb      	ldrb	r3, [r7, #7]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d018      	beq.n	800e99e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d013      	beq.n	800e99a <udp_input_local_match+0x86>
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d00f      	beq.n	800e99a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e97a:	4b17      	ldr	r3, [pc, #92]	@ (800e9d8 <udp_input_local_match+0xc4>)
 800e97c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e97e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e982:	d00a      	beq.n	800e99a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	681a      	ldr	r2, [r3, #0]
 800e988:	4b13      	ldr	r3, [pc, #76]	@ (800e9d8 <udp_input_local_match+0xc4>)
 800e98a:	695b      	ldr	r3, [r3, #20]
 800e98c:	405a      	eors	r2, r3
 800e98e:	68bb      	ldr	r3, [r7, #8]
 800e990:	3308      	adds	r3, #8
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e996:	2b00      	cmp	r3, #0
 800e998:	d110      	bne.n	800e9bc <udp_input_local_match+0xa8>
          return 1;
 800e99a:	2301      	movs	r3, #1
 800e99c:	e00f      	b.n	800e9be <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d009      	beq.n	800e9b8 <udp_input_local_match+0xa4>
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d005      	beq.n	800e9b8 <udp_input_local_match+0xa4>
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	681a      	ldr	r2, [r3, #0]
 800e9b0:	4b09      	ldr	r3, [pc, #36]	@ (800e9d8 <udp_input_local_match+0xc4>)
 800e9b2:	695b      	ldr	r3, [r3, #20]
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d101      	bne.n	800e9bc <udp_input_local_match+0xa8>
        return 1;
 800e9b8:	2301      	movs	r3, #1
 800e9ba:	e000      	b.n	800e9be <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e9bc:	2300      	movs	r3, #0
}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	3710      	adds	r7, #16
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}
 800e9c6:	bf00      	nop
 800e9c8:	0801448c 	.word	0x0801448c
 800e9cc:	080144bc 	.word	0x080144bc
 800e9d0:	080144e0 	.word	0x080144e0
 800e9d4:	08014508 	.word	0x08014508
 800e9d8:	2000568c 	.word	0x2000568c

0800e9dc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e9dc:	b590      	push	{r4, r7, lr}
 800e9de:	b08d      	sub	sp, #52	@ 0x34
 800e9e0:	af02      	add	r7, sp, #8
 800e9e2:	6078      	str	r0, [r7, #4]
 800e9e4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d105      	bne.n	800e9fc <udp_input+0x20>
 800e9f0:	4b7c      	ldr	r3, [pc, #496]	@ (800ebe4 <udp_input+0x208>)
 800e9f2:	22cf      	movs	r2, #207	@ 0xcf
 800e9f4:	497c      	ldr	r1, [pc, #496]	@ (800ebe8 <udp_input+0x20c>)
 800e9f6:	487d      	ldr	r0, [pc, #500]	@ (800ebec <udp_input+0x210>)
 800e9f8:	f002 fcfa 	bl	80113f0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d105      	bne.n	800ea0e <udp_input+0x32>
 800ea02:	4b78      	ldr	r3, [pc, #480]	@ (800ebe4 <udp_input+0x208>)
 800ea04:	22d0      	movs	r2, #208	@ 0xd0
 800ea06:	497a      	ldr	r1, [pc, #488]	@ (800ebf0 <udp_input+0x214>)
 800ea08:	4878      	ldr	r0, [pc, #480]	@ (800ebec <udp_input+0x210>)
 800ea0a:	f002 fcf1 	bl	80113f0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	895b      	ldrh	r3, [r3, #10]
 800ea12:	2b07      	cmp	r3, #7
 800ea14:	d803      	bhi.n	800ea1e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800ea16:	6878      	ldr	r0, [r7, #4]
 800ea18:	f7f9 fb3c 	bl	8008094 <pbuf_free>
    goto end;
 800ea1c:	e0de      	b.n	800ebdc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	685b      	ldr	r3, [r3, #4]
 800ea22:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ea24:	4b73      	ldr	r3, [pc, #460]	@ (800ebf4 <udp_input+0x218>)
 800ea26:	695b      	ldr	r3, [r3, #20]
 800ea28:	4a72      	ldr	r2, [pc, #456]	@ (800ebf4 <udp_input+0x218>)
 800ea2a:	6812      	ldr	r2, [r2, #0]
 800ea2c:	4611      	mov	r1, r2
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f001 fc88 	bl	8010344 <ip4_addr_isbroadcast_u32>
 800ea34:	4603      	mov	r3, r0
 800ea36:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ea38:	697b      	ldr	r3, [r7, #20]
 800ea3a:	881b      	ldrh	r3, [r3, #0]
 800ea3c:	b29b      	uxth	r3, r3
 800ea3e:	4618      	mov	r0, r3
 800ea40:	f7f7 ff98 	bl	8006974 <lwip_htons>
 800ea44:	4603      	mov	r3, r0
 800ea46:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	885b      	ldrh	r3, [r3, #2]
 800ea4c:	b29b      	uxth	r3, r3
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f7f7 ff90 	bl	8006974 <lwip_htons>
 800ea54:	4603      	mov	r3, r0
 800ea56:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800ea60:	2300      	movs	r3, #0
 800ea62:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea64:	4b64      	ldr	r3, [pc, #400]	@ (800ebf8 <udp_input+0x21c>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea6a:	e054      	b.n	800eb16 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800ea6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea6e:	8a5b      	ldrh	r3, [r3, #18]
 800ea70:	89fa      	ldrh	r2, [r7, #14]
 800ea72:	429a      	cmp	r2, r3
 800ea74:	d14a      	bne.n	800eb0c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800ea76:	7cfb      	ldrb	r3, [r7, #19]
 800ea78:	461a      	mov	r2, r3
 800ea7a:	6839      	ldr	r1, [r7, #0]
 800ea7c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ea7e:	f7ff ff49 	bl	800e914 <udp_input_local_match>
 800ea82:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d041      	beq.n	800eb0c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800ea88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea8a:	7c1b      	ldrb	r3, [r3, #16]
 800ea8c:	f003 0304 	and.w	r3, r3, #4
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d11d      	bne.n	800ead0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800ea94:	69fb      	ldr	r3, [r7, #28]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d102      	bne.n	800eaa0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800ea9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea9c:	61fb      	str	r3, [r7, #28]
 800ea9e:	e017      	b.n	800ead0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800eaa0:	7cfb      	ldrb	r3, [r7, #19]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d014      	beq.n	800ead0 <udp_input+0xf4>
 800eaa6:	4b53      	ldr	r3, [pc, #332]	@ (800ebf4 <udp_input+0x218>)
 800eaa8:	695b      	ldr	r3, [r3, #20]
 800eaaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaae:	d10f      	bne.n	800ead0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800eab0:	69fb      	ldr	r3, [r7, #28]
 800eab2:	681a      	ldr	r2, [r3, #0]
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	3304      	adds	r3, #4
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d008      	beq.n	800ead0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800eabe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eac0:	681a      	ldr	r2, [r3, #0]
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	3304      	adds	r3, #4
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	429a      	cmp	r2, r3
 800eaca:	d101      	bne.n	800ead0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800eacc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eace:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800ead0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ead2:	8a9b      	ldrh	r3, [r3, #20]
 800ead4:	8a3a      	ldrh	r2, [r7, #16]
 800ead6:	429a      	cmp	r2, r3
 800ead8:	d118      	bne.n	800eb0c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800eada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eadc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d005      	beq.n	800eaee <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800eae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eae4:	685a      	ldr	r2, [r3, #4]
 800eae6:	4b43      	ldr	r3, [pc, #268]	@ (800ebf4 <udp_input+0x218>)
 800eae8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800eaea:	429a      	cmp	r2, r3
 800eaec:	d10e      	bne.n	800eb0c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800eaee:	6a3b      	ldr	r3, [r7, #32]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d014      	beq.n	800eb1e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800eaf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaf6:	68da      	ldr	r2, [r3, #12]
 800eaf8:	6a3b      	ldr	r3, [r7, #32]
 800eafa:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800eafc:	4b3e      	ldr	r3, [pc, #248]	@ (800ebf8 <udp_input+0x21c>)
 800eafe:	681a      	ldr	r2, [r3, #0]
 800eb00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb02:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800eb04:	4a3c      	ldr	r2, [pc, #240]	@ (800ebf8 <udp_input+0x21c>)
 800eb06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb08:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800eb0a:	e008      	b.n	800eb1e <udp_input+0x142>
      }
    }

    prev = pcb;
 800eb0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb0e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb12:	68db      	ldr	r3, [r3, #12]
 800eb14:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d1a7      	bne.n	800ea6c <udp_input+0x90>
 800eb1c:	e000      	b.n	800eb20 <udp_input+0x144>
        break;
 800eb1e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800eb20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d101      	bne.n	800eb2a <udp_input+0x14e>
    pcb = uncon_pcb;
 800eb26:	69fb      	ldr	r3, [r7, #28]
 800eb28:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800eb2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d002      	beq.n	800eb36 <udp_input+0x15a>
    for_us = 1;
 800eb30:	2301      	movs	r3, #1
 800eb32:	76fb      	strb	r3, [r7, #27]
 800eb34:	e00a      	b.n	800eb4c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	3304      	adds	r3, #4
 800eb3a:	681a      	ldr	r2, [r3, #0]
 800eb3c:	4b2d      	ldr	r3, [pc, #180]	@ (800ebf4 <udp_input+0x218>)
 800eb3e:	695b      	ldr	r3, [r3, #20]
 800eb40:	429a      	cmp	r2, r3
 800eb42:	bf0c      	ite	eq
 800eb44:	2301      	moveq	r3, #1
 800eb46:	2300      	movne	r3, #0
 800eb48:	b2db      	uxtb	r3, r3
 800eb4a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800eb4c:	7efb      	ldrb	r3, [r7, #27]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d041      	beq.n	800ebd6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800eb52:	2108      	movs	r1, #8
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f7f9 fa17 	bl	8007f88 <pbuf_remove_header>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d00a      	beq.n	800eb76 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800eb60:	4b20      	ldr	r3, [pc, #128]	@ (800ebe4 <udp_input+0x208>)
 800eb62:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800eb66:	4925      	ldr	r1, [pc, #148]	@ (800ebfc <udp_input+0x220>)
 800eb68:	4820      	ldr	r0, [pc, #128]	@ (800ebec <udp_input+0x210>)
 800eb6a:	f002 fc41 	bl	80113f0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	f7f9 fa90 	bl	8008094 <pbuf_free>
      goto end;
 800eb74:	e032      	b.n	800ebdc <udp_input+0x200>
    }

    if (pcb != NULL) {
 800eb76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d012      	beq.n	800eba2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800eb7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb7e:	699b      	ldr	r3, [r3, #24]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d00a      	beq.n	800eb9a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800eb84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb86:	699c      	ldr	r4, [r3, #24]
 800eb88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb8a:	69d8      	ldr	r0, [r3, #28]
 800eb8c:	8a3b      	ldrh	r3, [r7, #16]
 800eb8e:	9300      	str	r3, [sp, #0]
 800eb90:	4b1b      	ldr	r3, [pc, #108]	@ (800ec00 <udp_input+0x224>)
 800eb92:	687a      	ldr	r2, [r7, #4]
 800eb94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800eb96:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800eb98:	e021      	b.n	800ebde <udp_input+0x202>
        pbuf_free(p);
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	f7f9 fa7a 	bl	8008094 <pbuf_free>
        goto end;
 800eba0:	e01c      	b.n	800ebdc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800eba2:	7cfb      	ldrb	r3, [r7, #19]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d112      	bne.n	800ebce <udp_input+0x1f2>
 800eba8:	4b12      	ldr	r3, [pc, #72]	@ (800ebf4 <udp_input+0x218>)
 800ebaa:	695b      	ldr	r3, [r3, #20]
 800ebac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ebb0:	2be0      	cmp	r3, #224	@ 0xe0
 800ebb2:	d00c      	beq.n	800ebce <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800ebb4:	4b0f      	ldr	r3, [pc, #60]	@ (800ebf4 <udp_input+0x218>)
 800ebb6:	899b      	ldrh	r3, [r3, #12]
 800ebb8:	3308      	adds	r3, #8
 800ebba:	b29b      	uxth	r3, r3
 800ebbc:	b21b      	sxth	r3, r3
 800ebbe:	4619      	mov	r1, r3
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f7f9 fa54 	bl	800806e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800ebc6:	2103      	movs	r1, #3
 800ebc8:	6878      	ldr	r0, [r7, #4]
 800ebca:	f001 f89b 	bl	800fd04 <icmp_dest_unreach>
      pbuf_free(p);
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f7f9 fa60 	bl	8008094 <pbuf_free>
  return;
 800ebd4:	e003      	b.n	800ebde <udp_input+0x202>
    pbuf_free(p);
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	f7f9 fa5c 	bl	8008094 <pbuf_free>
  return;
 800ebdc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ebde:	372c      	adds	r7, #44	@ 0x2c
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd90      	pop	{r4, r7, pc}
 800ebe4:	0801448c 	.word	0x0801448c
 800ebe8:	08014530 	.word	0x08014530
 800ebec:	080144e0 	.word	0x080144e0
 800ebf0:	08014548 	.word	0x08014548
 800ebf4:	2000568c 	.word	0x2000568c
 800ebf8:	20008604 	.word	0x20008604
 800ebfc:	08014564 	.word	0x08014564
 800ec00:	2000569c 	.word	0x2000569c

0800ec04 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ec04:	b480      	push	{r7}
 800ec06:	b085      	sub	sp, #20
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d01e      	beq.n	800ec52 <udp_netif_ip_addr_changed+0x4e>
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d01a      	beq.n	800ec52 <udp_netif_ip_addr_changed+0x4e>
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d017      	beq.n	800ec52 <udp_netif_ip_addr_changed+0x4e>
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d013      	beq.n	800ec52 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ec2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ec60 <udp_netif_ip_addr_changed+0x5c>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	60fb      	str	r3, [r7, #12]
 800ec30:	e00c      	b.n	800ec4c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	681a      	ldr	r2, [r3, #0]
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	d103      	bne.n	800ec46 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	681a      	ldr	r2, [r3, #0]
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	68db      	ldr	r3, [r3, #12]
 800ec4a:	60fb      	str	r3, [r7, #12]
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d1ef      	bne.n	800ec32 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800ec52:	bf00      	nop
 800ec54:	3714      	adds	r7, #20
 800ec56:	46bd      	mov	sp, r7
 800ec58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5c:	4770      	bx	lr
 800ec5e:	bf00      	nop
 800ec60:	20008604 	.word	0x20008604

0800ec64 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b082      	sub	sp, #8
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800ec6c:	4915      	ldr	r1, [pc, #84]	@ (800ecc4 <etharp_free_entry+0x60>)
 800ec6e:	687a      	ldr	r2, [r7, #4]
 800ec70:	4613      	mov	r3, r2
 800ec72:	005b      	lsls	r3, r3, #1
 800ec74:	4413      	add	r3, r2
 800ec76:	00db      	lsls	r3, r3, #3
 800ec78:	440b      	add	r3, r1
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d013      	beq.n	800eca8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800ec80:	4910      	ldr	r1, [pc, #64]	@ (800ecc4 <etharp_free_entry+0x60>)
 800ec82:	687a      	ldr	r2, [r7, #4]
 800ec84:	4613      	mov	r3, r2
 800ec86:	005b      	lsls	r3, r3, #1
 800ec88:	4413      	add	r3, r2
 800ec8a:	00db      	lsls	r3, r3, #3
 800ec8c:	440b      	add	r3, r1
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	4618      	mov	r0, r3
 800ec92:	f7f9 f9ff 	bl	8008094 <pbuf_free>
    arp_table[i].q = NULL;
 800ec96:	490b      	ldr	r1, [pc, #44]	@ (800ecc4 <etharp_free_entry+0x60>)
 800ec98:	687a      	ldr	r2, [r7, #4]
 800ec9a:	4613      	mov	r3, r2
 800ec9c:	005b      	lsls	r3, r3, #1
 800ec9e:	4413      	add	r3, r2
 800eca0:	00db      	lsls	r3, r3, #3
 800eca2:	440b      	add	r3, r1
 800eca4:	2200      	movs	r2, #0
 800eca6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800eca8:	4906      	ldr	r1, [pc, #24]	@ (800ecc4 <etharp_free_entry+0x60>)
 800ecaa:	687a      	ldr	r2, [r7, #4]
 800ecac:	4613      	mov	r3, r2
 800ecae:	005b      	lsls	r3, r3, #1
 800ecb0:	4413      	add	r3, r2
 800ecb2:	00db      	lsls	r3, r3, #3
 800ecb4:	440b      	add	r3, r1
 800ecb6:	3314      	adds	r3, #20
 800ecb8:	2200      	movs	r2, #0
 800ecba:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800ecbc:	bf00      	nop
 800ecbe:	3708      	adds	r7, #8
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}
 800ecc4:	20008608 	.word	0x20008608

0800ecc8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b082      	sub	sp, #8
 800eccc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ecce:	2300      	movs	r3, #0
 800ecd0:	607b      	str	r3, [r7, #4]
 800ecd2:	e096      	b.n	800ee02 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800ecd4:	494f      	ldr	r1, [pc, #316]	@ (800ee14 <etharp_tmr+0x14c>)
 800ecd6:	687a      	ldr	r2, [r7, #4]
 800ecd8:	4613      	mov	r3, r2
 800ecda:	005b      	lsls	r3, r3, #1
 800ecdc:	4413      	add	r3, r2
 800ecde:	00db      	lsls	r3, r3, #3
 800ece0:	440b      	add	r3, r1
 800ece2:	3314      	adds	r3, #20
 800ece4:	781b      	ldrb	r3, [r3, #0]
 800ece6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800ece8:	78fb      	ldrb	r3, [r7, #3]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	f000 8086 	beq.w	800edfc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800ecf0:	4948      	ldr	r1, [pc, #288]	@ (800ee14 <etharp_tmr+0x14c>)
 800ecf2:	687a      	ldr	r2, [r7, #4]
 800ecf4:	4613      	mov	r3, r2
 800ecf6:	005b      	lsls	r3, r3, #1
 800ecf8:	4413      	add	r3, r2
 800ecfa:	00db      	lsls	r3, r3, #3
 800ecfc:	440b      	add	r3, r1
 800ecfe:	3312      	adds	r3, #18
 800ed00:	881b      	ldrh	r3, [r3, #0]
 800ed02:	3301      	adds	r3, #1
 800ed04:	b298      	uxth	r0, r3
 800ed06:	4943      	ldr	r1, [pc, #268]	@ (800ee14 <etharp_tmr+0x14c>)
 800ed08:	687a      	ldr	r2, [r7, #4]
 800ed0a:	4613      	mov	r3, r2
 800ed0c:	005b      	lsls	r3, r3, #1
 800ed0e:	4413      	add	r3, r2
 800ed10:	00db      	lsls	r3, r3, #3
 800ed12:	440b      	add	r3, r1
 800ed14:	3312      	adds	r3, #18
 800ed16:	4602      	mov	r2, r0
 800ed18:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ed1a:	493e      	ldr	r1, [pc, #248]	@ (800ee14 <etharp_tmr+0x14c>)
 800ed1c:	687a      	ldr	r2, [r7, #4]
 800ed1e:	4613      	mov	r3, r2
 800ed20:	005b      	lsls	r3, r3, #1
 800ed22:	4413      	add	r3, r2
 800ed24:	00db      	lsls	r3, r3, #3
 800ed26:	440b      	add	r3, r1
 800ed28:	3312      	adds	r3, #18
 800ed2a:	881b      	ldrh	r3, [r3, #0]
 800ed2c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800ed30:	d215      	bcs.n	800ed5e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ed32:	4938      	ldr	r1, [pc, #224]	@ (800ee14 <etharp_tmr+0x14c>)
 800ed34:	687a      	ldr	r2, [r7, #4]
 800ed36:	4613      	mov	r3, r2
 800ed38:	005b      	lsls	r3, r3, #1
 800ed3a:	4413      	add	r3, r2
 800ed3c:	00db      	lsls	r3, r3, #3
 800ed3e:	440b      	add	r3, r1
 800ed40:	3314      	adds	r3, #20
 800ed42:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ed44:	2b01      	cmp	r3, #1
 800ed46:	d10e      	bne.n	800ed66 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800ed48:	4932      	ldr	r1, [pc, #200]	@ (800ee14 <etharp_tmr+0x14c>)
 800ed4a:	687a      	ldr	r2, [r7, #4]
 800ed4c:	4613      	mov	r3, r2
 800ed4e:	005b      	lsls	r3, r3, #1
 800ed50:	4413      	add	r3, r2
 800ed52:	00db      	lsls	r3, r3, #3
 800ed54:	440b      	add	r3, r1
 800ed56:	3312      	adds	r3, #18
 800ed58:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ed5a:	2b04      	cmp	r3, #4
 800ed5c:	d903      	bls.n	800ed66 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	f7ff ff80 	bl	800ec64 <etharp_free_entry>
 800ed64:	e04a      	b.n	800edfc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ed66:	492b      	ldr	r1, [pc, #172]	@ (800ee14 <etharp_tmr+0x14c>)
 800ed68:	687a      	ldr	r2, [r7, #4]
 800ed6a:	4613      	mov	r3, r2
 800ed6c:	005b      	lsls	r3, r3, #1
 800ed6e:	4413      	add	r3, r2
 800ed70:	00db      	lsls	r3, r3, #3
 800ed72:	440b      	add	r3, r1
 800ed74:	3314      	adds	r3, #20
 800ed76:	781b      	ldrb	r3, [r3, #0]
 800ed78:	2b03      	cmp	r3, #3
 800ed7a:	d10a      	bne.n	800ed92 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ed7c:	4925      	ldr	r1, [pc, #148]	@ (800ee14 <etharp_tmr+0x14c>)
 800ed7e:	687a      	ldr	r2, [r7, #4]
 800ed80:	4613      	mov	r3, r2
 800ed82:	005b      	lsls	r3, r3, #1
 800ed84:	4413      	add	r3, r2
 800ed86:	00db      	lsls	r3, r3, #3
 800ed88:	440b      	add	r3, r1
 800ed8a:	3314      	adds	r3, #20
 800ed8c:	2204      	movs	r2, #4
 800ed8e:	701a      	strb	r2, [r3, #0]
 800ed90:	e034      	b.n	800edfc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ed92:	4920      	ldr	r1, [pc, #128]	@ (800ee14 <etharp_tmr+0x14c>)
 800ed94:	687a      	ldr	r2, [r7, #4]
 800ed96:	4613      	mov	r3, r2
 800ed98:	005b      	lsls	r3, r3, #1
 800ed9a:	4413      	add	r3, r2
 800ed9c:	00db      	lsls	r3, r3, #3
 800ed9e:	440b      	add	r3, r1
 800eda0:	3314      	adds	r3, #20
 800eda2:	781b      	ldrb	r3, [r3, #0]
 800eda4:	2b04      	cmp	r3, #4
 800eda6:	d10a      	bne.n	800edbe <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800eda8:	491a      	ldr	r1, [pc, #104]	@ (800ee14 <etharp_tmr+0x14c>)
 800edaa:	687a      	ldr	r2, [r7, #4]
 800edac:	4613      	mov	r3, r2
 800edae:	005b      	lsls	r3, r3, #1
 800edb0:	4413      	add	r3, r2
 800edb2:	00db      	lsls	r3, r3, #3
 800edb4:	440b      	add	r3, r1
 800edb6:	3314      	adds	r3, #20
 800edb8:	2202      	movs	r2, #2
 800edba:	701a      	strb	r2, [r3, #0]
 800edbc:	e01e      	b.n	800edfc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800edbe:	4915      	ldr	r1, [pc, #84]	@ (800ee14 <etharp_tmr+0x14c>)
 800edc0:	687a      	ldr	r2, [r7, #4]
 800edc2:	4613      	mov	r3, r2
 800edc4:	005b      	lsls	r3, r3, #1
 800edc6:	4413      	add	r3, r2
 800edc8:	00db      	lsls	r3, r3, #3
 800edca:	440b      	add	r3, r1
 800edcc:	3314      	adds	r3, #20
 800edce:	781b      	ldrb	r3, [r3, #0]
 800edd0:	2b01      	cmp	r3, #1
 800edd2:	d113      	bne.n	800edfc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800edd4:	490f      	ldr	r1, [pc, #60]	@ (800ee14 <etharp_tmr+0x14c>)
 800edd6:	687a      	ldr	r2, [r7, #4]
 800edd8:	4613      	mov	r3, r2
 800edda:	005b      	lsls	r3, r3, #1
 800eddc:	4413      	add	r3, r2
 800edde:	00db      	lsls	r3, r3, #3
 800ede0:	440b      	add	r3, r1
 800ede2:	3308      	adds	r3, #8
 800ede4:	6818      	ldr	r0, [r3, #0]
 800ede6:	687a      	ldr	r2, [r7, #4]
 800ede8:	4613      	mov	r3, r2
 800edea:	005b      	lsls	r3, r3, #1
 800edec:	4413      	add	r3, r2
 800edee:	00db      	lsls	r3, r3, #3
 800edf0:	4a08      	ldr	r2, [pc, #32]	@ (800ee14 <etharp_tmr+0x14c>)
 800edf2:	4413      	add	r3, r2
 800edf4:	3304      	adds	r3, #4
 800edf6:	4619      	mov	r1, r3
 800edf8:	f000 fe6e 	bl	800fad8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	3301      	adds	r3, #1
 800ee00:	607b      	str	r3, [r7, #4]
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	2b09      	cmp	r3, #9
 800ee06:	f77f af65 	ble.w	800ecd4 <etharp_tmr+0xc>
      }
    }
  }
}
 800ee0a:	bf00      	nop
 800ee0c:	bf00      	nop
 800ee0e:	3708      	adds	r7, #8
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}
 800ee14:	20008608 	.word	0x20008608

0800ee18 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b08a      	sub	sp, #40	@ 0x28
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	60f8      	str	r0, [r7, #12]
 800ee20:	460b      	mov	r3, r1
 800ee22:	607a      	str	r2, [r7, #4]
 800ee24:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ee26:	230a      	movs	r3, #10
 800ee28:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ee2a:	230a      	movs	r3, #10
 800ee2c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800ee2e:	230a      	movs	r3, #10
 800ee30:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800ee32:	2300      	movs	r3, #0
 800ee34:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800ee36:	230a      	movs	r3, #10
 800ee38:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	83bb      	strh	r3, [r7, #28]
 800ee3e:	2300      	movs	r3, #0
 800ee40:	837b      	strh	r3, [r7, #26]
 800ee42:	2300      	movs	r3, #0
 800ee44:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ee46:	2300      	movs	r3, #0
 800ee48:	843b      	strh	r3, [r7, #32]
 800ee4a:	e0ae      	b.n	800efaa <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800ee4c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ee50:	49a6      	ldr	r1, [pc, #664]	@ (800f0ec <etharp_find_entry+0x2d4>)
 800ee52:	4613      	mov	r3, r2
 800ee54:	005b      	lsls	r3, r3, #1
 800ee56:	4413      	add	r3, r2
 800ee58:	00db      	lsls	r3, r3, #3
 800ee5a:	440b      	add	r3, r1
 800ee5c:	3314      	adds	r3, #20
 800ee5e:	781b      	ldrb	r3, [r3, #0]
 800ee60:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ee62:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800ee66:	2b0a      	cmp	r3, #10
 800ee68:	d105      	bne.n	800ee76 <etharp_find_entry+0x5e>
 800ee6a:	7dfb      	ldrb	r3, [r7, #23]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d102      	bne.n	800ee76 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800ee70:	8c3b      	ldrh	r3, [r7, #32]
 800ee72:	847b      	strh	r3, [r7, #34]	@ 0x22
 800ee74:	e095      	b.n	800efa2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ee76:	7dfb      	ldrb	r3, [r7, #23]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	f000 8092 	beq.w	800efa2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ee7e:	7dfb      	ldrb	r3, [r7, #23]
 800ee80:	2b01      	cmp	r3, #1
 800ee82:	d009      	beq.n	800ee98 <etharp_find_entry+0x80>
 800ee84:	7dfb      	ldrb	r3, [r7, #23]
 800ee86:	2b01      	cmp	r3, #1
 800ee88:	d806      	bhi.n	800ee98 <etharp_find_entry+0x80>
 800ee8a:	4b99      	ldr	r3, [pc, #612]	@ (800f0f0 <etharp_find_entry+0x2d8>)
 800ee8c:	f240 1223 	movw	r2, #291	@ 0x123
 800ee90:	4998      	ldr	r1, [pc, #608]	@ (800f0f4 <etharp_find_entry+0x2dc>)
 800ee92:	4899      	ldr	r0, [pc, #612]	@ (800f0f8 <etharp_find_entry+0x2e0>)
 800ee94:	f002 faac 	bl	80113f0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d020      	beq.n	800eee0 <etharp_find_entry+0xc8>
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	6819      	ldr	r1, [r3, #0]
 800eea2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eea6:	4891      	ldr	r0, [pc, #580]	@ (800f0ec <etharp_find_entry+0x2d4>)
 800eea8:	4613      	mov	r3, r2
 800eeaa:	005b      	lsls	r3, r3, #1
 800eeac:	4413      	add	r3, r2
 800eeae:	00db      	lsls	r3, r3, #3
 800eeb0:	4403      	add	r3, r0
 800eeb2:	3304      	adds	r3, #4
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	4299      	cmp	r1, r3
 800eeb8:	d112      	bne.n	800eee0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d00c      	beq.n	800eeda <etharp_find_entry+0xc2>
 800eec0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eec4:	4989      	ldr	r1, [pc, #548]	@ (800f0ec <etharp_find_entry+0x2d4>)
 800eec6:	4613      	mov	r3, r2
 800eec8:	005b      	lsls	r3, r3, #1
 800eeca:	4413      	add	r3, r2
 800eecc:	00db      	lsls	r3, r3, #3
 800eece:	440b      	add	r3, r1
 800eed0:	3308      	adds	r3, #8
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	687a      	ldr	r2, [r7, #4]
 800eed6:	429a      	cmp	r2, r3
 800eed8:	d102      	bne.n	800eee0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800eeda:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800eede:	e100      	b.n	800f0e2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800eee0:	7dfb      	ldrb	r3, [r7, #23]
 800eee2:	2b01      	cmp	r3, #1
 800eee4:	d140      	bne.n	800ef68 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800eee6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eeea:	4980      	ldr	r1, [pc, #512]	@ (800f0ec <etharp_find_entry+0x2d4>)
 800eeec:	4613      	mov	r3, r2
 800eeee:	005b      	lsls	r3, r3, #1
 800eef0:	4413      	add	r3, r2
 800eef2:	00db      	lsls	r3, r3, #3
 800eef4:	440b      	add	r3, r1
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d01a      	beq.n	800ef32 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800eefc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ef00:	497a      	ldr	r1, [pc, #488]	@ (800f0ec <etharp_find_entry+0x2d4>)
 800ef02:	4613      	mov	r3, r2
 800ef04:	005b      	lsls	r3, r3, #1
 800ef06:	4413      	add	r3, r2
 800ef08:	00db      	lsls	r3, r3, #3
 800ef0a:	440b      	add	r3, r1
 800ef0c:	3312      	adds	r3, #18
 800ef0e:	881b      	ldrh	r3, [r3, #0]
 800ef10:	8bba      	ldrh	r2, [r7, #28]
 800ef12:	429a      	cmp	r2, r3
 800ef14:	d845      	bhi.n	800efa2 <etharp_find_entry+0x18a>
            old_queue = i;
 800ef16:	8c3b      	ldrh	r3, [r7, #32]
 800ef18:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800ef1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ef1e:	4973      	ldr	r1, [pc, #460]	@ (800f0ec <etharp_find_entry+0x2d4>)
 800ef20:	4613      	mov	r3, r2
 800ef22:	005b      	lsls	r3, r3, #1
 800ef24:	4413      	add	r3, r2
 800ef26:	00db      	lsls	r3, r3, #3
 800ef28:	440b      	add	r3, r1
 800ef2a:	3312      	adds	r3, #18
 800ef2c:	881b      	ldrh	r3, [r3, #0]
 800ef2e:	83bb      	strh	r3, [r7, #28]
 800ef30:	e037      	b.n	800efa2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800ef32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ef36:	496d      	ldr	r1, [pc, #436]	@ (800f0ec <etharp_find_entry+0x2d4>)
 800ef38:	4613      	mov	r3, r2
 800ef3a:	005b      	lsls	r3, r3, #1
 800ef3c:	4413      	add	r3, r2
 800ef3e:	00db      	lsls	r3, r3, #3
 800ef40:	440b      	add	r3, r1
 800ef42:	3312      	adds	r3, #18
 800ef44:	881b      	ldrh	r3, [r3, #0]
 800ef46:	8b7a      	ldrh	r2, [r7, #26]
 800ef48:	429a      	cmp	r2, r3
 800ef4a:	d82a      	bhi.n	800efa2 <etharp_find_entry+0x18a>
            old_pending = i;
 800ef4c:	8c3b      	ldrh	r3, [r7, #32]
 800ef4e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800ef50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ef54:	4965      	ldr	r1, [pc, #404]	@ (800f0ec <etharp_find_entry+0x2d4>)
 800ef56:	4613      	mov	r3, r2
 800ef58:	005b      	lsls	r3, r3, #1
 800ef5a:	4413      	add	r3, r2
 800ef5c:	00db      	lsls	r3, r3, #3
 800ef5e:	440b      	add	r3, r1
 800ef60:	3312      	adds	r3, #18
 800ef62:	881b      	ldrh	r3, [r3, #0]
 800ef64:	837b      	strh	r3, [r7, #26]
 800ef66:	e01c      	b.n	800efa2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ef68:	7dfb      	ldrb	r3, [r7, #23]
 800ef6a:	2b01      	cmp	r3, #1
 800ef6c:	d919      	bls.n	800efa2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ef6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ef72:	495e      	ldr	r1, [pc, #376]	@ (800f0ec <etharp_find_entry+0x2d4>)
 800ef74:	4613      	mov	r3, r2
 800ef76:	005b      	lsls	r3, r3, #1
 800ef78:	4413      	add	r3, r2
 800ef7a:	00db      	lsls	r3, r3, #3
 800ef7c:	440b      	add	r3, r1
 800ef7e:	3312      	adds	r3, #18
 800ef80:	881b      	ldrh	r3, [r3, #0]
 800ef82:	8b3a      	ldrh	r2, [r7, #24]
 800ef84:	429a      	cmp	r2, r3
 800ef86:	d80c      	bhi.n	800efa2 <etharp_find_entry+0x18a>
            old_stable = i;
 800ef88:	8c3b      	ldrh	r3, [r7, #32]
 800ef8a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800ef8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ef90:	4956      	ldr	r1, [pc, #344]	@ (800f0ec <etharp_find_entry+0x2d4>)
 800ef92:	4613      	mov	r3, r2
 800ef94:	005b      	lsls	r3, r3, #1
 800ef96:	4413      	add	r3, r2
 800ef98:	00db      	lsls	r3, r3, #3
 800ef9a:	440b      	add	r3, r1
 800ef9c:	3312      	adds	r3, #18
 800ef9e:	881b      	ldrh	r3, [r3, #0]
 800efa0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800efa2:	8c3b      	ldrh	r3, [r7, #32]
 800efa4:	3301      	adds	r3, #1
 800efa6:	b29b      	uxth	r3, r3
 800efa8:	843b      	strh	r3, [r7, #32]
 800efaa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800efae:	2b09      	cmp	r3, #9
 800efb0:	f77f af4c 	ble.w	800ee4c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800efb4:	7afb      	ldrb	r3, [r7, #11]
 800efb6:	f003 0302 	and.w	r3, r3, #2
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d108      	bne.n	800efd0 <etharp_find_entry+0x1b8>
 800efbe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800efc2:	2b0a      	cmp	r3, #10
 800efc4:	d107      	bne.n	800efd6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800efc6:	7afb      	ldrb	r3, [r7, #11]
 800efc8:	f003 0301 	and.w	r3, r3, #1
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d102      	bne.n	800efd6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800efd0:	f04f 33ff 	mov.w	r3, #4294967295
 800efd4:	e085      	b.n	800f0e2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800efd6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800efda:	2b09      	cmp	r3, #9
 800efdc:	dc02      	bgt.n	800efe4 <etharp_find_entry+0x1cc>
    i = empty;
 800efde:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800efe0:	843b      	strh	r3, [r7, #32]
 800efe2:	e039      	b.n	800f058 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800efe4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800efe8:	2b09      	cmp	r3, #9
 800efea:	dc14      	bgt.n	800f016 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800efec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800efee:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800eff0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800eff4:	493d      	ldr	r1, [pc, #244]	@ (800f0ec <etharp_find_entry+0x2d4>)
 800eff6:	4613      	mov	r3, r2
 800eff8:	005b      	lsls	r3, r3, #1
 800effa:	4413      	add	r3, r2
 800effc:	00db      	lsls	r3, r3, #3
 800effe:	440b      	add	r3, r1
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d018      	beq.n	800f038 <etharp_find_entry+0x220>
 800f006:	4b3a      	ldr	r3, [pc, #232]	@ (800f0f0 <etharp_find_entry+0x2d8>)
 800f008:	f240 126d 	movw	r2, #365	@ 0x16d
 800f00c:	493b      	ldr	r1, [pc, #236]	@ (800f0fc <etharp_find_entry+0x2e4>)
 800f00e:	483a      	ldr	r0, [pc, #232]	@ (800f0f8 <etharp_find_entry+0x2e0>)
 800f010:	f002 f9ee 	bl	80113f0 <iprintf>
 800f014:	e010      	b.n	800f038 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800f016:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800f01a:	2b09      	cmp	r3, #9
 800f01c:	dc02      	bgt.n	800f024 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800f01e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f020:	843b      	strh	r3, [r7, #32]
 800f022:	e009      	b.n	800f038 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800f024:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f028:	2b09      	cmp	r3, #9
 800f02a:	dc02      	bgt.n	800f032 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800f02c:	8bfb      	ldrh	r3, [r7, #30]
 800f02e:	843b      	strh	r3, [r7, #32]
 800f030:	e002      	b.n	800f038 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800f032:	f04f 33ff 	mov.w	r3, #4294967295
 800f036:	e054      	b.n	800f0e2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f038:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f03c:	2b09      	cmp	r3, #9
 800f03e:	dd06      	ble.n	800f04e <etharp_find_entry+0x236>
 800f040:	4b2b      	ldr	r3, [pc, #172]	@ (800f0f0 <etharp_find_entry+0x2d8>)
 800f042:	f240 127f 	movw	r2, #383	@ 0x17f
 800f046:	492e      	ldr	r1, [pc, #184]	@ (800f100 <etharp_find_entry+0x2e8>)
 800f048:	482b      	ldr	r0, [pc, #172]	@ (800f0f8 <etharp_find_entry+0x2e0>)
 800f04a:	f002 f9d1 	bl	80113f0 <iprintf>
    etharp_free_entry(i);
 800f04e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f052:	4618      	mov	r0, r3
 800f054:	f7ff fe06 	bl	800ec64 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f058:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f05c:	2b09      	cmp	r3, #9
 800f05e:	dd06      	ble.n	800f06e <etharp_find_entry+0x256>
 800f060:	4b23      	ldr	r3, [pc, #140]	@ (800f0f0 <etharp_find_entry+0x2d8>)
 800f062:	f240 1283 	movw	r2, #387	@ 0x183
 800f066:	4926      	ldr	r1, [pc, #152]	@ (800f100 <etharp_find_entry+0x2e8>)
 800f068:	4823      	ldr	r0, [pc, #140]	@ (800f0f8 <etharp_find_entry+0x2e0>)
 800f06a:	f002 f9c1 	bl	80113f0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f06e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f072:	491e      	ldr	r1, [pc, #120]	@ (800f0ec <etharp_find_entry+0x2d4>)
 800f074:	4613      	mov	r3, r2
 800f076:	005b      	lsls	r3, r3, #1
 800f078:	4413      	add	r3, r2
 800f07a:	00db      	lsls	r3, r3, #3
 800f07c:	440b      	add	r3, r1
 800f07e:	3314      	adds	r3, #20
 800f080:	781b      	ldrb	r3, [r3, #0]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d006      	beq.n	800f094 <etharp_find_entry+0x27c>
 800f086:	4b1a      	ldr	r3, [pc, #104]	@ (800f0f0 <etharp_find_entry+0x2d8>)
 800f088:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800f08c:	491d      	ldr	r1, [pc, #116]	@ (800f104 <etharp_find_entry+0x2ec>)
 800f08e:	481a      	ldr	r0, [pc, #104]	@ (800f0f8 <etharp_find_entry+0x2e0>)
 800f090:	f002 f9ae 	bl	80113f0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d00b      	beq.n	800f0b2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f09a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	6819      	ldr	r1, [r3, #0]
 800f0a2:	4812      	ldr	r0, [pc, #72]	@ (800f0ec <etharp_find_entry+0x2d4>)
 800f0a4:	4613      	mov	r3, r2
 800f0a6:	005b      	lsls	r3, r3, #1
 800f0a8:	4413      	add	r3, r2
 800f0aa:	00db      	lsls	r3, r3, #3
 800f0ac:	4403      	add	r3, r0
 800f0ae:	3304      	adds	r3, #4
 800f0b0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800f0b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f0b6:	490d      	ldr	r1, [pc, #52]	@ (800f0ec <etharp_find_entry+0x2d4>)
 800f0b8:	4613      	mov	r3, r2
 800f0ba:	005b      	lsls	r3, r3, #1
 800f0bc:	4413      	add	r3, r2
 800f0be:	00db      	lsls	r3, r3, #3
 800f0c0:	440b      	add	r3, r1
 800f0c2:	3312      	adds	r3, #18
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800f0c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f0cc:	4907      	ldr	r1, [pc, #28]	@ (800f0ec <etharp_find_entry+0x2d4>)
 800f0ce:	4613      	mov	r3, r2
 800f0d0:	005b      	lsls	r3, r3, #1
 800f0d2:	4413      	add	r3, r2
 800f0d4:	00db      	lsls	r3, r3, #3
 800f0d6:	440b      	add	r3, r1
 800f0d8:	3308      	adds	r3, #8
 800f0da:	687a      	ldr	r2, [r7, #4]
 800f0dc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800f0de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	3728      	adds	r7, #40	@ 0x28
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}
 800f0ea:	bf00      	nop
 800f0ec:	20008608 	.word	0x20008608
 800f0f0:	080147f0 	.word	0x080147f0
 800f0f4:	08014828 	.word	0x08014828
 800f0f8:	08014868 	.word	0x08014868
 800f0fc:	08014890 	.word	0x08014890
 800f100:	080148a8 	.word	0x080148a8
 800f104:	080148bc 	.word	0x080148bc

0800f108 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b088      	sub	sp, #32
 800f10c:	af02      	add	r7, sp, #8
 800f10e:	60f8      	str	r0, [r7, #12]
 800f110:	60b9      	str	r1, [r7, #8]
 800f112:	607a      	str	r2, [r7, #4]
 800f114:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f11c:	2b06      	cmp	r3, #6
 800f11e:	d006      	beq.n	800f12e <etharp_update_arp_entry+0x26>
 800f120:	4b48      	ldr	r3, [pc, #288]	@ (800f244 <etharp_update_arp_entry+0x13c>)
 800f122:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800f126:	4948      	ldr	r1, [pc, #288]	@ (800f248 <etharp_update_arp_entry+0x140>)
 800f128:	4848      	ldr	r0, [pc, #288]	@ (800f24c <etharp_update_arp_entry+0x144>)
 800f12a:	f002 f961 	bl	80113f0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d012      	beq.n	800f15a <etharp_update_arp_entry+0x52>
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d00e      	beq.n	800f15a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f13c:	68bb      	ldr	r3, [r7, #8]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	68f9      	ldr	r1, [r7, #12]
 800f142:	4618      	mov	r0, r3
 800f144:	f001 f8fe 	bl	8010344 <ip4_addr_isbroadcast_u32>
 800f148:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d105      	bne.n	800f15a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800f14e:	68bb      	ldr	r3, [r7, #8]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f156:	2be0      	cmp	r3, #224	@ 0xe0
 800f158:	d102      	bne.n	800f160 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f15a:	f06f 030f 	mvn.w	r3, #15
 800f15e:	e06c      	b.n	800f23a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800f160:	78fb      	ldrb	r3, [r7, #3]
 800f162:	68fa      	ldr	r2, [r7, #12]
 800f164:	4619      	mov	r1, r3
 800f166:	68b8      	ldr	r0, [r7, #8]
 800f168:	f7ff fe56 	bl	800ee18 <etharp_find_entry>
 800f16c:	4603      	mov	r3, r0
 800f16e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800f170:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f174:	2b00      	cmp	r3, #0
 800f176:	da02      	bge.n	800f17e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800f178:	8afb      	ldrh	r3, [r7, #22]
 800f17a:	b25b      	sxtb	r3, r3
 800f17c:	e05d      	b.n	800f23a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f17e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f182:	4933      	ldr	r1, [pc, #204]	@ (800f250 <etharp_update_arp_entry+0x148>)
 800f184:	4613      	mov	r3, r2
 800f186:	005b      	lsls	r3, r3, #1
 800f188:	4413      	add	r3, r2
 800f18a:	00db      	lsls	r3, r3, #3
 800f18c:	440b      	add	r3, r1
 800f18e:	3314      	adds	r3, #20
 800f190:	2202      	movs	r2, #2
 800f192:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800f194:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f198:	492d      	ldr	r1, [pc, #180]	@ (800f250 <etharp_update_arp_entry+0x148>)
 800f19a:	4613      	mov	r3, r2
 800f19c:	005b      	lsls	r3, r3, #1
 800f19e:	4413      	add	r3, r2
 800f1a0:	00db      	lsls	r3, r3, #3
 800f1a2:	440b      	add	r3, r1
 800f1a4:	3308      	adds	r3, #8
 800f1a6:	68fa      	ldr	r2, [r7, #12]
 800f1a8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f1aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f1ae:	4613      	mov	r3, r2
 800f1b0:	005b      	lsls	r3, r3, #1
 800f1b2:	4413      	add	r3, r2
 800f1b4:	00db      	lsls	r3, r3, #3
 800f1b6:	3308      	adds	r3, #8
 800f1b8:	4a25      	ldr	r2, [pc, #148]	@ (800f250 <etharp_update_arp_entry+0x148>)
 800f1ba:	4413      	add	r3, r2
 800f1bc:	3304      	adds	r3, #4
 800f1be:	2206      	movs	r2, #6
 800f1c0:	6879      	ldr	r1, [r7, #4]
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f002 fa0d 	bl	80115e2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800f1c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f1cc:	4920      	ldr	r1, [pc, #128]	@ (800f250 <etharp_update_arp_entry+0x148>)
 800f1ce:	4613      	mov	r3, r2
 800f1d0:	005b      	lsls	r3, r3, #1
 800f1d2:	4413      	add	r3, r2
 800f1d4:	00db      	lsls	r3, r3, #3
 800f1d6:	440b      	add	r3, r1
 800f1d8:	3312      	adds	r3, #18
 800f1da:	2200      	movs	r2, #0
 800f1dc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800f1de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f1e2:	491b      	ldr	r1, [pc, #108]	@ (800f250 <etharp_update_arp_entry+0x148>)
 800f1e4:	4613      	mov	r3, r2
 800f1e6:	005b      	lsls	r3, r3, #1
 800f1e8:	4413      	add	r3, r2
 800f1ea:	00db      	lsls	r3, r3, #3
 800f1ec:	440b      	add	r3, r1
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d021      	beq.n	800f238 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800f1f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f1f8:	4915      	ldr	r1, [pc, #84]	@ (800f250 <etharp_update_arp_entry+0x148>)
 800f1fa:	4613      	mov	r3, r2
 800f1fc:	005b      	lsls	r3, r3, #1
 800f1fe:	4413      	add	r3, r2
 800f200:	00db      	lsls	r3, r3, #3
 800f202:	440b      	add	r3, r1
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800f208:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f20c:	4910      	ldr	r1, [pc, #64]	@ (800f250 <etharp_update_arp_entry+0x148>)
 800f20e:	4613      	mov	r3, r2
 800f210:	005b      	lsls	r3, r3, #1
 800f212:	4413      	add	r3, r2
 800f214:	00db      	lsls	r3, r3, #3
 800f216:	440b      	add	r3, r1
 800f218:	2200      	movs	r2, #0
 800f21a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800f222:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f226:	9300      	str	r3, [sp, #0]
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	6939      	ldr	r1, [r7, #16]
 800f22c:	68f8      	ldr	r0, [r7, #12]
 800f22e:	f001 ff97 	bl	8011160 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800f232:	6938      	ldr	r0, [r7, #16]
 800f234:	f7f8 ff2e 	bl	8008094 <pbuf_free>
  }
  return ERR_OK;
 800f238:	2300      	movs	r3, #0
}
 800f23a:	4618      	mov	r0, r3
 800f23c:	3718      	adds	r7, #24
 800f23e:	46bd      	mov	sp, r7
 800f240:	bd80      	pop	{r7, pc}
 800f242:	bf00      	nop
 800f244:	080147f0 	.word	0x080147f0
 800f248:	080148e8 	.word	0x080148e8
 800f24c:	08014868 	.word	0x08014868
 800f250:	20008608 	.word	0x20008608

0800f254 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b084      	sub	sp, #16
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f25c:	2300      	movs	r3, #0
 800f25e:	60fb      	str	r3, [r7, #12]
 800f260:	e01e      	b.n	800f2a0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800f262:	4913      	ldr	r1, [pc, #76]	@ (800f2b0 <etharp_cleanup_netif+0x5c>)
 800f264:	68fa      	ldr	r2, [r7, #12]
 800f266:	4613      	mov	r3, r2
 800f268:	005b      	lsls	r3, r3, #1
 800f26a:	4413      	add	r3, r2
 800f26c:	00db      	lsls	r3, r3, #3
 800f26e:	440b      	add	r3, r1
 800f270:	3314      	adds	r3, #20
 800f272:	781b      	ldrb	r3, [r3, #0]
 800f274:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800f276:	7afb      	ldrb	r3, [r7, #11]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d00e      	beq.n	800f29a <etharp_cleanup_netif+0x46>
 800f27c:	490c      	ldr	r1, [pc, #48]	@ (800f2b0 <etharp_cleanup_netif+0x5c>)
 800f27e:	68fa      	ldr	r2, [r7, #12]
 800f280:	4613      	mov	r3, r2
 800f282:	005b      	lsls	r3, r3, #1
 800f284:	4413      	add	r3, r2
 800f286:	00db      	lsls	r3, r3, #3
 800f288:	440b      	add	r3, r1
 800f28a:	3308      	adds	r3, #8
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	687a      	ldr	r2, [r7, #4]
 800f290:	429a      	cmp	r2, r3
 800f292:	d102      	bne.n	800f29a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800f294:	68f8      	ldr	r0, [r7, #12]
 800f296:	f7ff fce5 	bl	800ec64 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	3301      	adds	r3, #1
 800f29e:	60fb      	str	r3, [r7, #12]
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	2b09      	cmp	r3, #9
 800f2a4:	dddd      	ble.n	800f262 <etharp_cleanup_netif+0xe>
    }
  }
}
 800f2a6:	bf00      	nop
 800f2a8:	bf00      	nop
 800f2aa:	3710      	adds	r7, #16
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd80      	pop	{r7, pc}
 800f2b0:	20008608 	.word	0x20008608

0800f2b4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800f2b4:	b5b0      	push	{r4, r5, r7, lr}
 800f2b6:	b08a      	sub	sp, #40	@ 0x28
 800f2b8:	af04      	add	r7, sp, #16
 800f2ba:	6078      	str	r0, [r7, #4]
 800f2bc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d107      	bne.n	800f2d4 <etharp_input+0x20>
 800f2c4:	4b3d      	ldr	r3, [pc, #244]	@ (800f3bc <etharp_input+0x108>)
 800f2c6:	f240 228a 	movw	r2, #650	@ 0x28a
 800f2ca:	493d      	ldr	r1, [pc, #244]	@ (800f3c0 <etharp_input+0x10c>)
 800f2cc:	483d      	ldr	r0, [pc, #244]	@ (800f3c4 <etharp_input+0x110>)
 800f2ce:	f002 f88f 	bl	80113f0 <iprintf>
 800f2d2:	e06f      	b.n	800f3b4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	685b      	ldr	r3, [r3, #4]
 800f2d8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f2da:	693b      	ldr	r3, [r7, #16]
 800f2dc:	881b      	ldrh	r3, [r3, #0]
 800f2de:	b29b      	uxth	r3, r3
 800f2e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f2e4:	d10c      	bne.n	800f300 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f2e6:	693b      	ldr	r3, [r7, #16]
 800f2e8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f2ea:	2b06      	cmp	r3, #6
 800f2ec:	d108      	bne.n	800f300 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f2ee:	693b      	ldr	r3, [r7, #16]
 800f2f0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f2f2:	2b04      	cmp	r3, #4
 800f2f4:	d104      	bne.n	800f300 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800f2f6:	693b      	ldr	r3, [r7, #16]
 800f2f8:	885b      	ldrh	r3, [r3, #2]
 800f2fa:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f2fc:	2b08      	cmp	r3, #8
 800f2fe:	d003      	beq.n	800f308 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800f300:	6878      	ldr	r0, [r7, #4]
 800f302:	f7f8 fec7 	bl	8008094 <pbuf_free>
    return;
 800f306:	e055      	b.n	800f3b4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f308:	693b      	ldr	r3, [r7, #16]
 800f30a:	330e      	adds	r3, #14
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800f310:	693b      	ldr	r3, [r7, #16]
 800f312:	3318      	adds	r3, #24
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	3304      	adds	r3, #4
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d102      	bne.n	800f328 <etharp_input+0x74>
    for_us = 0;
 800f322:	2300      	movs	r3, #0
 800f324:	75fb      	strb	r3, [r7, #23]
 800f326:	e009      	b.n	800f33c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800f328:	68ba      	ldr	r2, [r7, #8]
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	3304      	adds	r3, #4
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	429a      	cmp	r2, r3
 800f332:	bf0c      	ite	eq
 800f334:	2301      	moveq	r3, #1
 800f336:	2300      	movne	r3, #0
 800f338:	b2db      	uxtb	r3, r3
 800f33a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f33c:	693b      	ldr	r3, [r7, #16]
 800f33e:	f103 0208 	add.w	r2, r3, #8
 800f342:	7dfb      	ldrb	r3, [r7, #23]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d001      	beq.n	800f34c <etharp_input+0x98>
 800f348:	2301      	movs	r3, #1
 800f34a:	e000      	b.n	800f34e <etharp_input+0x9a>
 800f34c:	2302      	movs	r3, #2
 800f34e:	f107 010c 	add.w	r1, r7, #12
 800f352:	6838      	ldr	r0, [r7, #0]
 800f354:	f7ff fed8 	bl	800f108 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800f358:	693b      	ldr	r3, [r7, #16]
 800f35a:	88db      	ldrh	r3, [r3, #6]
 800f35c:	b29b      	uxth	r3, r3
 800f35e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f362:	d003      	beq.n	800f36c <etharp_input+0xb8>
 800f364:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f368:	d01e      	beq.n	800f3a8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800f36a:	e020      	b.n	800f3ae <etharp_input+0xfa>
      if (for_us) {
 800f36c:	7dfb      	ldrb	r3, [r7, #23]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d01c      	beq.n	800f3ac <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800f378:	693b      	ldr	r3, [r7, #16]
 800f37a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800f388:	693a      	ldr	r2, [r7, #16]
 800f38a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800f38c:	2102      	movs	r1, #2
 800f38e:	9103      	str	r1, [sp, #12]
 800f390:	f107 010c 	add.w	r1, r7, #12
 800f394:	9102      	str	r1, [sp, #8]
 800f396:	9201      	str	r2, [sp, #4]
 800f398:	9300      	str	r3, [sp, #0]
 800f39a:	462b      	mov	r3, r5
 800f39c:	4622      	mov	r2, r4
 800f39e:	4601      	mov	r1, r0
 800f3a0:	6838      	ldr	r0, [r7, #0]
 800f3a2:	f000 faeb 	bl	800f97c <etharp_raw>
      break;
 800f3a6:	e001      	b.n	800f3ac <etharp_input+0xf8>
      break;
 800f3a8:	bf00      	nop
 800f3aa:	e000      	b.n	800f3ae <etharp_input+0xfa>
      break;
 800f3ac:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800f3ae:	6878      	ldr	r0, [r7, #4]
 800f3b0:	f7f8 fe70 	bl	8008094 <pbuf_free>
}
 800f3b4:	3718      	adds	r7, #24
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	bdb0      	pop	{r4, r5, r7, pc}
 800f3ba:	bf00      	nop
 800f3bc:	080147f0 	.word	0x080147f0
 800f3c0:	08014940 	.word	0x08014940
 800f3c4:	08014868 	.word	0x08014868

0800f3c8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b086      	sub	sp, #24
 800f3cc:	af02      	add	r7, sp, #8
 800f3ce:	60f8      	str	r0, [r7, #12]
 800f3d0:	60b9      	str	r1, [r7, #8]
 800f3d2:	4613      	mov	r3, r2
 800f3d4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f3d6:	79fa      	ldrb	r2, [r7, #7]
 800f3d8:	4944      	ldr	r1, [pc, #272]	@ (800f4ec <etharp_output_to_arp_index+0x124>)
 800f3da:	4613      	mov	r3, r2
 800f3dc:	005b      	lsls	r3, r3, #1
 800f3de:	4413      	add	r3, r2
 800f3e0:	00db      	lsls	r3, r3, #3
 800f3e2:	440b      	add	r3, r1
 800f3e4:	3314      	adds	r3, #20
 800f3e6:	781b      	ldrb	r3, [r3, #0]
 800f3e8:	2b01      	cmp	r3, #1
 800f3ea:	d806      	bhi.n	800f3fa <etharp_output_to_arp_index+0x32>
 800f3ec:	4b40      	ldr	r3, [pc, #256]	@ (800f4f0 <etharp_output_to_arp_index+0x128>)
 800f3ee:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800f3f2:	4940      	ldr	r1, [pc, #256]	@ (800f4f4 <etharp_output_to_arp_index+0x12c>)
 800f3f4:	4840      	ldr	r0, [pc, #256]	@ (800f4f8 <etharp_output_to_arp_index+0x130>)
 800f3f6:	f001 fffb 	bl	80113f0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f3fa:	79fa      	ldrb	r2, [r7, #7]
 800f3fc:	493b      	ldr	r1, [pc, #236]	@ (800f4ec <etharp_output_to_arp_index+0x124>)
 800f3fe:	4613      	mov	r3, r2
 800f400:	005b      	lsls	r3, r3, #1
 800f402:	4413      	add	r3, r2
 800f404:	00db      	lsls	r3, r3, #3
 800f406:	440b      	add	r3, r1
 800f408:	3314      	adds	r3, #20
 800f40a:	781b      	ldrb	r3, [r3, #0]
 800f40c:	2b02      	cmp	r3, #2
 800f40e:	d153      	bne.n	800f4b8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f410:	79fa      	ldrb	r2, [r7, #7]
 800f412:	4936      	ldr	r1, [pc, #216]	@ (800f4ec <etharp_output_to_arp_index+0x124>)
 800f414:	4613      	mov	r3, r2
 800f416:	005b      	lsls	r3, r3, #1
 800f418:	4413      	add	r3, r2
 800f41a:	00db      	lsls	r3, r3, #3
 800f41c:	440b      	add	r3, r1
 800f41e:	3312      	adds	r3, #18
 800f420:	881b      	ldrh	r3, [r3, #0]
 800f422:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800f426:	d919      	bls.n	800f45c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f428:	79fa      	ldrb	r2, [r7, #7]
 800f42a:	4613      	mov	r3, r2
 800f42c:	005b      	lsls	r3, r3, #1
 800f42e:	4413      	add	r3, r2
 800f430:	00db      	lsls	r3, r3, #3
 800f432:	4a2e      	ldr	r2, [pc, #184]	@ (800f4ec <etharp_output_to_arp_index+0x124>)
 800f434:	4413      	add	r3, r2
 800f436:	3304      	adds	r3, #4
 800f438:	4619      	mov	r1, r3
 800f43a:	68f8      	ldr	r0, [r7, #12]
 800f43c:	f000 fb4c 	bl	800fad8 <etharp_request>
 800f440:	4603      	mov	r3, r0
 800f442:	2b00      	cmp	r3, #0
 800f444:	d138      	bne.n	800f4b8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f446:	79fa      	ldrb	r2, [r7, #7]
 800f448:	4928      	ldr	r1, [pc, #160]	@ (800f4ec <etharp_output_to_arp_index+0x124>)
 800f44a:	4613      	mov	r3, r2
 800f44c:	005b      	lsls	r3, r3, #1
 800f44e:	4413      	add	r3, r2
 800f450:	00db      	lsls	r3, r3, #3
 800f452:	440b      	add	r3, r1
 800f454:	3314      	adds	r3, #20
 800f456:	2203      	movs	r2, #3
 800f458:	701a      	strb	r2, [r3, #0]
 800f45a:	e02d      	b.n	800f4b8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f45c:	79fa      	ldrb	r2, [r7, #7]
 800f45e:	4923      	ldr	r1, [pc, #140]	@ (800f4ec <etharp_output_to_arp_index+0x124>)
 800f460:	4613      	mov	r3, r2
 800f462:	005b      	lsls	r3, r3, #1
 800f464:	4413      	add	r3, r2
 800f466:	00db      	lsls	r3, r3, #3
 800f468:	440b      	add	r3, r1
 800f46a:	3312      	adds	r3, #18
 800f46c:	881b      	ldrh	r3, [r3, #0]
 800f46e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800f472:	d321      	bcc.n	800f4b8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f474:	79fa      	ldrb	r2, [r7, #7]
 800f476:	4613      	mov	r3, r2
 800f478:	005b      	lsls	r3, r3, #1
 800f47a:	4413      	add	r3, r2
 800f47c:	00db      	lsls	r3, r3, #3
 800f47e:	4a1b      	ldr	r2, [pc, #108]	@ (800f4ec <etharp_output_to_arp_index+0x124>)
 800f480:	4413      	add	r3, r2
 800f482:	1d19      	adds	r1, r3, #4
 800f484:	79fa      	ldrb	r2, [r7, #7]
 800f486:	4613      	mov	r3, r2
 800f488:	005b      	lsls	r3, r3, #1
 800f48a:	4413      	add	r3, r2
 800f48c:	00db      	lsls	r3, r3, #3
 800f48e:	3308      	adds	r3, #8
 800f490:	4a16      	ldr	r2, [pc, #88]	@ (800f4ec <etharp_output_to_arp_index+0x124>)
 800f492:	4413      	add	r3, r2
 800f494:	3304      	adds	r3, #4
 800f496:	461a      	mov	r2, r3
 800f498:	68f8      	ldr	r0, [r7, #12]
 800f49a:	f000 fafb 	bl	800fa94 <etharp_request_dst>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d109      	bne.n	800f4b8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f4a4:	79fa      	ldrb	r2, [r7, #7]
 800f4a6:	4911      	ldr	r1, [pc, #68]	@ (800f4ec <etharp_output_to_arp_index+0x124>)
 800f4a8:	4613      	mov	r3, r2
 800f4aa:	005b      	lsls	r3, r3, #1
 800f4ac:	4413      	add	r3, r2
 800f4ae:	00db      	lsls	r3, r3, #3
 800f4b0:	440b      	add	r3, r1
 800f4b2:	3314      	adds	r3, #20
 800f4b4:	2203      	movs	r2, #3
 800f4b6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800f4be:	79fa      	ldrb	r2, [r7, #7]
 800f4c0:	4613      	mov	r3, r2
 800f4c2:	005b      	lsls	r3, r3, #1
 800f4c4:	4413      	add	r3, r2
 800f4c6:	00db      	lsls	r3, r3, #3
 800f4c8:	3308      	adds	r3, #8
 800f4ca:	4a08      	ldr	r2, [pc, #32]	@ (800f4ec <etharp_output_to_arp_index+0x124>)
 800f4cc:	4413      	add	r3, r2
 800f4ce:	3304      	adds	r3, #4
 800f4d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f4d4:	9200      	str	r2, [sp, #0]
 800f4d6:	460a      	mov	r2, r1
 800f4d8:	68b9      	ldr	r1, [r7, #8]
 800f4da:	68f8      	ldr	r0, [r7, #12]
 800f4dc:	f001 fe40 	bl	8011160 <ethernet_output>
 800f4e0:	4603      	mov	r3, r0
}
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	3710      	adds	r7, #16
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bd80      	pop	{r7, pc}
 800f4ea:	bf00      	nop
 800f4ec:	20008608 	.word	0x20008608
 800f4f0:	080147f0 	.word	0x080147f0
 800f4f4:	08014960 	.word	0x08014960
 800f4f8:	08014868 	.word	0x08014868

0800f4fc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b08a      	sub	sp, #40	@ 0x28
 800f500:	af02      	add	r7, sp, #8
 800f502:	60f8      	str	r0, [r7, #12]
 800f504:	60b9      	str	r1, [r7, #8]
 800f506:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d106      	bne.n	800f520 <etharp_output+0x24>
 800f512:	4b73      	ldr	r3, [pc, #460]	@ (800f6e0 <etharp_output+0x1e4>)
 800f514:	f240 321e 	movw	r2, #798	@ 0x31e
 800f518:	4972      	ldr	r1, [pc, #456]	@ (800f6e4 <etharp_output+0x1e8>)
 800f51a:	4873      	ldr	r0, [pc, #460]	@ (800f6e8 <etharp_output+0x1ec>)
 800f51c:	f001 ff68 	bl	80113f0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d106      	bne.n	800f534 <etharp_output+0x38>
 800f526:	4b6e      	ldr	r3, [pc, #440]	@ (800f6e0 <etharp_output+0x1e4>)
 800f528:	f240 321f 	movw	r2, #799	@ 0x31f
 800f52c:	496f      	ldr	r1, [pc, #444]	@ (800f6ec <etharp_output+0x1f0>)
 800f52e:	486e      	ldr	r0, [pc, #440]	@ (800f6e8 <etharp_output+0x1ec>)
 800f530:	f001 ff5e 	bl	80113f0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d106      	bne.n	800f548 <etharp_output+0x4c>
 800f53a:	4b69      	ldr	r3, [pc, #420]	@ (800f6e0 <etharp_output+0x1e4>)
 800f53c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800f540:	496b      	ldr	r1, [pc, #428]	@ (800f6f0 <etharp_output+0x1f4>)
 800f542:	4869      	ldr	r0, [pc, #420]	@ (800f6e8 <etharp_output+0x1ec>)
 800f544:	f001 ff54 	bl	80113f0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	68f9      	ldr	r1, [r7, #12]
 800f54e:	4618      	mov	r0, r3
 800f550:	f000 fef8 	bl	8010344 <ip4_addr_isbroadcast_u32>
 800f554:	4603      	mov	r3, r0
 800f556:	2b00      	cmp	r3, #0
 800f558:	d002      	beq.n	800f560 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800f55a:	4b66      	ldr	r3, [pc, #408]	@ (800f6f4 <etharp_output+0x1f8>)
 800f55c:	61fb      	str	r3, [r7, #28]
 800f55e:	e0af      	b.n	800f6c0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f568:	2be0      	cmp	r3, #224	@ 0xe0
 800f56a:	d118      	bne.n	800f59e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f56c:	2301      	movs	r3, #1
 800f56e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800f570:	2300      	movs	r3, #0
 800f572:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f574:	235e      	movs	r3, #94	@ 0x5e
 800f576:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	3301      	adds	r3, #1
 800f57c:	781b      	ldrb	r3, [r3, #0]
 800f57e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f582:	b2db      	uxtb	r3, r3
 800f584:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	3302      	adds	r3, #2
 800f58a:	781b      	ldrb	r3, [r3, #0]
 800f58c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	3303      	adds	r3, #3
 800f592:	781b      	ldrb	r3, [r3, #0]
 800f594:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800f596:	f107 0310 	add.w	r3, r7, #16
 800f59a:	61fb      	str	r3, [r7, #28]
 800f59c:	e090      	b.n	800f6c0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681a      	ldr	r2, [r3, #0]
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	3304      	adds	r3, #4
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	405a      	eors	r2, r3
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	3308      	adds	r3, #8
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	4013      	ands	r3, r2
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d012      	beq.n	800f5dc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f5bc:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800f5c0:	4293      	cmp	r3, r2
 800f5c2:	d00b      	beq.n	800f5dc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	330c      	adds	r3, #12
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d003      	beq.n	800f5d6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	330c      	adds	r3, #12
 800f5d2:	61bb      	str	r3, [r7, #24]
 800f5d4:	e002      	b.n	800f5dc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800f5d6:	f06f 0303 	mvn.w	r3, #3
 800f5da:	e07d      	b.n	800f6d8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f5dc:	4b46      	ldr	r3, [pc, #280]	@ (800f6f8 <etharp_output+0x1fc>)
 800f5de:	781b      	ldrb	r3, [r3, #0]
 800f5e0:	4619      	mov	r1, r3
 800f5e2:	4a46      	ldr	r2, [pc, #280]	@ (800f6fc <etharp_output+0x200>)
 800f5e4:	460b      	mov	r3, r1
 800f5e6:	005b      	lsls	r3, r3, #1
 800f5e8:	440b      	add	r3, r1
 800f5ea:	00db      	lsls	r3, r3, #3
 800f5ec:	4413      	add	r3, r2
 800f5ee:	3314      	adds	r3, #20
 800f5f0:	781b      	ldrb	r3, [r3, #0]
 800f5f2:	2b01      	cmp	r3, #1
 800f5f4:	d925      	bls.n	800f642 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f5f6:	4b40      	ldr	r3, [pc, #256]	@ (800f6f8 <etharp_output+0x1fc>)
 800f5f8:	781b      	ldrb	r3, [r3, #0]
 800f5fa:	4619      	mov	r1, r3
 800f5fc:	4a3f      	ldr	r2, [pc, #252]	@ (800f6fc <etharp_output+0x200>)
 800f5fe:	460b      	mov	r3, r1
 800f600:	005b      	lsls	r3, r3, #1
 800f602:	440b      	add	r3, r1
 800f604:	00db      	lsls	r3, r3, #3
 800f606:	4413      	add	r3, r2
 800f608:	3308      	adds	r3, #8
 800f60a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f60c:	68fa      	ldr	r2, [r7, #12]
 800f60e:	429a      	cmp	r2, r3
 800f610:	d117      	bne.n	800f642 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800f612:	69bb      	ldr	r3, [r7, #24]
 800f614:	681a      	ldr	r2, [r3, #0]
 800f616:	4b38      	ldr	r3, [pc, #224]	@ (800f6f8 <etharp_output+0x1fc>)
 800f618:	781b      	ldrb	r3, [r3, #0]
 800f61a:	4618      	mov	r0, r3
 800f61c:	4937      	ldr	r1, [pc, #220]	@ (800f6fc <etharp_output+0x200>)
 800f61e:	4603      	mov	r3, r0
 800f620:	005b      	lsls	r3, r3, #1
 800f622:	4403      	add	r3, r0
 800f624:	00db      	lsls	r3, r3, #3
 800f626:	440b      	add	r3, r1
 800f628:	3304      	adds	r3, #4
 800f62a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800f62c:	429a      	cmp	r2, r3
 800f62e:	d108      	bne.n	800f642 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800f630:	4b31      	ldr	r3, [pc, #196]	@ (800f6f8 <etharp_output+0x1fc>)
 800f632:	781b      	ldrb	r3, [r3, #0]
 800f634:	461a      	mov	r2, r3
 800f636:	68b9      	ldr	r1, [r7, #8]
 800f638:	68f8      	ldr	r0, [r7, #12]
 800f63a:	f7ff fec5 	bl	800f3c8 <etharp_output_to_arp_index>
 800f63e:	4603      	mov	r3, r0
 800f640:	e04a      	b.n	800f6d8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f642:	2300      	movs	r3, #0
 800f644:	75fb      	strb	r3, [r7, #23]
 800f646:	e031      	b.n	800f6ac <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f648:	7dfa      	ldrb	r2, [r7, #23]
 800f64a:	492c      	ldr	r1, [pc, #176]	@ (800f6fc <etharp_output+0x200>)
 800f64c:	4613      	mov	r3, r2
 800f64e:	005b      	lsls	r3, r3, #1
 800f650:	4413      	add	r3, r2
 800f652:	00db      	lsls	r3, r3, #3
 800f654:	440b      	add	r3, r1
 800f656:	3314      	adds	r3, #20
 800f658:	781b      	ldrb	r3, [r3, #0]
 800f65a:	2b01      	cmp	r3, #1
 800f65c:	d923      	bls.n	800f6a6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800f65e:	7dfa      	ldrb	r2, [r7, #23]
 800f660:	4926      	ldr	r1, [pc, #152]	@ (800f6fc <etharp_output+0x200>)
 800f662:	4613      	mov	r3, r2
 800f664:	005b      	lsls	r3, r3, #1
 800f666:	4413      	add	r3, r2
 800f668:	00db      	lsls	r3, r3, #3
 800f66a:	440b      	add	r3, r1
 800f66c:	3308      	adds	r3, #8
 800f66e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f670:	68fa      	ldr	r2, [r7, #12]
 800f672:	429a      	cmp	r2, r3
 800f674:	d117      	bne.n	800f6a6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f676:	69bb      	ldr	r3, [r7, #24]
 800f678:	6819      	ldr	r1, [r3, #0]
 800f67a:	7dfa      	ldrb	r2, [r7, #23]
 800f67c:	481f      	ldr	r0, [pc, #124]	@ (800f6fc <etharp_output+0x200>)
 800f67e:	4613      	mov	r3, r2
 800f680:	005b      	lsls	r3, r3, #1
 800f682:	4413      	add	r3, r2
 800f684:	00db      	lsls	r3, r3, #3
 800f686:	4403      	add	r3, r0
 800f688:	3304      	adds	r3, #4
 800f68a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800f68c:	4299      	cmp	r1, r3
 800f68e:	d10a      	bne.n	800f6a6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800f690:	4a19      	ldr	r2, [pc, #100]	@ (800f6f8 <etharp_output+0x1fc>)
 800f692:	7dfb      	ldrb	r3, [r7, #23]
 800f694:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f696:	7dfb      	ldrb	r3, [r7, #23]
 800f698:	461a      	mov	r2, r3
 800f69a:	68b9      	ldr	r1, [r7, #8]
 800f69c:	68f8      	ldr	r0, [r7, #12]
 800f69e:	f7ff fe93 	bl	800f3c8 <etharp_output_to_arp_index>
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	e018      	b.n	800f6d8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f6a6:	7dfb      	ldrb	r3, [r7, #23]
 800f6a8:	3301      	adds	r3, #1
 800f6aa:	75fb      	strb	r3, [r7, #23]
 800f6ac:	7dfb      	ldrb	r3, [r7, #23]
 800f6ae:	2b09      	cmp	r3, #9
 800f6b0:	d9ca      	bls.n	800f648 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f6b2:	68ba      	ldr	r2, [r7, #8]
 800f6b4:	69b9      	ldr	r1, [r7, #24]
 800f6b6:	68f8      	ldr	r0, [r7, #12]
 800f6b8:	f000 f822 	bl	800f700 <etharp_query>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	e00b      	b.n	800f6d8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800f6c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f6ca:	9300      	str	r3, [sp, #0]
 800f6cc:	69fb      	ldr	r3, [r7, #28]
 800f6ce:	68b9      	ldr	r1, [r7, #8]
 800f6d0:	68f8      	ldr	r0, [r7, #12]
 800f6d2:	f001 fd45 	bl	8011160 <ethernet_output>
 800f6d6:	4603      	mov	r3, r0
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	3720      	adds	r7, #32
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bd80      	pop	{r7, pc}
 800f6e0:	080147f0 	.word	0x080147f0
 800f6e4:	08014940 	.word	0x08014940
 800f6e8:	08014868 	.word	0x08014868
 800f6ec:	08014990 	.word	0x08014990
 800f6f0:	08014930 	.word	0x08014930
 800f6f4:	08015418 	.word	0x08015418
 800f6f8:	200086f8 	.word	0x200086f8
 800f6fc:	20008608 	.word	0x20008608

0800f700 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b08c      	sub	sp, #48	@ 0x30
 800f704:	af02      	add	r7, sp, #8
 800f706:	60f8      	str	r0, [r7, #12]
 800f708:	60b9      	str	r1, [r7, #8]
 800f70a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	3326      	adds	r3, #38	@ 0x26
 800f710:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800f712:	23ff      	movs	r3, #255	@ 0xff
 800f714:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800f718:	2300      	movs	r3, #0
 800f71a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f71c:	68bb      	ldr	r3, [r7, #8]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	68f9      	ldr	r1, [r7, #12]
 800f722:	4618      	mov	r0, r3
 800f724:	f000 fe0e 	bl	8010344 <ip4_addr_isbroadcast_u32>
 800f728:	4603      	mov	r3, r0
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d10c      	bne.n	800f748 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f72e:	68bb      	ldr	r3, [r7, #8]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f736:	2be0      	cmp	r3, #224	@ 0xe0
 800f738:	d006      	beq.n	800f748 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f73a:	68bb      	ldr	r3, [r7, #8]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d003      	beq.n	800f748 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800f740:	68bb      	ldr	r3, [r7, #8]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d102      	bne.n	800f74e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f748:	f06f 030f 	mvn.w	r3, #15
 800f74c:	e101      	b.n	800f952 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f74e:	68fa      	ldr	r2, [r7, #12]
 800f750:	2101      	movs	r1, #1
 800f752:	68b8      	ldr	r0, [r7, #8]
 800f754:	f7ff fb60 	bl	800ee18 <etharp_find_entry>
 800f758:	4603      	mov	r3, r0
 800f75a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800f75c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f760:	2b00      	cmp	r3, #0
 800f762:	da02      	bge.n	800f76a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800f764:	8a7b      	ldrh	r3, [r7, #18]
 800f766:	b25b      	sxtb	r3, r3
 800f768:	e0f3      	b.n	800f952 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f76a:	8a7b      	ldrh	r3, [r7, #18]
 800f76c:	2b7e      	cmp	r3, #126	@ 0x7e
 800f76e:	d906      	bls.n	800f77e <etharp_query+0x7e>
 800f770:	4b7a      	ldr	r3, [pc, #488]	@ (800f95c <etharp_query+0x25c>)
 800f772:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800f776:	497a      	ldr	r1, [pc, #488]	@ (800f960 <etharp_query+0x260>)
 800f778:	487a      	ldr	r0, [pc, #488]	@ (800f964 <etharp_query+0x264>)
 800f77a:	f001 fe39 	bl	80113f0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800f77e:	8a7b      	ldrh	r3, [r7, #18]
 800f780:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f782:	7c7a      	ldrb	r2, [r7, #17]
 800f784:	4978      	ldr	r1, [pc, #480]	@ (800f968 <etharp_query+0x268>)
 800f786:	4613      	mov	r3, r2
 800f788:	005b      	lsls	r3, r3, #1
 800f78a:	4413      	add	r3, r2
 800f78c:	00db      	lsls	r3, r3, #3
 800f78e:	440b      	add	r3, r1
 800f790:	3314      	adds	r3, #20
 800f792:	781b      	ldrb	r3, [r3, #0]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d115      	bne.n	800f7c4 <etharp_query+0xc4>
    is_new_entry = 1;
 800f798:	2301      	movs	r3, #1
 800f79a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f79c:	7c7a      	ldrb	r2, [r7, #17]
 800f79e:	4972      	ldr	r1, [pc, #456]	@ (800f968 <etharp_query+0x268>)
 800f7a0:	4613      	mov	r3, r2
 800f7a2:	005b      	lsls	r3, r3, #1
 800f7a4:	4413      	add	r3, r2
 800f7a6:	00db      	lsls	r3, r3, #3
 800f7a8:	440b      	add	r3, r1
 800f7aa:	3314      	adds	r3, #20
 800f7ac:	2201      	movs	r2, #1
 800f7ae:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800f7b0:	7c7a      	ldrb	r2, [r7, #17]
 800f7b2:	496d      	ldr	r1, [pc, #436]	@ (800f968 <etharp_query+0x268>)
 800f7b4:	4613      	mov	r3, r2
 800f7b6:	005b      	lsls	r3, r3, #1
 800f7b8:	4413      	add	r3, r2
 800f7ba:	00db      	lsls	r3, r3, #3
 800f7bc:	440b      	add	r3, r1
 800f7be:	3308      	adds	r3, #8
 800f7c0:	68fa      	ldr	r2, [r7, #12]
 800f7c2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f7c4:	7c7a      	ldrb	r2, [r7, #17]
 800f7c6:	4968      	ldr	r1, [pc, #416]	@ (800f968 <etharp_query+0x268>)
 800f7c8:	4613      	mov	r3, r2
 800f7ca:	005b      	lsls	r3, r3, #1
 800f7cc:	4413      	add	r3, r2
 800f7ce:	00db      	lsls	r3, r3, #3
 800f7d0:	440b      	add	r3, r1
 800f7d2:	3314      	adds	r3, #20
 800f7d4:	781b      	ldrb	r3, [r3, #0]
 800f7d6:	2b01      	cmp	r3, #1
 800f7d8:	d011      	beq.n	800f7fe <etharp_query+0xfe>
 800f7da:	7c7a      	ldrb	r2, [r7, #17]
 800f7dc:	4962      	ldr	r1, [pc, #392]	@ (800f968 <etharp_query+0x268>)
 800f7de:	4613      	mov	r3, r2
 800f7e0:	005b      	lsls	r3, r3, #1
 800f7e2:	4413      	add	r3, r2
 800f7e4:	00db      	lsls	r3, r3, #3
 800f7e6:	440b      	add	r3, r1
 800f7e8:	3314      	adds	r3, #20
 800f7ea:	781b      	ldrb	r3, [r3, #0]
 800f7ec:	2b01      	cmp	r3, #1
 800f7ee:	d806      	bhi.n	800f7fe <etharp_query+0xfe>
 800f7f0:	4b5a      	ldr	r3, [pc, #360]	@ (800f95c <etharp_query+0x25c>)
 800f7f2:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800f7f6:	495d      	ldr	r1, [pc, #372]	@ (800f96c <etharp_query+0x26c>)
 800f7f8:	485a      	ldr	r0, [pc, #360]	@ (800f964 <etharp_query+0x264>)
 800f7fa:	f001 fdf9 	bl	80113f0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800f7fe:	6a3b      	ldr	r3, [r7, #32]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d102      	bne.n	800f80a <etharp_query+0x10a>
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d10c      	bne.n	800f824 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800f80a:	68b9      	ldr	r1, [r7, #8]
 800f80c:	68f8      	ldr	r0, [r7, #12]
 800f80e:	f000 f963 	bl	800fad8 <etharp_request>
 800f812:	4603      	mov	r3, r0
 800f814:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d102      	bne.n	800f824 <etharp_query+0x124>
      return result;
 800f81e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800f822:	e096      	b.n	800f952 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d106      	bne.n	800f838 <etharp_query+0x138>
 800f82a:	4b4c      	ldr	r3, [pc, #304]	@ (800f95c <etharp_query+0x25c>)
 800f82c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800f830:	494f      	ldr	r1, [pc, #316]	@ (800f970 <etharp_query+0x270>)
 800f832:	484c      	ldr	r0, [pc, #304]	@ (800f964 <etharp_query+0x264>)
 800f834:	f001 fddc 	bl	80113f0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f838:	7c7a      	ldrb	r2, [r7, #17]
 800f83a:	494b      	ldr	r1, [pc, #300]	@ (800f968 <etharp_query+0x268>)
 800f83c:	4613      	mov	r3, r2
 800f83e:	005b      	lsls	r3, r3, #1
 800f840:	4413      	add	r3, r2
 800f842:	00db      	lsls	r3, r3, #3
 800f844:	440b      	add	r3, r1
 800f846:	3314      	adds	r3, #20
 800f848:	781b      	ldrb	r3, [r3, #0]
 800f84a:	2b01      	cmp	r3, #1
 800f84c:	d917      	bls.n	800f87e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800f84e:	4a49      	ldr	r2, [pc, #292]	@ (800f974 <etharp_query+0x274>)
 800f850:	7c7b      	ldrb	r3, [r7, #17]
 800f852:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f854:	7c7a      	ldrb	r2, [r7, #17]
 800f856:	4613      	mov	r3, r2
 800f858:	005b      	lsls	r3, r3, #1
 800f85a:	4413      	add	r3, r2
 800f85c:	00db      	lsls	r3, r3, #3
 800f85e:	3308      	adds	r3, #8
 800f860:	4a41      	ldr	r2, [pc, #260]	@ (800f968 <etharp_query+0x268>)
 800f862:	4413      	add	r3, r2
 800f864:	3304      	adds	r3, #4
 800f866:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f86a:	9200      	str	r2, [sp, #0]
 800f86c:	697a      	ldr	r2, [r7, #20]
 800f86e:	6879      	ldr	r1, [r7, #4]
 800f870:	68f8      	ldr	r0, [r7, #12]
 800f872:	f001 fc75 	bl	8011160 <ethernet_output>
 800f876:	4603      	mov	r3, r0
 800f878:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f87c:	e067      	b.n	800f94e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f87e:	7c7a      	ldrb	r2, [r7, #17]
 800f880:	4939      	ldr	r1, [pc, #228]	@ (800f968 <etharp_query+0x268>)
 800f882:	4613      	mov	r3, r2
 800f884:	005b      	lsls	r3, r3, #1
 800f886:	4413      	add	r3, r2
 800f888:	00db      	lsls	r3, r3, #3
 800f88a:	440b      	add	r3, r1
 800f88c:	3314      	adds	r3, #20
 800f88e:	781b      	ldrb	r3, [r3, #0]
 800f890:	2b01      	cmp	r3, #1
 800f892:	d15c      	bne.n	800f94e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800f894:	2300      	movs	r3, #0
 800f896:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f89c:	e01c      	b.n	800f8d8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f89e:	69fb      	ldr	r3, [r7, #28]
 800f8a0:	895a      	ldrh	r2, [r3, #10]
 800f8a2:	69fb      	ldr	r3, [r7, #28]
 800f8a4:	891b      	ldrh	r3, [r3, #8]
 800f8a6:	429a      	cmp	r2, r3
 800f8a8:	d10a      	bne.n	800f8c0 <etharp_query+0x1c0>
 800f8aa:	69fb      	ldr	r3, [r7, #28]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d006      	beq.n	800f8c0 <etharp_query+0x1c0>
 800f8b2:	4b2a      	ldr	r3, [pc, #168]	@ (800f95c <etharp_query+0x25c>)
 800f8b4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800f8b8:	492f      	ldr	r1, [pc, #188]	@ (800f978 <etharp_query+0x278>)
 800f8ba:	482a      	ldr	r0, [pc, #168]	@ (800f964 <etharp_query+0x264>)
 800f8bc:	f001 fd98 	bl	80113f0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800f8c0:	69fb      	ldr	r3, [r7, #28]
 800f8c2:	7b1b      	ldrb	r3, [r3, #12]
 800f8c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d002      	beq.n	800f8d2 <etharp_query+0x1d2>
        copy_needed = 1;
 800f8cc:	2301      	movs	r3, #1
 800f8ce:	61bb      	str	r3, [r7, #24]
        break;
 800f8d0:	e005      	b.n	800f8de <etharp_query+0x1de>
      }
      p = p->next;
 800f8d2:	69fb      	ldr	r3, [r7, #28]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f8d8:	69fb      	ldr	r3, [r7, #28]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d1df      	bne.n	800f89e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800f8de:	69bb      	ldr	r3, [r7, #24]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d007      	beq.n	800f8f4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800f8e4:	687a      	ldr	r2, [r7, #4]
 800f8e6:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800f8ea:	200e      	movs	r0, #14
 800f8ec:	f7f8 fe2e 	bl	800854c <pbuf_clone>
 800f8f0:	61f8      	str	r0, [r7, #28]
 800f8f2:	e004      	b.n	800f8fe <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800f8f8:	69f8      	ldr	r0, [r7, #28]
 800f8fa:	f7f8 fc6b 	bl	80081d4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800f8fe:	69fb      	ldr	r3, [r7, #28]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d021      	beq.n	800f948 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800f904:	7c7a      	ldrb	r2, [r7, #17]
 800f906:	4918      	ldr	r1, [pc, #96]	@ (800f968 <etharp_query+0x268>)
 800f908:	4613      	mov	r3, r2
 800f90a:	005b      	lsls	r3, r3, #1
 800f90c:	4413      	add	r3, r2
 800f90e:	00db      	lsls	r3, r3, #3
 800f910:	440b      	add	r3, r1
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d00a      	beq.n	800f92e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800f918:	7c7a      	ldrb	r2, [r7, #17]
 800f91a:	4913      	ldr	r1, [pc, #76]	@ (800f968 <etharp_query+0x268>)
 800f91c:	4613      	mov	r3, r2
 800f91e:	005b      	lsls	r3, r3, #1
 800f920:	4413      	add	r3, r2
 800f922:	00db      	lsls	r3, r3, #3
 800f924:	440b      	add	r3, r1
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	4618      	mov	r0, r3
 800f92a:	f7f8 fbb3 	bl	8008094 <pbuf_free>
      }
      arp_table[i].q = p;
 800f92e:	7c7a      	ldrb	r2, [r7, #17]
 800f930:	490d      	ldr	r1, [pc, #52]	@ (800f968 <etharp_query+0x268>)
 800f932:	4613      	mov	r3, r2
 800f934:	005b      	lsls	r3, r3, #1
 800f936:	4413      	add	r3, r2
 800f938:	00db      	lsls	r3, r3, #3
 800f93a:	440b      	add	r3, r1
 800f93c:	69fa      	ldr	r2, [r7, #28]
 800f93e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800f940:	2300      	movs	r3, #0
 800f942:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800f946:	e002      	b.n	800f94e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800f948:	23ff      	movs	r3, #255	@ 0xff
 800f94a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800f94e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800f952:	4618      	mov	r0, r3
 800f954:	3728      	adds	r7, #40	@ 0x28
 800f956:	46bd      	mov	sp, r7
 800f958:	bd80      	pop	{r7, pc}
 800f95a:	bf00      	nop
 800f95c:	080147f0 	.word	0x080147f0
 800f960:	0801499c 	.word	0x0801499c
 800f964:	08014868 	.word	0x08014868
 800f968:	20008608 	.word	0x20008608
 800f96c:	080149ac 	.word	0x080149ac
 800f970:	08014990 	.word	0x08014990
 800f974:	200086f8 	.word	0x200086f8
 800f978:	080149d4 	.word	0x080149d4

0800f97c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b08a      	sub	sp, #40	@ 0x28
 800f980:	af02      	add	r7, sp, #8
 800f982:	60f8      	str	r0, [r7, #12]
 800f984:	60b9      	str	r1, [r7, #8]
 800f986:	607a      	str	r2, [r7, #4]
 800f988:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800f98a:	2300      	movs	r3, #0
 800f98c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d106      	bne.n	800f9a2 <etharp_raw+0x26>
 800f994:	4b3a      	ldr	r3, [pc, #232]	@ (800fa80 <etharp_raw+0x104>)
 800f996:	f240 4257 	movw	r2, #1111	@ 0x457
 800f99a:	493a      	ldr	r1, [pc, #232]	@ (800fa84 <etharp_raw+0x108>)
 800f99c:	483a      	ldr	r0, [pc, #232]	@ (800fa88 <etharp_raw+0x10c>)
 800f99e:	f001 fd27 	bl	80113f0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f9a2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f9a6:	211c      	movs	r1, #28
 800f9a8:	200e      	movs	r0, #14
 800f9aa:	f7f8 f88f 	bl	8007acc <pbuf_alloc>
 800f9ae:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f9b0:	69bb      	ldr	r3, [r7, #24]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d102      	bne.n	800f9bc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800f9b6:	f04f 33ff 	mov.w	r3, #4294967295
 800f9ba:	e05d      	b.n	800fa78 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f9bc:	69bb      	ldr	r3, [r7, #24]
 800f9be:	895b      	ldrh	r3, [r3, #10]
 800f9c0:	2b1b      	cmp	r3, #27
 800f9c2:	d806      	bhi.n	800f9d2 <etharp_raw+0x56>
 800f9c4:	4b2e      	ldr	r3, [pc, #184]	@ (800fa80 <etharp_raw+0x104>)
 800f9c6:	f240 4262 	movw	r2, #1122	@ 0x462
 800f9ca:	4930      	ldr	r1, [pc, #192]	@ (800fa8c <etharp_raw+0x110>)
 800f9cc:	482e      	ldr	r0, [pc, #184]	@ (800fa88 <etharp_raw+0x10c>)
 800f9ce:	f001 fd0f 	bl	80113f0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f9d2:	69bb      	ldr	r3, [r7, #24]
 800f9d4:	685b      	ldr	r3, [r3, #4]
 800f9d6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f9d8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f7f6 ffca 	bl	8006974 <lwip_htons>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	461a      	mov	r2, r3
 800f9e4:	697b      	ldr	r3, [r7, #20]
 800f9e6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800f9ee:	2b06      	cmp	r3, #6
 800f9f0:	d006      	beq.n	800fa00 <etharp_raw+0x84>
 800f9f2:	4b23      	ldr	r3, [pc, #140]	@ (800fa80 <etharp_raw+0x104>)
 800f9f4:	f240 4269 	movw	r2, #1129	@ 0x469
 800f9f8:	4925      	ldr	r1, [pc, #148]	@ (800fa90 <etharp_raw+0x114>)
 800f9fa:	4823      	ldr	r0, [pc, #140]	@ (800fa88 <etharp_raw+0x10c>)
 800f9fc:	f001 fcf8 	bl	80113f0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800fa00:	697b      	ldr	r3, [r7, #20]
 800fa02:	3308      	adds	r3, #8
 800fa04:	2206      	movs	r2, #6
 800fa06:	6839      	ldr	r1, [r7, #0]
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f001 fdea 	bl	80115e2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800fa0e:	697b      	ldr	r3, [r7, #20]
 800fa10:	3312      	adds	r3, #18
 800fa12:	2206      	movs	r2, #6
 800fa14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fa16:	4618      	mov	r0, r3
 800fa18:	f001 fde3 	bl	80115e2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800fa1c:	697b      	ldr	r3, [r7, #20]
 800fa1e:	330e      	adds	r3, #14
 800fa20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fa22:	6812      	ldr	r2, [r2, #0]
 800fa24:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800fa26:	697b      	ldr	r3, [r7, #20]
 800fa28:	3318      	adds	r3, #24
 800fa2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fa2c:	6812      	ldr	r2, [r2, #0]
 800fa2e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800fa30:	697b      	ldr	r3, [r7, #20]
 800fa32:	2200      	movs	r2, #0
 800fa34:	701a      	strb	r2, [r3, #0]
 800fa36:	2200      	movs	r2, #0
 800fa38:	f042 0201 	orr.w	r2, r2, #1
 800fa3c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800fa3e:	697b      	ldr	r3, [r7, #20]
 800fa40:	2200      	movs	r2, #0
 800fa42:	f042 0208 	orr.w	r2, r2, #8
 800fa46:	709a      	strb	r2, [r3, #2]
 800fa48:	2200      	movs	r2, #0
 800fa4a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800fa4c:	697b      	ldr	r3, [r7, #20]
 800fa4e:	2206      	movs	r2, #6
 800fa50:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	2204      	movs	r2, #4
 800fa56:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800fa58:	f640 0306 	movw	r3, #2054	@ 0x806
 800fa5c:	9300      	str	r3, [sp, #0]
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	68ba      	ldr	r2, [r7, #8]
 800fa62:	69b9      	ldr	r1, [r7, #24]
 800fa64:	68f8      	ldr	r0, [r7, #12]
 800fa66:	f001 fb7b 	bl	8011160 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800fa6a:	69b8      	ldr	r0, [r7, #24]
 800fa6c:	f7f8 fb12 	bl	8008094 <pbuf_free>
  p = NULL;
 800fa70:	2300      	movs	r3, #0
 800fa72:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800fa74:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fa78:	4618      	mov	r0, r3
 800fa7a:	3720      	adds	r7, #32
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}
 800fa80:	080147f0 	.word	0x080147f0
 800fa84:	08014940 	.word	0x08014940
 800fa88:	08014868 	.word	0x08014868
 800fa8c:	080149f0 	.word	0x080149f0
 800fa90:	08014a24 	.word	0x08014a24

0800fa94 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b088      	sub	sp, #32
 800fa98:	af04      	add	r7, sp, #16
 800fa9a:	60f8      	str	r0, [r7, #12]
 800fa9c:	60b9      	str	r1, [r7, #8]
 800fa9e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800fab0:	2201      	movs	r2, #1
 800fab2:	9203      	str	r2, [sp, #12]
 800fab4:	68ba      	ldr	r2, [r7, #8]
 800fab6:	9202      	str	r2, [sp, #8]
 800fab8:	4a06      	ldr	r2, [pc, #24]	@ (800fad4 <etharp_request_dst+0x40>)
 800faba:	9201      	str	r2, [sp, #4]
 800fabc:	9300      	str	r3, [sp, #0]
 800fabe:	4603      	mov	r3, r0
 800fac0:	687a      	ldr	r2, [r7, #4]
 800fac2:	68f8      	ldr	r0, [r7, #12]
 800fac4:	f7ff ff5a 	bl	800f97c <etharp_raw>
 800fac8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800faca:	4618      	mov	r0, r3
 800facc:	3710      	adds	r7, #16
 800face:	46bd      	mov	sp, r7
 800fad0:	bd80      	pop	{r7, pc}
 800fad2:	bf00      	nop
 800fad4:	08015420 	.word	0x08015420

0800fad8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b082      	sub	sp, #8
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
 800fae0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800fae2:	4a05      	ldr	r2, [pc, #20]	@ (800faf8 <etharp_request+0x20>)
 800fae4:	6839      	ldr	r1, [r7, #0]
 800fae6:	6878      	ldr	r0, [r7, #4]
 800fae8:	f7ff ffd4 	bl	800fa94 <etharp_request_dst>
 800faec:	4603      	mov	r3, r0
}
 800faee:	4618      	mov	r0, r3
 800faf0:	3708      	adds	r7, #8
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bd80      	pop	{r7, pc}
 800faf6:	bf00      	nop
 800faf8:	08015418 	.word	0x08015418

0800fafc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b08e      	sub	sp, #56	@ 0x38
 800fb00:	af04      	add	r7, sp, #16
 800fb02:	6078      	str	r0, [r7, #4]
 800fb04:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800fb06:	4b79      	ldr	r3, [pc, #484]	@ (800fcec <icmp_input+0x1f0>)
 800fb08:	689b      	ldr	r3, [r3, #8]
 800fb0a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800fb0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb0e:	781b      	ldrb	r3, [r3, #0]
 800fb10:	f003 030f 	and.w	r3, r3, #15
 800fb14:	b2db      	uxtb	r3, r3
 800fb16:	009b      	lsls	r3, r3, #2
 800fb18:	b2db      	uxtb	r3, r3
 800fb1a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800fb1c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fb1e:	2b13      	cmp	r3, #19
 800fb20:	f240 80cd 	bls.w	800fcbe <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	895b      	ldrh	r3, [r3, #10]
 800fb28:	2b03      	cmp	r3, #3
 800fb2a:	f240 80ca 	bls.w	800fcc2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	685b      	ldr	r3, [r3, #4]
 800fb32:	781b      	ldrb	r3, [r3, #0]
 800fb34:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800fb38:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	f000 80b7 	beq.w	800fcb0 <icmp_input+0x1b4>
 800fb42:	2b08      	cmp	r3, #8
 800fb44:	f040 80b7 	bne.w	800fcb6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800fb48:	4b69      	ldr	r3, [pc, #420]	@ (800fcf0 <icmp_input+0x1f4>)
 800fb4a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fb4c:	4b67      	ldr	r3, [pc, #412]	@ (800fcec <icmp_input+0x1f0>)
 800fb4e:	695b      	ldr	r3, [r3, #20]
 800fb50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fb54:	2be0      	cmp	r3, #224	@ 0xe0
 800fb56:	f000 80bb 	beq.w	800fcd0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800fb5a:	4b64      	ldr	r3, [pc, #400]	@ (800fcec <icmp_input+0x1f0>)
 800fb5c:	695b      	ldr	r3, [r3, #20]
 800fb5e:	4a63      	ldr	r2, [pc, #396]	@ (800fcec <icmp_input+0x1f0>)
 800fb60:	6812      	ldr	r2, [r2, #0]
 800fb62:	4611      	mov	r1, r2
 800fb64:	4618      	mov	r0, r3
 800fb66:	f000 fbed 	bl	8010344 <ip4_addr_isbroadcast_u32>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	f040 80b1 	bne.w	800fcd4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	891b      	ldrh	r3, [r3, #8]
 800fb76:	2b07      	cmp	r3, #7
 800fb78:	f240 80a5 	bls.w	800fcc6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fb7c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fb7e:	330e      	adds	r3, #14
 800fb80:	4619      	mov	r1, r3
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f7f8 f9f0 	bl	8007f68 <pbuf_add_header>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d04b      	beq.n	800fc26 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	891a      	ldrh	r2, [r3, #8]
 800fb92:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fb94:	4413      	add	r3, r2
 800fb96:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	891b      	ldrh	r3, [r3, #8]
 800fb9c:	8b7a      	ldrh	r2, [r7, #26]
 800fb9e:	429a      	cmp	r2, r3
 800fba0:	f0c0 809a 	bcc.w	800fcd8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800fba4:	8b7b      	ldrh	r3, [r7, #26]
 800fba6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fbaa:	4619      	mov	r1, r3
 800fbac:	200e      	movs	r0, #14
 800fbae:	f7f7 ff8d 	bl	8007acc <pbuf_alloc>
 800fbb2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800fbb4:	697b      	ldr	r3, [r7, #20]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	f000 8090 	beq.w	800fcdc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800fbbc:	697b      	ldr	r3, [r7, #20]
 800fbbe:	895b      	ldrh	r3, [r3, #10]
 800fbc0:	461a      	mov	r2, r3
 800fbc2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fbc4:	3308      	adds	r3, #8
 800fbc6:	429a      	cmp	r2, r3
 800fbc8:	d203      	bcs.n	800fbd2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800fbca:	6978      	ldr	r0, [r7, #20]
 800fbcc:	f7f8 fa62 	bl	8008094 <pbuf_free>
          goto icmperr;
 800fbd0:	e085      	b.n	800fcde <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800fbd2:	697b      	ldr	r3, [r7, #20]
 800fbd4:	685b      	ldr	r3, [r3, #4]
 800fbd6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800fbd8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fbda:	4618      	mov	r0, r3
 800fbdc:	f001 fd01 	bl	80115e2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800fbe0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fbe2:	4619      	mov	r1, r3
 800fbe4:	6978      	ldr	r0, [r7, #20]
 800fbe6:	f7f8 f9cf 	bl	8007f88 <pbuf_remove_header>
 800fbea:	4603      	mov	r3, r0
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d009      	beq.n	800fc04 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800fbf0:	4b40      	ldr	r3, [pc, #256]	@ (800fcf4 <icmp_input+0x1f8>)
 800fbf2:	22b6      	movs	r2, #182	@ 0xb6
 800fbf4:	4940      	ldr	r1, [pc, #256]	@ (800fcf8 <icmp_input+0x1fc>)
 800fbf6:	4841      	ldr	r0, [pc, #260]	@ (800fcfc <icmp_input+0x200>)
 800fbf8:	f001 fbfa 	bl	80113f0 <iprintf>
          pbuf_free(r);
 800fbfc:	6978      	ldr	r0, [r7, #20]
 800fbfe:	f7f8 fa49 	bl	8008094 <pbuf_free>
          goto icmperr;
 800fc02:	e06c      	b.n	800fcde <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800fc04:	6879      	ldr	r1, [r7, #4]
 800fc06:	6978      	ldr	r0, [r7, #20]
 800fc08:	f7f8 fb5c 	bl	80082c4 <pbuf_copy>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d003      	beq.n	800fc1a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800fc12:	6978      	ldr	r0, [r7, #20]
 800fc14:	f7f8 fa3e 	bl	8008094 <pbuf_free>
          goto icmperr;
 800fc18:	e061      	b.n	800fcde <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800fc1a:	6878      	ldr	r0, [r7, #4]
 800fc1c:	f7f8 fa3a 	bl	8008094 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800fc20:	697b      	ldr	r3, [r7, #20]
 800fc22:	607b      	str	r3, [r7, #4]
 800fc24:	e00f      	b.n	800fc46 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fc26:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fc28:	330e      	adds	r3, #14
 800fc2a:	4619      	mov	r1, r3
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	f7f8 f9ab 	bl	8007f88 <pbuf_remove_header>
 800fc32:	4603      	mov	r3, r0
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d006      	beq.n	800fc46 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800fc38:	4b2e      	ldr	r3, [pc, #184]	@ (800fcf4 <icmp_input+0x1f8>)
 800fc3a:	22c7      	movs	r2, #199	@ 0xc7
 800fc3c:	4930      	ldr	r1, [pc, #192]	@ (800fd00 <icmp_input+0x204>)
 800fc3e:	482f      	ldr	r0, [pc, #188]	@ (800fcfc <icmp_input+0x200>)
 800fc40:	f001 fbd6 	bl	80113f0 <iprintf>
          goto icmperr;
 800fc44:	e04b      	b.n	800fcde <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	685b      	ldr	r3, [r3, #4]
 800fc4a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800fc4c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fc4e:	4619      	mov	r1, r3
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	f7f8 f989 	bl	8007f68 <pbuf_add_header>
 800fc56:	4603      	mov	r3, r0
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d12b      	bne.n	800fcb4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	685b      	ldr	r3, [r3, #4]
 800fc60:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800fc62:	69fb      	ldr	r3, [r7, #28]
 800fc64:	681a      	ldr	r2, [r3, #0]
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800fc6a:	4b20      	ldr	r3, [pc, #128]	@ (800fcec <icmp_input+0x1f0>)
 800fc6c:	691a      	ldr	r2, [r3, #16]
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800fc72:	693b      	ldr	r3, [r7, #16]
 800fc74:	2200      	movs	r2, #0
 800fc76:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800fc78:	693b      	ldr	r3, [r7, #16]
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	709a      	strb	r2, [r3, #2]
 800fc7e:	2200      	movs	r2, #0
 800fc80:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	22ff      	movs	r2, #255	@ 0xff
 800fc86:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	729a      	strb	r2, [r3, #10]
 800fc8e:	2200      	movs	r2, #0
 800fc90:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	9302      	str	r3, [sp, #8]
 800fc96:	2301      	movs	r3, #1
 800fc98:	9301      	str	r3, [sp, #4]
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	9300      	str	r3, [sp, #0]
 800fc9e:	23ff      	movs	r3, #255	@ 0xff
 800fca0:	2200      	movs	r2, #0
 800fca2:	69f9      	ldr	r1, [r7, #28]
 800fca4:	6878      	ldr	r0, [r7, #4]
 800fca6:	f000 fa75 	bl	8010194 <ip4_output_if>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800fcae:	e001      	b.n	800fcb4 <icmp_input+0x1b8>
      break;
 800fcb0:	bf00      	nop
 800fcb2:	e000      	b.n	800fcb6 <icmp_input+0x1ba>
      break;
 800fcb4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800fcb6:	6878      	ldr	r0, [r7, #4]
 800fcb8:	f7f8 f9ec 	bl	8008094 <pbuf_free>
  return;
 800fcbc:	e013      	b.n	800fce6 <icmp_input+0x1ea>
    goto lenerr;
 800fcbe:	bf00      	nop
 800fcc0:	e002      	b.n	800fcc8 <icmp_input+0x1cc>
    goto lenerr;
 800fcc2:	bf00      	nop
 800fcc4:	e000      	b.n	800fcc8 <icmp_input+0x1cc>
        goto lenerr;
 800fcc6:	bf00      	nop
lenerr:
  pbuf_free(p);
 800fcc8:	6878      	ldr	r0, [r7, #4]
 800fcca:	f7f8 f9e3 	bl	8008094 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800fcce:	e00a      	b.n	800fce6 <icmp_input+0x1ea>
        goto icmperr;
 800fcd0:	bf00      	nop
 800fcd2:	e004      	b.n	800fcde <icmp_input+0x1e2>
        goto icmperr;
 800fcd4:	bf00      	nop
 800fcd6:	e002      	b.n	800fcde <icmp_input+0x1e2>
          goto icmperr;
 800fcd8:	bf00      	nop
 800fcda:	e000      	b.n	800fcde <icmp_input+0x1e2>
          goto icmperr;
 800fcdc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800fcde:	6878      	ldr	r0, [r7, #4]
 800fce0:	f7f8 f9d8 	bl	8008094 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800fce4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800fce6:	3728      	adds	r7, #40	@ 0x28
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bd80      	pop	{r7, pc}
 800fcec:	2000568c 	.word	0x2000568c
 800fcf0:	200056a0 	.word	0x200056a0
 800fcf4:	08014a68 	.word	0x08014a68
 800fcf8:	08014aa0 	.word	0x08014aa0
 800fcfc:	08014ad8 	.word	0x08014ad8
 800fd00:	08014b00 	.word	0x08014b00

0800fd04 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b082      	sub	sp, #8
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
 800fd0c:	460b      	mov	r3, r1
 800fd0e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800fd10:	78fb      	ldrb	r3, [r7, #3]
 800fd12:	461a      	mov	r2, r3
 800fd14:	2103      	movs	r1, #3
 800fd16:	6878      	ldr	r0, [r7, #4]
 800fd18:	f000 f814 	bl	800fd44 <icmp_send_response>
}
 800fd1c:	bf00      	nop
 800fd1e:	3708      	adds	r7, #8
 800fd20:	46bd      	mov	sp, r7
 800fd22:	bd80      	pop	{r7, pc}

0800fd24 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b082      	sub	sp, #8
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
 800fd2c:	460b      	mov	r3, r1
 800fd2e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800fd30:	78fb      	ldrb	r3, [r7, #3]
 800fd32:	461a      	mov	r2, r3
 800fd34:	210b      	movs	r1, #11
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	f000 f804 	bl	800fd44 <icmp_send_response>
}
 800fd3c:	bf00      	nop
 800fd3e:	3708      	adds	r7, #8
 800fd40:	46bd      	mov	sp, r7
 800fd42:	bd80      	pop	{r7, pc}

0800fd44 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b08c      	sub	sp, #48	@ 0x30
 800fd48:	af04      	add	r7, sp, #16
 800fd4a:	6078      	str	r0, [r7, #4]
 800fd4c:	460b      	mov	r3, r1
 800fd4e:	70fb      	strb	r3, [r7, #3]
 800fd50:	4613      	mov	r3, r2
 800fd52:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800fd54:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fd58:	2124      	movs	r1, #36	@ 0x24
 800fd5a:	2022      	movs	r0, #34	@ 0x22
 800fd5c:	f7f7 feb6 	bl	8007acc <pbuf_alloc>
 800fd60:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800fd62:	69fb      	ldr	r3, [r7, #28]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d04c      	beq.n	800fe02 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800fd68:	69fb      	ldr	r3, [r7, #28]
 800fd6a:	895b      	ldrh	r3, [r3, #10]
 800fd6c:	2b23      	cmp	r3, #35	@ 0x23
 800fd6e:	d806      	bhi.n	800fd7e <icmp_send_response+0x3a>
 800fd70:	4b26      	ldr	r3, [pc, #152]	@ (800fe0c <icmp_send_response+0xc8>)
 800fd72:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800fd76:	4926      	ldr	r1, [pc, #152]	@ (800fe10 <icmp_send_response+0xcc>)
 800fd78:	4826      	ldr	r0, [pc, #152]	@ (800fe14 <icmp_send_response+0xd0>)
 800fd7a:	f001 fb39 	bl	80113f0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	685b      	ldr	r3, [r3, #4]
 800fd82:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800fd84:	69fb      	ldr	r3, [r7, #28]
 800fd86:	685b      	ldr	r3, [r3, #4]
 800fd88:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800fd8a:	697b      	ldr	r3, [r7, #20]
 800fd8c:	78fa      	ldrb	r2, [r7, #3]
 800fd8e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800fd90:	697b      	ldr	r3, [r7, #20]
 800fd92:	78ba      	ldrb	r2, [r7, #2]
 800fd94:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800fd96:	697b      	ldr	r3, [r7, #20]
 800fd98:	2200      	movs	r2, #0
 800fd9a:	711a      	strb	r2, [r3, #4]
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800fda0:	697b      	ldr	r3, [r7, #20]
 800fda2:	2200      	movs	r2, #0
 800fda4:	719a      	strb	r2, [r3, #6]
 800fda6:	2200      	movs	r2, #0
 800fda8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800fdaa:	69fb      	ldr	r3, [r7, #28]
 800fdac:	685b      	ldr	r3, [r3, #4]
 800fdae:	f103 0008 	add.w	r0, r3, #8
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	685b      	ldr	r3, [r3, #4]
 800fdb6:	221c      	movs	r2, #28
 800fdb8:	4619      	mov	r1, r3
 800fdba:	f001 fc12 	bl	80115e2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800fdbe:	69bb      	ldr	r3, [r7, #24]
 800fdc0:	68db      	ldr	r3, [r3, #12]
 800fdc2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800fdc4:	f107 030c 	add.w	r3, r7, #12
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f000 f825 	bl	800fe18 <ip4_route>
 800fdce:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800fdd0:	693b      	ldr	r3, [r7, #16]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d011      	beq.n	800fdfa <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800fdd6:	697b      	ldr	r3, [r7, #20]
 800fdd8:	2200      	movs	r2, #0
 800fdda:	709a      	strb	r2, [r3, #2]
 800fddc:	2200      	movs	r2, #0
 800fdde:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800fde0:	f107 020c 	add.w	r2, r7, #12
 800fde4:	693b      	ldr	r3, [r7, #16]
 800fde6:	9302      	str	r3, [sp, #8]
 800fde8:	2301      	movs	r3, #1
 800fdea:	9301      	str	r3, [sp, #4]
 800fdec:	2300      	movs	r3, #0
 800fdee:	9300      	str	r3, [sp, #0]
 800fdf0:	23ff      	movs	r3, #255	@ 0xff
 800fdf2:	2100      	movs	r1, #0
 800fdf4:	69f8      	ldr	r0, [r7, #28]
 800fdf6:	f000 f9cd 	bl	8010194 <ip4_output_if>
  }
  pbuf_free(q);
 800fdfa:	69f8      	ldr	r0, [r7, #28]
 800fdfc:	f7f8 f94a 	bl	8008094 <pbuf_free>
 800fe00:	e000      	b.n	800fe04 <icmp_send_response+0xc0>
    return;
 800fe02:	bf00      	nop
}
 800fe04:	3720      	adds	r7, #32
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bd80      	pop	{r7, pc}
 800fe0a:	bf00      	nop
 800fe0c:	08014a68 	.word	0x08014a68
 800fe10:	08014b34 	.word	0x08014b34
 800fe14:	08014ad8 	.word	0x08014ad8

0800fe18 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800fe18:	b480      	push	{r7}
 800fe1a:	b085      	sub	sp, #20
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800fe20:	4b33      	ldr	r3, [pc, #204]	@ (800fef0 <ip4_route+0xd8>)
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	60fb      	str	r3, [r7, #12]
 800fe26:	e036      	b.n	800fe96 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fe2e:	f003 0301 	and.w	r3, r3, #1
 800fe32:	b2db      	uxtb	r3, r3
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d02b      	beq.n	800fe90 <ip4_route+0x78>
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fe3e:	089b      	lsrs	r3, r3, #2
 800fe40:	f003 0301 	and.w	r3, r3, #1
 800fe44:	b2db      	uxtb	r3, r3
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d022      	beq.n	800fe90 <ip4_route+0x78>
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	3304      	adds	r3, #4
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d01d      	beq.n	800fe90 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681a      	ldr	r2, [r3, #0]
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	3304      	adds	r3, #4
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	405a      	eors	r2, r3
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	3308      	adds	r3, #8
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	4013      	ands	r3, r2
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d101      	bne.n	800fe70 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	e038      	b.n	800fee2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fe76:	f003 0302 	and.w	r3, r3, #2
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d108      	bne.n	800fe90 <ip4_route+0x78>
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681a      	ldr	r2, [r3, #0]
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	330c      	adds	r3, #12
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	429a      	cmp	r2, r3
 800fe8a:	d101      	bne.n	800fe90 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	e028      	b.n	800fee2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	60fb      	str	r3, [r7, #12]
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d1c5      	bne.n	800fe28 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800fe9c:	4b15      	ldr	r3, [pc, #84]	@ (800fef4 <ip4_route+0xdc>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d01a      	beq.n	800feda <ip4_route+0xc2>
 800fea4:	4b13      	ldr	r3, [pc, #76]	@ (800fef4 <ip4_route+0xdc>)
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800feac:	f003 0301 	and.w	r3, r3, #1
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d012      	beq.n	800feda <ip4_route+0xc2>
 800feb4:	4b0f      	ldr	r3, [pc, #60]	@ (800fef4 <ip4_route+0xdc>)
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800febc:	f003 0304 	and.w	r3, r3, #4
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d00a      	beq.n	800feda <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800fec4:	4b0b      	ldr	r3, [pc, #44]	@ (800fef4 <ip4_route+0xdc>)
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	3304      	adds	r3, #4
 800feca:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d004      	beq.n	800feda <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	b2db      	uxtb	r3, r3
 800fed6:	2b7f      	cmp	r3, #127	@ 0x7f
 800fed8:	d101      	bne.n	800fede <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800feda:	2300      	movs	r3, #0
 800fedc:	e001      	b.n	800fee2 <ip4_route+0xca>
  }

  return netif_default;
 800fede:	4b05      	ldr	r3, [pc, #20]	@ (800fef4 <ip4_route+0xdc>)
 800fee0:	681b      	ldr	r3, [r3, #0]
}
 800fee2:	4618      	mov	r0, r3
 800fee4:	3714      	adds	r7, #20
 800fee6:	46bd      	mov	sp, r7
 800fee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feec:	4770      	bx	lr
 800feee:	bf00      	nop
 800fef0:	2000859c 	.word	0x2000859c
 800fef4:	200085a0 	.word	0x200085a0

0800fef8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b082      	sub	sp, #8
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ff06:	f003 0301 	and.w	r3, r3, #1
 800ff0a:	b2db      	uxtb	r3, r3
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d016      	beq.n	800ff3e <ip4_input_accept+0x46>
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	3304      	adds	r3, #4
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d011      	beq.n	800ff3e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ff1a:	4b0b      	ldr	r3, [pc, #44]	@ (800ff48 <ip4_input_accept+0x50>)
 800ff1c:	695a      	ldr	r2, [r3, #20]
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	3304      	adds	r3, #4
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	429a      	cmp	r2, r3
 800ff26:	d008      	beq.n	800ff3a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800ff28:	4b07      	ldr	r3, [pc, #28]	@ (800ff48 <ip4_input_accept+0x50>)
 800ff2a:	695b      	ldr	r3, [r3, #20]
 800ff2c:	6879      	ldr	r1, [r7, #4]
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f000 fa08 	bl	8010344 <ip4_addr_isbroadcast_u32>
 800ff34:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d001      	beq.n	800ff3e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800ff3a:	2301      	movs	r3, #1
 800ff3c:	e000      	b.n	800ff40 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800ff3e:	2300      	movs	r3, #0
}
 800ff40:	4618      	mov	r0, r3
 800ff42:	3708      	adds	r7, #8
 800ff44:	46bd      	mov	sp, r7
 800ff46:	bd80      	pop	{r7, pc}
 800ff48:	2000568c 	.word	0x2000568c

0800ff4c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b086      	sub	sp, #24
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	685b      	ldr	r3, [r3, #4]
 800ff5a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	781b      	ldrb	r3, [r3, #0]
 800ff60:	091b      	lsrs	r3, r3, #4
 800ff62:	b2db      	uxtb	r3, r3
 800ff64:	2b04      	cmp	r3, #4
 800ff66:	d004      	beq.n	800ff72 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800ff68:	6878      	ldr	r0, [r7, #4]
 800ff6a:	f7f8 f893 	bl	8008094 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800ff6e:	2300      	movs	r3, #0
 800ff70:	e107      	b.n	8010182 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800ff72:	697b      	ldr	r3, [r7, #20]
 800ff74:	781b      	ldrb	r3, [r3, #0]
 800ff76:	f003 030f 	and.w	r3, r3, #15
 800ff7a:	b2db      	uxtb	r3, r3
 800ff7c:	009b      	lsls	r3, r3, #2
 800ff7e:	b2db      	uxtb	r3, r3
 800ff80:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	885b      	ldrh	r3, [r3, #2]
 800ff86:	b29b      	uxth	r3, r3
 800ff88:	4618      	mov	r0, r3
 800ff8a:	f7f6 fcf3 	bl	8006974 <lwip_htons>
 800ff8e:	4603      	mov	r3, r0
 800ff90:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	891b      	ldrh	r3, [r3, #8]
 800ff96:	89ba      	ldrh	r2, [r7, #12]
 800ff98:	429a      	cmp	r2, r3
 800ff9a:	d204      	bcs.n	800ffa6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800ff9c:	89bb      	ldrh	r3, [r7, #12]
 800ff9e:	4619      	mov	r1, r3
 800ffa0:	6878      	ldr	r0, [r7, #4]
 800ffa2:	f7f7 fef1 	bl	8007d88 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	895b      	ldrh	r3, [r3, #10]
 800ffaa:	89fa      	ldrh	r2, [r7, #14]
 800ffac:	429a      	cmp	r2, r3
 800ffae:	d807      	bhi.n	800ffc0 <ip4_input+0x74>
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	891b      	ldrh	r3, [r3, #8]
 800ffb4:	89ba      	ldrh	r2, [r7, #12]
 800ffb6:	429a      	cmp	r2, r3
 800ffb8:	d802      	bhi.n	800ffc0 <ip4_input+0x74>
 800ffba:	89fb      	ldrh	r3, [r7, #14]
 800ffbc:	2b13      	cmp	r3, #19
 800ffbe:	d804      	bhi.n	800ffca <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800ffc0:	6878      	ldr	r0, [r7, #4]
 800ffc2:	f7f8 f867 	bl	8008094 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	e0db      	b.n	8010182 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800ffca:	697b      	ldr	r3, [r7, #20]
 800ffcc:	691b      	ldr	r3, [r3, #16]
 800ffce:	4a6f      	ldr	r2, [pc, #444]	@ (801018c <ip4_input+0x240>)
 800ffd0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ffd2:	697b      	ldr	r3, [r7, #20]
 800ffd4:	68db      	ldr	r3, [r3, #12]
 800ffd6:	4a6d      	ldr	r2, [pc, #436]	@ (801018c <ip4_input+0x240>)
 800ffd8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ffda:	4b6c      	ldr	r3, [pc, #432]	@ (801018c <ip4_input+0x240>)
 800ffdc:	695b      	ldr	r3, [r3, #20]
 800ffde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ffe2:	2be0      	cmp	r3, #224	@ 0xe0
 800ffe4:	d112      	bne.n	801000c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ffe6:	683b      	ldr	r3, [r7, #0]
 800ffe8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ffec:	f003 0301 	and.w	r3, r3, #1
 800fff0:	b2db      	uxtb	r3, r3
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d007      	beq.n	8010006 <ip4_input+0xba>
 800fff6:	683b      	ldr	r3, [r7, #0]
 800fff8:	3304      	adds	r3, #4
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d002      	beq.n	8010006 <ip4_input+0xba>
      netif = inp;
 8010000:	683b      	ldr	r3, [r7, #0]
 8010002:	613b      	str	r3, [r7, #16]
 8010004:	e02a      	b.n	801005c <ip4_input+0x110>
    } else {
      netif = NULL;
 8010006:	2300      	movs	r3, #0
 8010008:	613b      	str	r3, [r7, #16]
 801000a:	e027      	b.n	801005c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801000c:	6838      	ldr	r0, [r7, #0]
 801000e:	f7ff ff73 	bl	800fef8 <ip4_input_accept>
 8010012:	4603      	mov	r3, r0
 8010014:	2b00      	cmp	r3, #0
 8010016:	d002      	beq.n	801001e <ip4_input+0xd2>
      netif = inp;
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	613b      	str	r3, [r7, #16]
 801001c:	e01e      	b.n	801005c <ip4_input+0x110>
    } else {
      netif = NULL;
 801001e:	2300      	movs	r3, #0
 8010020:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8010022:	4b5a      	ldr	r3, [pc, #360]	@ (801018c <ip4_input+0x240>)
 8010024:	695b      	ldr	r3, [r3, #20]
 8010026:	b2db      	uxtb	r3, r3
 8010028:	2b7f      	cmp	r3, #127	@ 0x7f
 801002a:	d017      	beq.n	801005c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801002c:	4b58      	ldr	r3, [pc, #352]	@ (8010190 <ip4_input+0x244>)
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	613b      	str	r3, [r7, #16]
 8010032:	e00e      	b.n	8010052 <ip4_input+0x106>
          if (netif == inp) {
 8010034:	693a      	ldr	r2, [r7, #16]
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	429a      	cmp	r2, r3
 801003a:	d006      	beq.n	801004a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801003c:	6938      	ldr	r0, [r7, #16]
 801003e:	f7ff ff5b 	bl	800fef8 <ip4_input_accept>
 8010042:	4603      	mov	r3, r0
 8010044:	2b00      	cmp	r3, #0
 8010046:	d108      	bne.n	801005a <ip4_input+0x10e>
 8010048:	e000      	b.n	801004c <ip4_input+0x100>
            continue;
 801004a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801004c:	693b      	ldr	r3, [r7, #16]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	613b      	str	r3, [r7, #16]
 8010052:	693b      	ldr	r3, [r7, #16]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d1ed      	bne.n	8010034 <ip4_input+0xe8>
 8010058:	e000      	b.n	801005c <ip4_input+0x110>
            break;
 801005a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801005c:	4b4b      	ldr	r3, [pc, #300]	@ (801018c <ip4_input+0x240>)
 801005e:	691b      	ldr	r3, [r3, #16]
 8010060:	6839      	ldr	r1, [r7, #0]
 8010062:	4618      	mov	r0, r3
 8010064:	f000 f96e 	bl	8010344 <ip4_addr_isbroadcast_u32>
 8010068:	4603      	mov	r3, r0
 801006a:	2b00      	cmp	r3, #0
 801006c:	d105      	bne.n	801007a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801006e:	4b47      	ldr	r3, [pc, #284]	@ (801018c <ip4_input+0x240>)
 8010070:	691b      	ldr	r3, [r3, #16]
 8010072:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010076:	2be0      	cmp	r3, #224	@ 0xe0
 8010078:	d104      	bne.n	8010084 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801007a:	6878      	ldr	r0, [r7, #4]
 801007c:	f7f8 f80a 	bl	8008094 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8010080:	2300      	movs	r3, #0
 8010082:	e07e      	b.n	8010182 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8010084:	693b      	ldr	r3, [r7, #16]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d104      	bne.n	8010094 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801008a:	6878      	ldr	r0, [r7, #4]
 801008c:	f7f8 f802 	bl	8008094 <pbuf_free>
    return ERR_OK;
 8010090:	2300      	movs	r3, #0
 8010092:	e076      	b.n	8010182 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8010094:	697b      	ldr	r3, [r7, #20]
 8010096:	88db      	ldrh	r3, [r3, #6]
 8010098:	b29b      	uxth	r3, r3
 801009a:	461a      	mov	r2, r3
 801009c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80100a0:	4013      	ands	r3, r2
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d00b      	beq.n	80100be <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80100a6:	6878      	ldr	r0, [r7, #4]
 80100a8:	f000 fc92 	bl	80109d0 <ip4_reass>
 80100ac:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d101      	bne.n	80100b8 <ip4_input+0x16c>
      return ERR_OK;
 80100b4:	2300      	movs	r3, #0
 80100b6:	e064      	b.n	8010182 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	685b      	ldr	r3, [r3, #4]
 80100bc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80100be:	4a33      	ldr	r2, [pc, #204]	@ (801018c <ip4_input+0x240>)
 80100c0:	693b      	ldr	r3, [r7, #16]
 80100c2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80100c4:	4a31      	ldr	r2, [pc, #196]	@ (801018c <ip4_input+0x240>)
 80100c6:	683b      	ldr	r3, [r7, #0]
 80100c8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80100ca:	4a30      	ldr	r2, [pc, #192]	@ (801018c <ip4_input+0x240>)
 80100cc:	697b      	ldr	r3, [r7, #20]
 80100ce:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80100d0:	697b      	ldr	r3, [r7, #20]
 80100d2:	781b      	ldrb	r3, [r3, #0]
 80100d4:	f003 030f 	and.w	r3, r3, #15
 80100d8:	b2db      	uxtb	r3, r3
 80100da:	009b      	lsls	r3, r3, #2
 80100dc:	b2db      	uxtb	r3, r3
 80100de:	461a      	mov	r2, r3
 80100e0:	4b2a      	ldr	r3, [pc, #168]	@ (801018c <ip4_input+0x240>)
 80100e2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80100e4:	89fb      	ldrh	r3, [r7, #14]
 80100e6:	4619      	mov	r1, r3
 80100e8:	6878      	ldr	r0, [r7, #4]
 80100ea:	f7f7 ff4d 	bl	8007f88 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80100ee:	697b      	ldr	r3, [r7, #20]
 80100f0:	7a5b      	ldrb	r3, [r3, #9]
 80100f2:	2b11      	cmp	r3, #17
 80100f4:	d006      	beq.n	8010104 <ip4_input+0x1b8>
 80100f6:	2b11      	cmp	r3, #17
 80100f8:	dc13      	bgt.n	8010122 <ip4_input+0x1d6>
 80100fa:	2b01      	cmp	r3, #1
 80100fc:	d00c      	beq.n	8010118 <ip4_input+0x1cc>
 80100fe:	2b06      	cmp	r3, #6
 8010100:	d005      	beq.n	801010e <ip4_input+0x1c2>
 8010102:	e00e      	b.n	8010122 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8010104:	6839      	ldr	r1, [r7, #0]
 8010106:	6878      	ldr	r0, [r7, #4]
 8010108:	f7fe fc68 	bl	800e9dc <udp_input>
        break;
 801010c:	e026      	b.n	801015c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801010e:	6839      	ldr	r1, [r7, #0]
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f7fa f88f 	bl	800a234 <tcp_input>
        break;
 8010116:	e021      	b.n	801015c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8010118:	6839      	ldr	r1, [r7, #0]
 801011a:	6878      	ldr	r0, [r7, #4]
 801011c:	f7ff fcee 	bl	800fafc <icmp_input>
        break;
 8010120:	e01c      	b.n	801015c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8010122:	4b1a      	ldr	r3, [pc, #104]	@ (801018c <ip4_input+0x240>)
 8010124:	695b      	ldr	r3, [r3, #20]
 8010126:	6939      	ldr	r1, [r7, #16]
 8010128:	4618      	mov	r0, r3
 801012a:	f000 f90b 	bl	8010344 <ip4_addr_isbroadcast_u32>
 801012e:	4603      	mov	r3, r0
 8010130:	2b00      	cmp	r3, #0
 8010132:	d10f      	bne.n	8010154 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010134:	4b15      	ldr	r3, [pc, #84]	@ (801018c <ip4_input+0x240>)
 8010136:	695b      	ldr	r3, [r3, #20]
 8010138:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801013c:	2be0      	cmp	r3, #224	@ 0xe0
 801013e:	d009      	beq.n	8010154 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8010140:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010144:	4619      	mov	r1, r3
 8010146:	6878      	ldr	r0, [r7, #4]
 8010148:	f7f7 ff91 	bl	800806e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801014c:	2102      	movs	r1, #2
 801014e:	6878      	ldr	r0, [r7, #4]
 8010150:	f7ff fdd8 	bl	800fd04 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8010154:	6878      	ldr	r0, [r7, #4]
 8010156:	f7f7 ff9d 	bl	8008094 <pbuf_free>
        break;
 801015a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801015c:	4b0b      	ldr	r3, [pc, #44]	@ (801018c <ip4_input+0x240>)
 801015e:	2200      	movs	r2, #0
 8010160:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8010162:	4b0a      	ldr	r3, [pc, #40]	@ (801018c <ip4_input+0x240>)
 8010164:	2200      	movs	r2, #0
 8010166:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8010168:	4b08      	ldr	r3, [pc, #32]	@ (801018c <ip4_input+0x240>)
 801016a:	2200      	movs	r2, #0
 801016c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801016e:	4b07      	ldr	r3, [pc, #28]	@ (801018c <ip4_input+0x240>)
 8010170:	2200      	movs	r2, #0
 8010172:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8010174:	4b05      	ldr	r3, [pc, #20]	@ (801018c <ip4_input+0x240>)
 8010176:	2200      	movs	r2, #0
 8010178:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801017a:	4b04      	ldr	r3, [pc, #16]	@ (801018c <ip4_input+0x240>)
 801017c:	2200      	movs	r2, #0
 801017e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8010180:	2300      	movs	r3, #0
}
 8010182:	4618      	mov	r0, r3
 8010184:	3718      	adds	r7, #24
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}
 801018a:	bf00      	nop
 801018c:	2000568c 	.word	0x2000568c
 8010190:	2000859c 	.word	0x2000859c

08010194 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b08a      	sub	sp, #40	@ 0x28
 8010198:	af04      	add	r7, sp, #16
 801019a:	60f8      	str	r0, [r7, #12]
 801019c:	60b9      	str	r1, [r7, #8]
 801019e:	607a      	str	r2, [r7, #4]
 80101a0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80101a2:	68bb      	ldr	r3, [r7, #8]
 80101a4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d009      	beq.n	80101c0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80101ac:	68bb      	ldr	r3, [r7, #8]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d003      	beq.n	80101ba <ip4_output_if+0x26>
 80101b2:	68bb      	ldr	r3, [r7, #8]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d102      	bne.n	80101c0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80101ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101bc:	3304      	adds	r3, #4
 80101be:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80101c0:	78fa      	ldrb	r2, [r7, #3]
 80101c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101c4:	9302      	str	r3, [sp, #8]
 80101c6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80101ca:	9301      	str	r3, [sp, #4]
 80101cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80101d0:	9300      	str	r3, [sp, #0]
 80101d2:	4613      	mov	r3, r2
 80101d4:	687a      	ldr	r2, [r7, #4]
 80101d6:	6979      	ldr	r1, [r7, #20]
 80101d8:	68f8      	ldr	r0, [r7, #12]
 80101da:	f000 f805 	bl	80101e8 <ip4_output_if_src>
 80101de:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80101e0:	4618      	mov	r0, r3
 80101e2:	3718      	adds	r7, #24
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}

080101e8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b088      	sub	sp, #32
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	60f8      	str	r0, [r7, #12]
 80101f0:	60b9      	str	r1, [r7, #8]
 80101f2:	607a      	str	r2, [r7, #4]
 80101f4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	7b9b      	ldrb	r3, [r3, #14]
 80101fa:	2b01      	cmp	r3, #1
 80101fc:	d006      	beq.n	801020c <ip4_output_if_src+0x24>
 80101fe:	4b4b      	ldr	r3, [pc, #300]	@ (801032c <ip4_output_if_src+0x144>)
 8010200:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8010204:	494a      	ldr	r1, [pc, #296]	@ (8010330 <ip4_output_if_src+0x148>)
 8010206:	484b      	ldr	r0, [pc, #300]	@ (8010334 <ip4_output_if_src+0x14c>)
 8010208:	f001 f8f2 	bl	80113f0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d060      	beq.n	80102d4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8010212:	2314      	movs	r3, #20
 8010214:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8010216:	2114      	movs	r1, #20
 8010218:	68f8      	ldr	r0, [r7, #12]
 801021a:	f7f7 fea5 	bl	8007f68 <pbuf_add_header>
 801021e:	4603      	mov	r3, r0
 8010220:	2b00      	cmp	r3, #0
 8010222:	d002      	beq.n	801022a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8010224:	f06f 0301 	mvn.w	r3, #1
 8010228:	e07c      	b.n	8010324 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	685b      	ldr	r3, [r3, #4]
 801022e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	895b      	ldrh	r3, [r3, #10]
 8010234:	2b13      	cmp	r3, #19
 8010236:	d806      	bhi.n	8010246 <ip4_output_if_src+0x5e>
 8010238:	4b3c      	ldr	r3, [pc, #240]	@ (801032c <ip4_output_if_src+0x144>)
 801023a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801023e:	493e      	ldr	r1, [pc, #248]	@ (8010338 <ip4_output_if_src+0x150>)
 8010240:	483c      	ldr	r0, [pc, #240]	@ (8010334 <ip4_output_if_src+0x14c>)
 8010242:	f001 f8d5 	bl	80113f0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8010246:	69fb      	ldr	r3, [r7, #28]
 8010248:	78fa      	ldrb	r2, [r7, #3]
 801024a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801024c:	69fb      	ldr	r3, [r7, #28]
 801024e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8010252:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	681a      	ldr	r2, [r3, #0]
 8010258:	69fb      	ldr	r3, [r7, #28]
 801025a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801025c:	8b7b      	ldrh	r3, [r7, #26]
 801025e:	089b      	lsrs	r3, r3, #2
 8010260:	b29b      	uxth	r3, r3
 8010262:	b2db      	uxtb	r3, r3
 8010264:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010268:	b2da      	uxtb	r2, r3
 801026a:	69fb      	ldr	r3, [r7, #28]
 801026c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801026e:	69fb      	ldr	r3, [r7, #28]
 8010270:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8010274:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	891b      	ldrh	r3, [r3, #8]
 801027a:	4618      	mov	r0, r3
 801027c:	f7f6 fb7a 	bl	8006974 <lwip_htons>
 8010280:	4603      	mov	r3, r0
 8010282:	461a      	mov	r2, r3
 8010284:	69fb      	ldr	r3, [r7, #28]
 8010286:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8010288:	69fb      	ldr	r3, [r7, #28]
 801028a:	2200      	movs	r2, #0
 801028c:	719a      	strb	r2, [r3, #6]
 801028e:	2200      	movs	r2, #0
 8010290:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8010292:	4b2a      	ldr	r3, [pc, #168]	@ (801033c <ip4_output_if_src+0x154>)
 8010294:	881b      	ldrh	r3, [r3, #0]
 8010296:	4618      	mov	r0, r3
 8010298:	f7f6 fb6c 	bl	8006974 <lwip_htons>
 801029c:	4603      	mov	r3, r0
 801029e:	461a      	mov	r2, r3
 80102a0:	69fb      	ldr	r3, [r7, #28]
 80102a2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80102a4:	4b25      	ldr	r3, [pc, #148]	@ (801033c <ip4_output_if_src+0x154>)
 80102a6:	881b      	ldrh	r3, [r3, #0]
 80102a8:	3301      	adds	r3, #1
 80102aa:	b29a      	uxth	r2, r3
 80102ac:	4b23      	ldr	r3, [pc, #140]	@ (801033c <ip4_output_if_src+0x154>)
 80102ae:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80102b0:	68bb      	ldr	r3, [r7, #8]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d104      	bne.n	80102c0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80102b6:	4b22      	ldr	r3, [pc, #136]	@ (8010340 <ip4_output_if_src+0x158>)
 80102b8:	681a      	ldr	r2, [r3, #0]
 80102ba:	69fb      	ldr	r3, [r7, #28]
 80102bc:	60da      	str	r2, [r3, #12]
 80102be:	e003      	b.n	80102c8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80102c0:	68bb      	ldr	r3, [r7, #8]
 80102c2:	681a      	ldr	r2, [r3, #0]
 80102c4:	69fb      	ldr	r3, [r7, #28]
 80102c6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80102c8:	69fb      	ldr	r3, [r7, #28]
 80102ca:	2200      	movs	r2, #0
 80102cc:	729a      	strb	r2, [r3, #10]
 80102ce:	2200      	movs	r2, #0
 80102d0:	72da      	strb	r2, [r3, #11]
 80102d2:	e00f      	b.n	80102f4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	895b      	ldrh	r3, [r3, #10]
 80102d8:	2b13      	cmp	r3, #19
 80102da:	d802      	bhi.n	80102e2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80102dc:	f06f 0301 	mvn.w	r3, #1
 80102e0:	e020      	b.n	8010324 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	685b      	ldr	r3, [r3, #4]
 80102e6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80102e8:	69fb      	ldr	r3, [r7, #28]
 80102ea:	691b      	ldr	r3, [r3, #16]
 80102ec:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80102ee:	f107 0314 	add.w	r3, r7, #20
 80102f2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80102f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102f6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d00c      	beq.n	8010316 <ip4_output_if_src+0x12e>
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	891a      	ldrh	r2, [r3, #8]
 8010300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010302:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010304:	429a      	cmp	r2, r3
 8010306:	d906      	bls.n	8010316 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8010308:	687a      	ldr	r2, [r7, #4]
 801030a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801030c:	68f8      	ldr	r0, [r7, #12]
 801030e:	f000 fd53 	bl	8010db8 <ip4_frag>
 8010312:	4603      	mov	r3, r0
 8010314:	e006      	b.n	8010324 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8010316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010318:	695b      	ldr	r3, [r3, #20]
 801031a:	687a      	ldr	r2, [r7, #4]
 801031c:	68f9      	ldr	r1, [r7, #12]
 801031e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010320:	4798      	blx	r3
 8010322:	4603      	mov	r3, r0
}
 8010324:	4618      	mov	r0, r3
 8010326:	3720      	adds	r7, #32
 8010328:	46bd      	mov	sp, r7
 801032a:	bd80      	pop	{r7, pc}
 801032c:	08014b60 	.word	0x08014b60
 8010330:	08014b94 	.word	0x08014b94
 8010334:	08014ba0 	.word	0x08014ba0
 8010338:	08014bc8 	.word	0x08014bc8
 801033c:	200086fa 	.word	0x200086fa
 8010340:	08015414 	.word	0x08015414

08010344 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8010344:	b480      	push	{r7}
 8010346:	b085      	sub	sp, #20
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
 801034c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010358:	d002      	beq.n	8010360 <ip4_addr_isbroadcast_u32+0x1c>
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d101      	bne.n	8010364 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010360:	2301      	movs	r3, #1
 8010362:	e02a      	b.n	80103ba <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801036a:	f003 0302 	and.w	r3, r3, #2
 801036e:	2b00      	cmp	r3, #0
 8010370:	d101      	bne.n	8010376 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010372:	2300      	movs	r3, #0
 8010374:	e021      	b.n	80103ba <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	3304      	adds	r3, #4
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	687a      	ldr	r2, [r7, #4]
 801037e:	429a      	cmp	r2, r3
 8010380:	d101      	bne.n	8010386 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010382:	2300      	movs	r3, #0
 8010384:	e019      	b.n	80103ba <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8010386:	68fa      	ldr	r2, [r7, #12]
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	3304      	adds	r3, #4
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	405a      	eors	r2, r3
 8010390:	683b      	ldr	r3, [r7, #0]
 8010392:	3308      	adds	r3, #8
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	4013      	ands	r3, r2
 8010398:	2b00      	cmp	r3, #0
 801039a:	d10d      	bne.n	80103b8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	3308      	adds	r3, #8
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	43da      	mvns	r2, r3
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80103a8:	683b      	ldr	r3, [r7, #0]
 80103aa:	3308      	adds	r3, #8
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80103b0:	429a      	cmp	r2, r3
 80103b2:	d101      	bne.n	80103b8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80103b4:	2301      	movs	r3, #1
 80103b6:	e000      	b.n	80103ba <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80103b8:	2300      	movs	r3, #0
  }
}
 80103ba:	4618      	mov	r0, r3
 80103bc:	3714      	adds	r7, #20
 80103be:	46bd      	mov	sp, r7
 80103c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c4:	4770      	bx	lr
	...

080103c8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b084      	sub	sp, #16
 80103cc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80103ce:	2300      	movs	r3, #0
 80103d0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80103d2:	4b12      	ldr	r3, [pc, #72]	@ (801041c <ip_reass_tmr+0x54>)
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80103d8:	e018      	b.n	801040c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	7fdb      	ldrb	r3, [r3, #31]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d00b      	beq.n	80103fa <ip_reass_tmr+0x32>
      r->timer--;
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	7fdb      	ldrb	r3, [r3, #31]
 80103e6:	3b01      	subs	r3, #1
 80103e8:	b2da      	uxtb	r2, r3
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	60fb      	str	r3, [r7, #12]
 80103f8:	e008      	b.n	801040c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8010404:	68b9      	ldr	r1, [r7, #8]
 8010406:	6878      	ldr	r0, [r7, #4]
 8010408:	f000 f80a 	bl	8010420 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d1e3      	bne.n	80103da <ip_reass_tmr+0x12>
    }
  }
}
 8010412:	bf00      	nop
 8010414:	bf00      	nop
 8010416:	3710      	adds	r7, #16
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}
 801041c:	200086fc 	.word	0x200086fc

08010420 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b088      	sub	sp, #32
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
 8010428:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801042a:	2300      	movs	r3, #0
 801042c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801042e:	683a      	ldr	r2, [r7, #0]
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	429a      	cmp	r2, r3
 8010434:	d105      	bne.n	8010442 <ip_reass_free_complete_datagram+0x22>
 8010436:	4b45      	ldr	r3, [pc, #276]	@ (801054c <ip_reass_free_complete_datagram+0x12c>)
 8010438:	22ab      	movs	r2, #171	@ 0xab
 801043a:	4945      	ldr	r1, [pc, #276]	@ (8010550 <ip_reass_free_complete_datagram+0x130>)
 801043c:	4845      	ldr	r0, [pc, #276]	@ (8010554 <ip_reass_free_complete_datagram+0x134>)
 801043e:	f000 ffd7 	bl	80113f0 <iprintf>
  if (prev != NULL) {
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d00a      	beq.n	801045e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8010448:	683b      	ldr	r3, [r7, #0]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	687a      	ldr	r2, [r7, #4]
 801044e:	429a      	cmp	r2, r3
 8010450:	d005      	beq.n	801045e <ip_reass_free_complete_datagram+0x3e>
 8010452:	4b3e      	ldr	r3, [pc, #248]	@ (801054c <ip_reass_free_complete_datagram+0x12c>)
 8010454:	22ad      	movs	r2, #173	@ 0xad
 8010456:	4940      	ldr	r1, [pc, #256]	@ (8010558 <ip_reass_free_complete_datagram+0x138>)
 8010458:	483e      	ldr	r0, [pc, #248]	@ (8010554 <ip_reass_free_complete_datagram+0x134>)
 801045a:	f000 ffc9 	bl	80113f0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	685b      	ldr	r3, [r3, #4]
 8010462:	685b      	ldr	r3, [r3, #4]
 8010464:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8010466:	697b      	ldr	r3, [r7, #20]
 8010468:	889b      	ldrh	r3, [r3, #4]
 801046a:	b29b      	uxth	r3, r3
 801046c:	2b00      	cmp	r3, #0
 801046e:	d12a      	bne.n	80104c6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	685b      	ldr	r3, [r3, #4]
 8010474:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8010476:	697b      	ldr	r3, [r7, #20]
 8010478:	681a      	ldr	r2, [r3, #0]
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801047e:	69bb      	ldr	r3, [r7, #24]
 8010480:	6858      	ldr	r0, [r3, #4]
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	3308      	adds	r3, #8
 8010486:	2214      	movs	r2, #20
 8010488:	4619      	mov	r1, r3
 801048a:	f001 f8aa 	bl	80115e2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801048e:	2101      	movs	r1, #1
 8010490:	69b8      	ldr	r0, [r7, #24]
 8010492:	f7ff fc47 	bl	800fd24 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8010496:	69b8      	ldr	r0, [r7, #24]
 8010498:	f7f7 fe84 	bl	80081a4 <pbuf_clen>
 801049c:	4603      	mov	r3, r0
 801049e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80104a0:	8bfa      	ldrh	r2, [r7, #30]
 80104a2:	8a7b      	ldrh	r3, [r7, #18]
 80104a4:	4413      	add	r3, r2
 80104a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80104aa:	db05      	blt.n	80104b8 <ip_reass_free_complete_datagram+0x98>
 80104ac:	4b27      	ldr	r3, [pc, #156]	@ (801054c <ip_reass_free_complete_datagram+0x12c>)
 80104ae:	22bc      	movs	r2, #188	@ 0xbc
 80104b0:	492a      	ldr	r1, [pc, #168]	@ (801055c <ip_reass_free_complete_datagram+0x13c>)
 80104b2:	4828      	ldr	r0, [pc, #160]	@ (8010554 <ip_reass_free_complete_datagram+0x134>)
 80104b4:	f000 ff9c 	bl	80113f0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80104b8:	8bfa      	ldrh	r2, [r7, #30]
 80104ba:	8a7b      	ldrh	r3, [r7, #18]
 80104bc:	4413      	add	r3, r2
 80104be:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80104c0:	69b8      	ldr	r0, [r7, #24]
 80104c2:	f7f7 fde7 	bl	8008094 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	685b      	ldr	r3, [r3, #4]
 80104ca:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80104cc:	e01f      	b.n	801050e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80104ce:	69bb      	ldr	r3, [r7, #24]
 80104d0:	685b      	ldr	r3, [r3, #4]
 80104d2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80104d4:	69bb      	ldr	r3, [r7, #24]
 80104d6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80104d8:	697b      	ldr	r3, [r7, #20]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80104de:	68f8      	ldr	r0, [r7, #12]
 80104e0:	f7f7 fe60 	bl	80081a4 <pbuf_clen>
 80104e4:	4603      	mov	r3, r0
 80104e6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80104e8:	8bfa      	ldrh	r2, [r7, #30]
 80104ea:	8a7b      	ldrh	r3, [r7, #18]
 80104ec:	4413      	add	r3, r2
 80104ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80104f2:	db05      	blt.n	8010500 <ip_reass_free_complete_datagram+0xe0>
 80104f4:	4b15      	ldr	r3, [pc, #84]	@ (801054c <ip_reass_free_complete_datagram+0x12c>)
 80104f6:	22cc      	movs	r2, #204	@ 0xcc
 80104f8:	4918      	ldr	r1, [pc, #96]	@ (801055c <ip_reass_free_complete_datagram+0x13c>)
 80104fa:	4816      	ldr	r0, [pc, #88]	@ (8010554 <ip_reass_free_complete_datagram+0x134>)
 80104fc:	f000 ff78 	bl	80113f0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010500:	8bfa      	ldrh	r2, [r7, #30]
 8010502:	8a7b      	ldrh	r3, [r7, #18]
 8010504:	4413      	add	r3, r2
 8010506:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8010508:	68f8      	ldr	r0, [r7, #12]
 801050a:	f7f7 fdc3 	bl	8008094 <pbuf_free>
  while (p != NULL) {
 801050e:	69bb      	ldr	r3, [r7, #24]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d1dc      	bne.n	80104ce <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8010514:	6839      	ldr	r1, [r7, #0]
 8010516:	6878      	ldr	r0, [r7, #4]
 8010518:	f000 f8c2 	bl	80106a0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801051c:	4b10      	ldr	r3, [pc, #64]	@ (8010560 <ip_reass_free_complete_datagram+0x140>)
 801051e:	881b      	ldrh	r3, [r3, #0]
 8010520:	8bfa      	ldrh	r2, [r7, #30]
 8010522:	429a      	cmp	r2, r3
 8010524:	d905      	bls.n	8010532 <ip_reass_free_complete_datagram+0x112>
 8010526:	4b09      	ldr	r3, [pc, #36]	@ (801054c <ip_reass_free_complete_datagram+0x12c>)
 8010528:	22d2      	movs	r2, #210	@ 0xd2
 801052a:	490e      	ldr	r1, [pc, #56]	@ (8010564 <ip_reass_free_complete_datagram+0x144>)
 801052c:	4809      	ldr	r0, [pc, #36]	@ (8010554 <ip_reass_free_complete_datagram+0x134>)
 801052e:	f000 ff5f 	bl	80113f0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8010532:	4b0b      	ldr	r3, [pc, #44]	@ (8010560 <ip_reass_free_complete_datagram+0x140>)
 8010534:	881a      	ldrh	r2, [r3, #0]
 8010536:	8bfb      	ldrh	r3, [r7, #30]
 8010538:	1ad3      	subs	r3, r2, r3
 801053a:	b29a      	uxth	r2, r3
 801053c:	4b08      	ldr	r3, [pc, #32]	@ (8010560 <ip_reass_free_complete_datagram+0x140>)
 801053e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8010540:	8bfb      	ldrh	r3, [r7, #30]
}
 8010542:	4618      	mov	r0, r3
 8010544:	3720      	adds	r7, #32
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}
 801054a:	bf00      	nop
 801054c:	08014bf8 	.word	0x08014bf8
 8010550:	08014c34 	.word	0x08014c34
 8010554:	08014c40 	.word	0x08014c40
 8010558:	08014c68 	.word	0x08014c68
 801055c:	08014c7c 	.word	0x08014c7c
 8010560:	20008700 	.word	0x20008700
 8010564:	08014c9c 	.word	0x08014c9c

08010568 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b08a      	sub	sp, #40	@ 0x28
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
 8010570:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8010572:	2300      	movs	r3, #0
 8010574:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8010576:	2300      	movs	r3, #0
 8010578:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801057a:	2300      	movs	r3, #0
 801057c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801057e:	2300      	movs	r3, #0
 8010580:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8010582:	2300      	movs	r3, #0
 8010584:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8010586:	4b28      	ldr	r3, [pc, #160]	@ (8010628 <ip_reass_remove_oldest_datagram+0xc0>)
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801058c:	e030      	b.n	80105f0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801058e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010590:	695a      	ldr	r2, [r3, #20]
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	68db      	ldr	r3, [r3, #12]
 8010596:	429a      	cmp	r2, r3
 8010598:	d10c      	bne.n	80105b4 <ip_reass_remove_oldest_datagram+0x4c>
 801059a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801059c:	699a      	ldr	r2, [r3, #24]
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	691b      	ldr	r3, [r3, #16]
 80105a2:	429a      	cmp	r2, r3
 80105a4:	d106      	bne.n	80105b4 <ip_reass_remove_oldest_datagram+0x4c>
 80105a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105a8:	899a      	ldrh	r2, [r3, #12]
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	889b      	ldrh	r3, [r3, #4]
 80105ae:	b29b      	uxth	r3, r3
 80105b0:	429a      	cmp	r2, r3
 80105b2:	d014      	beq.n	80105de <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80105b4:	693b      	ldr	r3, [r7, #16]
 80105b6:	3301      	adds	r3, #1
 80105b8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80105ba:	6a3b      	ldr	r3, [r7, #32]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d104      	bne.n	80105ca <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80105c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105c2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80105c4:	69fb      	ldr	r3, [r7, #28]
 80105c6:	61bb      	str	r3, [r7, #24]
 80105c8:	e009      	b.n	80105de <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80105ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105cc:	7fda      	ldrb	r2, [r3, #31]
 80105ce:	6a3b      	ldr	r3, [r7, #32]
 80105d0:	7fdb      	ldrb	r3, [r3, #31]
 80105d2:	429a      	cmp	r2, r3
 80105d4:	d803      	bhi.n	80105de <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80105d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105d8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80105da:	69fb      	ldr	r3, [r7, #28]
 80105dc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80105de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d001      	beq.n	80105ea <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80105e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105e8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80105ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80105f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d1cb      	bne.n	801058e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80105f6:	6a3b      	ldr	r3, [r7, #32]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d008      	beq.n	801060e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80105fc:	69b9      	ldr	r1, [r7, #24]
 80105fe:	6a38      	ldr	r0, [r7, #32]
 8010600:	f7ff ff0e 	bl	8010420 <ip_reass_free_complete_datagram>
 8010604:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8010606:	697a      	ldr	r2, [r7, #20]
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	4413      	add	r3, r2
 801060c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801060e:	697a      	ldr	r2, [r7, #20]
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	429a      	cmp	r2, r3
 8010614:	da02      	bge.n	801061c <ip_reass_remove_oldest_datagram+0xb4>
 8010616:	693b      	ldr	r3, [r7, #16]
 8010618:	2b01      	cmp	r3, #1
 801061a:	dcac      	bgt.n	8010576 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801061c:	697b      	ldr	r3, [r7, #20]
}
 801061e:	4618      	mov	r0, r3
 8010620:	3728      	adds	r7, #40	@ 0x28
 8010622:	46bd      	mov	sp, r7
 8010624:	bd80      	pop	{r7, pc}
 8010626:	bf00      	nop
 8010628:	200086fc 	.word	0x200086fc

0801062c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b084      	sub	sp, #16
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
 8010634:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010636:	2004      	movs	r0, #4
 8010638:	f7f6 fe46 	bl	80072c8 <memp_malloc>
 801063c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d110      	bne.n	8010666 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010644:	6839      	ldr	r1, [r7, #0]
 8010646:	6878      	ldr	r0, [r7, #4]
 8010648:	f7ff ff8e 	bl	8010568 <ip_reass_remove_oldest_datagram>
 801064c:	4602      	mov	r2, r0
 801064e:	683b      	ldr	r3, [r7, #0]
 8010650:	4293      	cmp	r3, r2
 8010652:	dc03      	bgt.n	801065c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010654:	2004      	movs	r0, #4
 8010656:	f7f6 fe37 	bl	80072c8 <memp_malloc>
 801065a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d101      	bne.n	8010666 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8010662:	2300      	movs	r3, #0
 8010664:	e016      	b.n	8010694 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8010666:	2220      	movs	r2, #32
 8010668:	2100      	movs	r1, #0
 801066a:	68f8      	ldr	r0, [r7, #12]
 801066c:	f000 ff25 	bl	80114ba <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	220f      	movs	r2, #15
 8010674:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8010676:	4b09      	ldr	r3, [pc, #36]	@ (801069c <ip_reass_enqueue_new_datagram+0x70>)
 8010678:	681a      	ldr	r2, [r3, #0]
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801067e:	4a07      	ldr	r2, [pc, #28]	@ (801069c <ip_reass_enqueue_new_datagram+0x70>)
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	3308      	adds	r3, #8
 8010688:	2214      	movs	r2, #20
 801068a:	6879      	ldr	r1, [r7, #4]
 801068c:	4618      	mov	r0, r3
 801068e:	f000 ffa8 	bl	80115e2 <memcpy>
  return ipr;
 8010692:	68fb      	ldr	r3, [r7, #12]
}
 8010694:	4618      	mov	r0, r3
 8010696:	3710      	adds	r7, #16
 8010698:	46bd      	mov	sp, r7
 801069a:	bd80      	pop	{r7, pc}
 801069c:	200086fc 	.word	0x200086fc

080106a0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b082      	sub	sp, #8
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
 80106a8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80106aa:	4b10      	ldr	r3, [pc, #64]	@ (80106ec <ip_reass_dequeue_datagram+0x4c>)
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	687a      	ldr	r2, [r7, #4]
 80106b0:	429a      	cmp	r2, r3
 80106b2:	d104      	bne.n	80106be <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	4a0c      	ldr	r2, [pc, #48]	@ (80106ec <ip_reass_dequeue_datagram+0x4c>)
 80106ba:	6013      	str	r3, [r2, #0]
 80106bc:	e00d      	b.n	80106da <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d106      	bne.n	80106d2 <ip_reass_dequeue_datagram+0x32>
 80106c4:	4b0a      	ldr	r3, [pc, #40]	@ (80106f0 <ip_reass_dequeue_datagram+0x50>)
 80106c6:	f240 1245 	movw	r2, #325	@ 0x145
 80106ca:	490a      	ldr	r1, [pc, #40]	@ (80106f4 <ip_reass_dequeue_datagram+0x54>)
 80106cc:	480a      	ldr	r0, [pc, #40]	@ (80106f8 <ip_reass_dequeue_datagram+0x58>)
 80106ce:	f000 fe8f 	bl	80113f0 <iprintf>
    prev->next = ipr->next;
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681a      	ldr	r2, [r3, #0]
 80106d6:	683b      	ldr	r3, [r7, #0]
 80106d8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80106da:	6879      	ldr	r1, [r7, #4]
 80106dc:	2004      	movs	r0, #4
 80106de:	f7f6 fe63 	bl	80073a8 <memp_free>
}
 80106e2:	bf00      	nop
 80106e4:	3708      	adds	r7, #8
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bd80      	pop	{r7, pc}
 80106ea:	bf00      	nop
 80106ec:	200086fc 	.word	0x200086fc
 80106f0:	08014bf8 	.word	0x08014bf8
 80106f4:	08014cc0 	.word	0x08014cc0
 80106f8:	08014c40 	.word	0x08014c40

080106fc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b08c      	sub	sp, #48	@ 0x30
 8010700:	af00      	add	r7, sp, #0
 8010702:	60f8      	str	r0, [r7, #12]
 8010704:	60b9      	str	r1, [r7, #8]
 8010706:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8010708:	2300      	movs	r3, #0
 801070a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801070c:	2301      	movs	r3, #1
 801070e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8010710:	68bb      	ldr	r3, [r7, #8]
 8010712:	685b      	ldr	r3, [r3, #4]
 8010714:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010716:	69fb      	ldr	r3, [r7, #28]
 8010718:	885b      	ldrh	r3, [r3, #2]
 801071a:	b29b      	uxth	r3, r3
 801071c:	4618      	mov	r0, r3
 801071e:	f7f6 f929 	bl	8006974 <lwip_htons>
 8010722:	4603      	mov	r3, r0
 8010724:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8010726:	69fb      	ldr	r3, [r7, #28]
 8010728:	781b      	ldrb	r3, [r3, #0]
 801072a:	f003 030f 	and.w	r3, r3, #15
 801072e:	b2db      	uxtb	r3, r3
 8010730:	009b      	lsls	r3, r3, #2
 8010732:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8010734:	7e7b      	ldrb	r3, [r7, #25]
 8010736:	b29b      	uxth	r3, r3
 8010738:	8b7a      	ldrh	r2, [r7, #26]
 801073a:	429a      	cmp	r2, r3
 801073c:	d202      	bcs.n	8010744 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801073e:	f04f 33ff 	mov.w	r3, #4294967295
 8010742:	e135      	b.n	80109b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010744:	7e7b      	ldrb	r3, [r7, #25]
 8010746:	b29b      	uxth	r3, r3
 8010748:	8b7a      	ldrh	r2, [r7, #26]
 801074a:	1ad3      	subs	r3, r2, r3
 801074c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801074e:	69fb      	ldr	r3, [r7, #28]
 8010750:	88db      	ldrh	r3, [r3, #6]
 8010752:	b29b      	uxth	r3, r3
 8010754:	4618      	mov	r0, r3
 8010756:	f7f6 f90d 	bl	8006974 <lwip_htons>
 801075a:	4603      	mov	r3, r0
 801075c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010760:	b29b      	uxth	r3, r3
 8010762:	00db      	lsls	r3, r3, #3
 8010764:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	685b      	ldr	r3, [r3, #4]
 801076a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801076c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801076e:	2200      	movs	r2, #0
 8010770:	701a      	strb	r2, [r3, #0]
 8010772:	2200      	movs	r2, #0
 8010774:	705a      	strb	r2, [r3, #1]
 8010776:	2200      	movs	r2, #0
 8010778:	709a      	strb	r2, [r3, #2]
 801077a:	2200      	movs	r2, #0
 801077c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801077e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010780:	8afa      	ldrh	r2, [r7, #22]
 8010782:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010784:	8afa      	ldrh	r2, [r7, #22]
 8010786:	8b7b      	ldrh	r3, [r7, #26]
 8010788:	4413      	add	r3, r2
 801078a:	b29a      	uxth	r2, r3
 801078c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801078e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8010790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010792:	88db      	ldrh	r3, [r3, #6]
 8010794:	b29b      	uxth	r3, r3
 8010796:	8afa      	ldrh	r2, [r7, #22]
 8010798:	429a      	cmp	r2, r3
 801079a:	d902      	bls.n	80107a2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801079c:	f04f 33ff 	mov.w	r3, #4294967295
 80107a0:	e106      	b.n	80109b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	685b      	ldr	r3, [r3, #4]
 80107a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80107a8:	e068      	b.n	801087c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80107aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107ac:	685b      	ldr	r3, [r3, #4]
 80107ae:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80107b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107b2:	889b      	ldrh	r3, [r3, #4]
 80107b4:	b29a      	uxth	r2, r3
 80107b6:	693b      	ldr	r3, [r7, #16]
 80107b8:	889b      	ldrh	r3, [r3, #4]
 80107ba:	b29b      	uxth	r3, r3
 80107bc:	429a      	cmp	r2, r3
 80107be:	d235      	bcs.n	801082c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80107c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80107c4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80107c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d020      	beq.n	801080e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80107cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107ce:	889b      	ldrh	r3, [r3, #4]
 80107d0:	b29a      	uxth	r2, r3
 80107d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107d4:	88db      	ldrh	r3, [r3, #6]
 80107d6:	b29b      	uxth	r3, r3
 80107d8:	429a      	cmp	r2, r3
 80107da:	d307      	bcc.n	80107ec <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80107dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107de:	88db      	ldrh	r3, [r3, #6]
 80107e0:	b29a      	uxth	r2, r3
 80107e2:	693b      	ldr	r3, [r7, #16]
 80107e4:	889b      	ldrh	r3, [r3, #4]
 80107e6:	b29b      	uxth	r3, r3
 80107e8:	429a      	cmp	r2, r3
 80107ea:	d902      	bls.n	80107f2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80107ec:	f04f 33ff 	mov.w	r3, #4294967295
 80107f0:	e0de      	b.n	80109b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80107f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107f4:	68ba      	ldr	r2, [r7, #8]
 80107f6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80107f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107fa:	88db      	ldrh	r3, [r3, #6]
 80107fc:	b29a      	uxth	r2, r3
 80107fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010800:	889b      	ldrh	r3, [r3, #4]
 8010802:	b29b      	uxth	r3, r3
 8010804:	429a      	cmp	r2, r3
 8010806:	d03d      	beq.n	8010884 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010808:	2300      	movs	r3, #0
 801080a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801080c:	e03a      	b.n	8010884 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801080e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010810:	88db      	ldrh	r3, [r3, #6]
 8010812:	b29a      	uxth	r2, r3
 8010814:	693b      	ldr	r3, [r7, #16]
 8010816:	889b      	ldrh	r3, [r3, #4]
 8010818:	b29b      	uxth	r3, r3
 801081a:	429a      	cmp	r2, r3
 801081c:	d902      	bls.n	8010824 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801081e:	f04f 33ff 	mov.w	r3, #4294967295
 8010822:	e0c5      	b.n	80109b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	68ba      	ldr	r2, [r7, #8]
 8010828:	605a      	str	r2, [r3, #4]
      break;
 801082a:	e02b      	b.n	8010884 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801082c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801082e:	889b      	ldrh	r3, [r3, #4]
 8010830:	b29a      	uxth	r2, r3
 8010832:	693b      	ldr	r3, [r7, #16]
 8010834:	889b      	ldrh	r3, [r3, #4]
 8010836:	b29b      	uxth	r3, r3
 8010838:	429a      	cmp	r2, r3
 801083a:	d102      	bne.n	8010842 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801083c:	f04f 33ff 	mov.w	r3, #4294967295
 8010840:	e0b6      	b.n	80109b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8010842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010844:	889b      	ldrh	r3, [r3, #4]
 8010846:	b29a      	uxth	r2, r3
 8010848:	693b      	ldr	r3, [r7, #16]
 801084a:	88db      	ldrh	r3, [r3, #6]
 801084c:	b29b      	uxth	r3, r3
 801084e:	429a      	cmp	r2, r3
 8010850:	d202      	bcs.n	8010858 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010852:	f04f 33ff 	mov.w	r3, #4294967295
 8010856:	e0ab      	b.n	80109b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8010858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801085a:	2b00      	cmp	r3, #0
 801085c:	d009      	beq.n	8010872 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801085e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010860:	88db      	ldrh	r3, [r3, #6]
 8010862:	b29a      	uxth	r2, r3
 8010864:	693b      	ldr	r3, [r7, #16]
 8010866:	889b      	ldrh	r3, [r3, #4]
 8010868:	b29b      	uxth	r3, r3
 801086a:	429a      	cmp	r2, r3
 801086c:	d001      	beq.n	8010872 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801086e:	2300      	movs	r3, #0
 8010870:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8010872:	693b      	ldr	r3, [r7, #16]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8010878:	693b      	ldr	r3, [r7, #16]
 801087a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801087c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801087e:	2b00      	cmp	r3, #0
 8010880:	d193      	bne.n	80107aa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010882:	e000      	b.n	8010886 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010884:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010888:	2b00      	cmp	r3, #0
 801088a:	d12d      	bne.n	80108e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801088c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801088e:	2b00      	cmp	r3, #0
 8010890:	d01c      	beq.n	80108cc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010894:	88db      	ldrh	r3, [r3, #6]
 8010896:	b29a      	uxth	r2, r3
 8010898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801089a:	889b      	ldrh	r3, [r3, #4]
 801089c:	b29b      	uxth	r3, r3
 801089e:	429a      	cmp	r2, r3
 80108a0:	d906      	bls.n	80108b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80108a2:	4b45      	ldr	r3, [pc, #276]	@ (80109b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80108a4:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80108a8:	4944      	ldr	r1, [pc, #272]	@ (80109bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80108aa:	4845      	ldr	r0, [pc, #276]	@ (80109c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80108ac:	f000 fda0 	bl	80113f0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80108b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108b2:	68ba      	ldr	r2, [r7, #8]
 80108b4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80108b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108b8:	88db      	ldrh	r3, [r3, #6]
 80108ba:	b29a      	uxth	r2, r3
 80108bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108be:	889b      	ldrh	r3, [r3, #4]
 80108c0:	b29b      	uxth	r3, r3
 80108c2:	429a      	cmp	r2, r3
 80108c4:	d010      	beq.n	80108e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80108c6:	2300      	movs	r3, #0
 80108c8:	623b      	str	r3, [r7, #32]
 80108ca:	e00d      	b.n	80108e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	685b      	ldr	r3, [r3, #4]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d006      	beq.n	80108e2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80108d4:	4b38      	ldr	r3, [pc, #224]	@ (80109b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80108d6:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80108da:	493a      	ldr	r1, [pc, #232]	@ (80109c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80108dc:	4838      	ldr	r0, [pc, #224]	@ (80109c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80108de:	f000 fd87 	bl	80113f0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	68ba      	ldr	r2, [r7, #8]
 80108e6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d105      	bne.n	80108fa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	7f9b      	ldrb	r3, [r3, #30]
 80108f2:	f003 0301 	and.w	r3, r3, #1
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d059      	beq.n	80109ae <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80108fa:	6a3b      	ldr	r3, [r7, #32]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d04f      	beq.n	80109a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	685b      	ldr	r3, [r3, #4]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d006      	beq.n	8010916 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	685b      	ldr	r3, [r3, #4]
 801090c:	685b      	ldr	r3, [r3, #4]
 801090e:	889b      	ldrh	r3, [r3, #4]
 8010910:	b29b      	uxth	r3, r3
 8010912:	2b00      	cmp	r3, #0
 8010914:	d002      	beq.n	801091c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8010916:	2300      	movs	r3, #0
 8010918:	623b      	str	r3, [r7, #32]
 801091a:	e041      	b.n	80109a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801091c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801091e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8010920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8010926:	e012      	b.n	801094e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8010928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801092a:	685b      	ldr	r3, [r3, #4]
 801092c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801092e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010930:	88db      	ldrh	r3, [r3, #6]
 8010932:	b29a      	uxth	r2, r3
 8010934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010936:	889b      	ldrh	r3, [r3, #4]
 8010938:	b29b      	uxth	r3, r3
 801093a:	429a      	cmp	r2, r3
 801093c:	d002      	beq.n	8010944 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801093e:	2300      	movs	r3, #0
 8010940:	623b      	str	r3, [r7, #32]
            break;
 8010942:	e007      	b.n	8010954 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8010944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010946:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8010948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801094e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010950:	2b00      	cmp	r3, #0
 8010952:	d1e9      	bne.n	8010928 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010954:	6a3b      	ldr	r3, [r7, #32]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d022      	beq.n	80109a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	685b      	ldr	r3, [r3, #4]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d106      	bne.n	8010970 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8010962:	4b15      	ldr	r3, [pc, #84]	@ (80109b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010964:	f240 12df 	movw	r2, #479	@ 0x1df
 8010968:	4917      	ldr	r1, [pc, #92]	@ (80109c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801096a:	4815      	ldr	r0, [pc, #84]	@ (80109c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801096c:	f000 fd40 	bl	80113f0 <iprintf>
          LWIP_ASSERT("sanity check",
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	685b      	ldr	r3, [r3, #4]
 8010974:	685b      	ldr	r3, [r3, #4]
 8010976:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010978:	429a      	cmp	r2, r3
 801097a:	d106      	bne.n	801098a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801097c:	4b0e      	ldr	r3, [pc, #56]	@ (80109b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801097e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8010982:	4911      	ldr	r1, [pc, #68]	@ (80109c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010984:	480e      	ldr	r0, [pc, #56]	@ (80109c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010986:	f000 fd33 	bl	80113f0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801098a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d006      	beq.n	80109a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8010992:	4b09      	ldr	r3, [pc, #36]	@ (80109b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010994:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8010998:	490c      	ldr	r1, [pc, #48]	@ (80109cc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801099a:	4809      	ldr	r0, [pc, #36]	@ (80109c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801099c:	f000 fd28 	bl	80113f0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80109a0:	6a3b      	ldr	r3, [r7, #32]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	bf14      	ite	ne
 80109a6:	2301      	movne	r3, #1
 80109a8:	2300      	moveq	r3, #0
 80109aa:	b2db      	uxtb	r3, r3
 80109ac:	e000      	b.n	80109b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80109ae:	2300      	movs	r3, #0
}
 80109b0:	4618      	mov	r0, r3
 80109b2:	3730      	adds	r7, #48	@ 0x30
 80109b4:	46bd      	mov	sp, r7
 80109b6:	bd80      	pop	{r7, pc}
 80109b8:	08014bf8 	.word	0x08014bf8
 80109bc:	08014cdc 	.word	0x08014cdc
 80109c0:	08014c40 	.word	0x08014c40
 80109c4:	08014cfc 	.word	0x08014cfc
 80109c8:	08014d34 	.word	0x08014d34
 80109cc:	08014d44 	.word	0x08014d44

080109d0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b08e      	sub	sp, #56	@ 0x38
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	685b      	ldr	r3, [r3, #4]
 80109dc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80109de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109e0:	781b      	ldrb	r3, [r3, #0]
 80109e2:	f003 030f 	and.w	r3, r3, #15
 80109e6:	b2db      	uxtb	r3, r3
 80109e8:	009b      	lsls	r3, r3, #2
 80109ea:	b2db      	uxtb	r3, r3
 80109ec:	2b14      	cmp	r3, #20
 80109ee:	f040 8171 	bne.w	8010cd4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80109f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109f4:	88db      	ldrh	r3, [r3, #6]
 80109f6:	b29b      	uxth	r3, r3
 80109f8:	4618      	mov	r0, r3
 80109fa:	f7f5 ffbb 	bl	8006974 <lwip_htons>
 80109fe:	4603      	mov	r3, r0
 8010a00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010a04:	b29b      	uxth	r3, r3
 8010a06:	00db      	lsls	r3, r3, #3
 8010a08:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a0c:	885b      	ldrh	r3, [r3, #2]
 8010a0e:	b29b      	uxth	r3, r3
 8010a10:	4618      	mov	r0, r3
 8010a12:	f7f5 ffaf 	bl	8006974 <lwip_htons>
 8010a16:	4603      	mov	r3, r0
 8010a18:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8010a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a1c:	781b      	ldrb	r3, [r3, #0]
 8010a1e:	f003 030f 	and.w	r3, r3, #15
 8010a22:	b2db      	uxtb	r3, r3
 8010a24:	009b      	lsls	r3, r3, #2
 8010a26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8010a2a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010a2e:	b29b      	uxth	r3, r3
 8010a30:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010a32:	429a      	cmp	r2, r3
 8010a34:	f0c0 8150 	bcc.w	8010cd8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8010a38:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010a3c:	b29b      	uxth	r3, r3
 8010a3e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010a40:	1ad3      	subs	r3, r2, r3
 8010a42:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010a44:	6878      	ldr	r0, [r7, #4]
 8010a46:	f7f7 fbad 	bl	80081a4 <pbuf_clen>
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8010a4e:	4b8c      	ldr	r3, [pc, #560]	@ (8010c80 <ip4_reass+0x2b0>)
 8010a50:	881b      	ldrh	r3, [r3, #0]
 8010a52:	461a      	mov	r2, r3
 8010a54:	8c3b      	ldrh	r3, [r7, #32]
 8010a56:	4413      	add	r3, r2
 8010a58:	2b0a      	cmp	r3, #10
 8010a5a:	dd10      	ble.n	8010a7e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010a5c:	8c3b      	ldrh	r3, [r7, #32]
 8010a5e:	4619      	mov	r1, r3
 8010a60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010a62:	f7ff fd81 	bl	8010568 <ip_reass_remove_oldest_datagram>
 8010a66:	4603      	mov	r3, r0
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	f000 8137 	beq.w	8010cdc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8010a6e:	4b84      	ldr	r3, [pc, #528]	@ (8010c80 <ip4_reass+0x2b0>)
 8010a70:	881b      	ldrh	r3, [r3, #0]
 8010a72:	461a      	mov	r2, r3
 8010a74:	8c3b      	ldrh	r3, [r7, #32]
 8010a76:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010a78:	2b0a      	cmp	r3, #10
 8010a7a:	f300 812f 	bgt.w	8010cdc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010a7e:	4b81      	ldr	r3, [pc, #516]	@ (8010c84 <ip4_reass+0x2b4>)
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	633b      	str	r3, [r7, #48]	@ 0x30
 8010a84:	e015      	b.n	8010ab2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a88:	695a      	ldr	r2, [r3, #20]
 8010a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a8c:	68db      	ldr	r3, [r3, #12]
 8010a8e:	429a      	cmp	r2, r3
 8010a90:	d10c      	bne.n	8010aac <ip4_reass+0xdc>
 8010a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a94:	699a      	ldr	r2, [r3, #24]
 8010a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a98:	691b      	ldr	r3, [r3, #16]
 8010a9a:	429a      	cmp	r2, r3
 8010a9c:	d106      	bne.n	8010aac <ip4_reass+0xdc>
 8010a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010aa0:	899a      	ldrh	r2, [r3, #12]
 8010aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010aa4:	889b      	ldrh	r3, [r3, #4]
 8010aa6:	b29b      	uxth	r3, r3
 8010aa8:	429a      	cmp	r2, r3
 8010aaa:	d006      	beq.n	8010aba <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	633b      	str	r3, [r7, #48]	@ 0x30
 8010ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d1e6      	bne.n	8010a86 <ip4_reass+0xb6>
 8010ab8:	e000      	b.n	8010abc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8010aba:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8010abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d109      	bne.n	8010ad6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8010ac2:	8c3b      	ldrh	r3, [r7, #32]
 8010ac4:	4619      	mov	r1, r3
 8010ac6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010ac8:	f7ff fdb0 	bl	801062c <ip_reass_enqueue_new_datagram>
 8010acc:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8010ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d11c      	bne.n	8010b0e <ip4_reass+0x13e>
      goto nullreturn;
 8010ad4:	e105      	b.n	8010ce2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ad8:	88db      	ldrh	r3, [r3, #6]
 8010ada:	b29b      	uxth	r3, r3
 8010adc:	4618      	mov	r0, r3
 8010ade:	f7f5 ff49 	bl	8006974 <lwip_htons>
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d110      	bne.n	8010b0e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8010aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010aee:	89db      	ldrh	r3, [r3, #14]
 8010af0:	4618      	mov	r0, r3
 8010af2:	f7f5 ff3f 	bl	8006974 <lwip_htons>
 8010af6:	4603      	mov	r3, r0
 8010af8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d006      	beq.n	8010b0e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8010b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b02:	3308      	adds	r3, #8
 8010b04:	2214      	movs	r2, #20
 8010b06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f000 fd6a 	bl	80115e2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8010b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b10:	88db      	ldrh	r3, [r3, #6]
 8010b12:	b29b      	uxth	r3, r3
 8010b14:	f003 0320 	and.w	r3, r3, #32
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	bf0c      	ite	eq
 8010b1c:	2301      	moveq	r3, #1
 8010b1e:	2300      	movne	r3, #0
 8010b20:	b2db      	uxtb	r3, r3
 8010b22:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8010b24:	69fb      	ldr	r3, [r7, #28]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d00e      	beq.n	8010b48 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8010b2a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8010b2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010b2e:	4413      	add	r3, r2
 8010b30:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8010b32:	8b7a      	ldrh	r2, [r7, #26]
 8010b34:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010b36:	429a      	cmp	r2, r3
 8010b38:	f0c0 80a0 	bcc.w	8010c7c <ip4_reass+0x2ac>
 8010b3c:	8b7b      	ldrh	r3, [r7, #26]
 8010b3e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8010b42:	4293      	cmp	r3, r2
 8010b44:	f200 809a 	bhi.w	8010c7c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010b48:	69fa      	ldr	r2, [r7, #28]
 8010b4a:	6879      	ldr	r1, [r7, #4]
 8010b4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010b4e:	f7ff fdd5 	bl	80106fc <ip_reass_chain_frag_into_datagram_and_validate>
 8010b52:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010b54:	697b      	ldr	r3, [r7, #20]
 8010b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b5a:	f000 809b 	beq.w	8010c94 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8010b5e:	4b48      	ldr	r3, [pc, #288]	@ (8010c80 <ip4_reass+0x2b0>)
 8010b60:	881a      	ldrh	r2, [r3, #0]
 8010b62:	8c3b      	ldrh	r3, [r7, #32]
 8010b64:	4413      	add	r3, r2
 8010b66:	b29a      	uxth	r2, r3
 8010b68:	4b45      	ldr	r3, [pc, #276]	@ (8010c80 <ip4_reass+0x2b0>)
 8010b6a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8010b6c:	69fb      	ldr	r3, [r7, #28]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d00d      	beq.n	8010b8e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8010b72:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8010b74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010b76:	4413      	add	r3, r2
 8010b78:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8010b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b7c:	8a7a      	ldrh	r2, [r7, #18]
 8010b7e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b82:	7f9b      	ldrb	r3, [r3, #30]
 8010b84:	f043 0301 	orr.w	r3, r3, #1
 8010b88:	b2da      	uxtb	r2, r3
 8010b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b8c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8010b8e:	697b      	ldr	r3, [r7, #20]
 8010b90:	2b01      	cmp	r3, #1
 8010b92:	d171      	bne.n	8010c78 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b96:	8b9b      	ldrh	r3, [r3, #28]
 8010b98:	3314      	adds	r3, #20
 8010b9a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8010b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b9e:	685b      	ldr	r3, [r3, #4]
 8010ba0:	685b      	ldr	r3, [r3, #4]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8010ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ba8:	685b      	ldr	r3, [r3, #4]
 8010baa:	685b      	ldr	r3, [r3, #4]
 8010bac:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8010bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bb0:	3308      	adds	r3, #8
 8010bb2:	2214      	movs	r2, #20
 8010bb4:	4619      	mov	r1, r3
 8010bb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010bb8:	f000 fd13 	bl	80115e2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8010bbc:	8a3b      	ldrh	r3, [r7, #16]
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	f7f5 fed8 	bl	8006974 <lwip_htons>
 8010bc4:	4603      	mov	r3, r0
 8010bc6:	461a      	mov	r2, r3
 8010bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bca:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8010bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bce:	2200      	movs	r2, #0
 8010bd0:	719a      	strb	r2, [r3, #6]
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8010bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bd8:	2200      	movs	r2, #0
 8010bda:	729a      	strb	r2, [r3, #10]
 8010bdc:	2200      	movs	r2, #0
 8010bde:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8010be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010be2:	685b      	ldr	r3, [r3, #4]
 8010be4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8010be6:	e00d      	b.n	8010c04 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8010be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010bea:	685b      	ldr	r3, [r3, #4]
 8010bec:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8010bee:	2114      	movs	r1, #20
 8010bf0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8010bf2:	f7f7 f9c9 	bl	8007f88 <pbuf_remove_header>
      pbuf_cat(p, r);
 8010bf6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010bf8:	6878      	ldr	r0, [r7, #4]
 8010bfa:	f7f7 fb0d 	bl	8008218 <pbuf_cat>
      r = iprh->next_pbuf;
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8010c04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d1ee      	bne.n	8010be8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8010c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8010c84 <ip4_reass+0x2b4>)
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010c10:	429a      	cmp	r2, r3
 8010c12:	d102      	bne.n	8010c1a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8010c14:	2300      	movs	r3, #0
 8010c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010c18:	e010      	b.n	8010c3c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8010c84 <ip4_reass+0x2b4>)
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010c20:	e007      	b.n	8010c32 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8010c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010c28:	429a      	cmp	r2, r3
 8010c2a:	d006      	beq.n	8010c3a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8010c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d1f4      	bne.n	8010c22 <ip4_reass+0x252>
 8010c38:	e000      	b.n	8010c3c <ip4_reass+0x26c>
          break;
 8010c3a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8010c3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010c3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010c40:	f7ff fd2e 	bl	80106a0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010c44:	6878      	ldr	r0, [r7, #4]
 8010c46:	f7f7 faad 	bl	80081a4 <pbuf_clen>
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8010c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8010c80 <ip4_reass+0x2b0>)
 8010c50:	881b      	ldrh	r3, [r3, #0]
 8010c52:	8c3a      	ldrh	r2, [r7, #32]
 8010c54:	429a      	cmp	r2, r3
 8010c56:	d906      	bls.n	8010c66 <ip4_reass+0x296>
 8010c58:	4b0b      	ldr	r3, [pc, #44]	@ (8010c88 <ip4_reass+0x2b8>)
 8010c5a:	f240 229b 	movw	r2, #667	@ 0x29b
 8010c5e:	490b      	ldr	r1, [pc, #44]	@ (8010c8c <ip4_reass+0x2bc>)
 8010c60:	480b      	ldr	r0, [pc, #44]	@ (8010c90 <ip4_reass+0x2c0>)
 8010c62:	f000 fbc5 	bl	80113f0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010c66:	4b06      	ldr	r3, [pc, #24]	@ (8010c80 <ip4_reass+0x2b0>)
 8010c68:	881a      	ldrh	r2, [r3, #0]
 8010c6a:	8c3b      	ldrh	r3, [r7, #32]
 8010c6c:	1ad3      	subs	r3, r2, r3
 8010c6e:	b29a      	uxth	r2, r3
 8010c70:	4b03      	ldr	r3, [pc, #12]	@ (8010c80 <ip4_reass+0x2b0>)
 8010c72:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	e038      	b.n	8010cea <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8010c78:	2300      	movs	r3, #0
 8010c7a:	e036      	b.n	8010cea <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8010c7c:	bf00      	nop
 8010c7e:	e00a      	b.n	8010c96 <ip4_reass+0x2c6>
 8010c80:	20008700 	.word	0x20008700
 8010c84:	200086fc 	.word	0x200086fc
 8010c88:	08014bf8 	.word	0x08014bf8
 8010c8c:	08014d68 	.word	0x08014d68
 8010c90:	08014c40 	.word	0x08014c40
    goto nullreturn_ipr;
 8010c94:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d106      	bne.n	8010caa <ip4_reass+0x2da>
 8010c9c:	4b15      	ldr	r3, [pc, #84]	@ (8010cf4 <ip4_reass+0x324>)
 8010c9e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8010ca2:	4915      	ldr	r1, [pc, #84]	@ (8010cf8 <ip4_reass+0x328>)
 8010ca4:	4815      	ldr	r0, [pc, #84]	@ (8010cfc <ip4_reass+0x32c>)
 8010ca6:	f000 fba3 	bl	80113f0 <iprintf>
  if (ipr->p == NULL) {
 8010caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cac:	685b      	ldr	r3, [r3, #4]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d116      	bne.n	8010ce0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8010cb2:	4b13      	ldr	r3, [pc, #76]	@ (8010d00 <ip4_reass+0x330>)
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010cb8:	429a      	cmp	r2, r3
 8010cba:	d006      	beq.n	8010cca <ip4_reass+0x2fa>
 8010cbc:	4b0d      	ldr	r3, [pc, #52]	@ (8010cf4 <ip4_reass+0x324>)
 8010cbe:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8010cc2:	4910      	ldr	r1, [pc, #64]	@ (8010d04 <ip4_reass+0x334>)
 8010cc4:	480d      	ldr	r0, [pc, #52]	@ (8010cfc <ip4_reass+0x32c>)
 8010cc6:	f000 fb93 	bl	80113f0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8010cca:	2100      	movs	r1, #0
 8010ccc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010cce:	f7ff fce7 	bl	80106a0 <ip_reass_dequeue_datagram>
 8010cd2:	e006      	b.n	8010ce2 <ip4_reass+0x312>
    goto nullreturn;
 8010cd4:	bf00      	nop
 8010cd6:	e004      	b.n	8010ce2 <ip4_reass+0x312>
    goto nullreturn;
 8010cd8:	bf00      	nop
 8010cda:	e002      	b.n	8010ce2 <ip4_reass+0x312>
      goto nullreturn;
 8010cdc:	bf00      	nop
 8010cde:	e000      	b.n	8010ce2 <ip4_reass+0x312>
  }

nullreturn:
 8010ce0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8010ce2:	6878      	ldr	r0, [r7, #4]
 8010ce4:	f7f7 f9d6 	bl	8008094 <pbuf_free>
  return NULL;
 8010ce8:	2300      	movs	r3, #0
}
 8010cea:	4618      	mov	r0, r3
 8010cec:	3738      	adds	r7, #56	@ 0x38
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bd80      	pop	{r7, pc}
 8010cf2:	bf00      	nop
 8010cf4:	08014bf8 	.word	0x08014bf8
 8010cf8:	08014d84 	.word	0x08014d84
 8010cfc:	08014c40 	.word	0x08014c40
 8010d00:	200086fc 	.word	0x200086fc
 8010d04:	08014d90 	.word	0x08014d90

08010d08 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8010d0c:	2005      	movs	r0, #5
 8010d0e:	f7f6 fadb 	bl	80072c8 <memp_malloc>
 8010d12:	4603      	mov	r3, r0
}
 8010d14:	4618      	mov	r0, r3
 8010d16:	bd80      	pop	{r7, pc}

08010d18 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b082      	sub	sp, #8
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d106      	bne.n	8010d34 <ip_frag_free_pbuf_custom_ref+0x1c>
 8010d26:	4b07      	ldr	r3, [pc, #28]	@ (8010d44 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8010d28:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8010d2c:	4906      	ldr	r1, [pc, #24]	@ (8010d48 <ip_frag_free_pbuf_custom_ref+0x30>)
 8010d2e:	4807      	ldr	r0, [pc, #28]	@ (8010d4c <ip_frag_free_pbuf_custom_ref+0x34>)
 8010d30:	f000 fb5e 	bl	80113f0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8010d34:	6879      	ldr	r1, [r7, #4]
 8010d36:	2005      	movs	r0, #5
 8010d38:	f7f6 fb36 	bl	80073a8 <memp_free>
}
 8010d3c:	bf00      	nop
 8010d3e:	3708      	adds	r7, #8
 8010d40:	46bd      	mov	sp, r7
 8010d42:	bd80      	pop	{r7, pc}
 8010d44:	08014bf8 	.word	0x08014bf8
 8010d48:	08014db0 	.word	0x08014db0
 8010d4c:	08014c40 	.word	0x08014c40

08010d50 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b084      	sub	sp, #16
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d106      	bne.n	8010d70 <ipfrag_free_pbuf_custom+0x20>
 8010d62:	4b11      	ldr	r3, [pc, #68]	@ (8010da8 <ipfrag_free_pbuf_custom+0x58>)
 8010d64:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8010d68:	4910      	ldr	r1, [pc, #64]	@ (8010dac <ipfrag_free_pbuf_custom+0x5c>)
 8010d6a:	4811      	ldr	r0, [pc, #68]	@ (8010db0 <ipfrag_free_pbuf_custom+0x60>)
 8010d6c:	f000 fb40 	bl	80113f0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8010d70:	68fa      	ldr	r2, [r7, #12]
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	429a      	cmp	r2, r3
 8010d76:	d006      	beq.n	8010d86 <ipfrag_free_pbuf_custom+0x36>
 8010d78:	4b0b      	ldr	r3, [pc, #44]	@ (8010da8 <ipfrag_free_pbuf_custom+0x58>)
 8010d7a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8010d7e:	490d      	ldr	r1, [pc, #52]	@ (8010db4 <ipfrag_free_pbuf_custom+0x64>)
 8010d80:	480b      	ldr	r0, [pc, #44]	@ (8010db0 <ipfrag_free_pbuf_custom+0x60>)
 8010d82:	f000 fb35 	bl	80113f0 <iprintf>
  if (pcr->original != NULL) {
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	695b      	ldr	r3, [r3, #20]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d004      	beq.n	8010d98 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	695b      	ldr	r3, [r3, #20]
 8010d92:	4618      	mov	r0, r3
 8010d94:	f7f7 f97e 	bl	8008094 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8010d98:	68f8      	ldr	r0, [r7, #12]
 8010d9a:	f7ff ffbd 	bl	8010d18 <ip_frag_free_pbuf_custom_ref>
}
 8010d9e:	bf00      	nop
 8010da0:	3710      	adds	r7, #16
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}
 8010da6:	bf00      	nop
 8010da8:	08014bf8 	.word	0x08014bf8
 8010dac:	08014dbc 	.word	0x08014dbc
 8010db0:	08014c40 	.word	0x08014c40
 8010db4:	08014dc8 	.word	0x08014dc8

08010db8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8010db8:	b580      	push	{r7, lr}
 8010dba:	b094      	sub	sp, #80	@ 0x50
 8010dbc:	af02      	add	r7, sp, #8
 8010dbe:	60f8      	str	r0, [r7, #12]
 8010dc0:	60b9      	str	r1, [r7, #8]
 8010dc2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8010dca:	68bb      	ldr	r3, [r7, #8]
 8010dcc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010dce:	3b14      	subs	r3, #20
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	da00      	bge.n	8010dd6 <ip4_frag+0x1e>
 8010dd4:	3307      	adds	r3, #7
 8010dd6:	10db      	asrs	r3, r3, #3
 8010dd8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8010dda:	2314      	movs	r3, #20
 8010ddc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	685b      	ldr	r3, [r3, #4]
 8010de2:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8010de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010de6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8010de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dea:	781b      	ldrb	r3, [r3, #0]
 8010dec:	f003 030f 	and.w	r3, r3, #15
 8010df0:	b2db      	uxtb	r3, r3
 8010df2:	009b      	lsls	r3, r3, #2
 8010df4:	b2db      	uxtb	r3, r3
 8010df6:	2b14      	cmp	r3, #20
 8010df8:	d002      	beq.n	8010e00 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8010dfa:	f06f 0305 	mvn.w	r3, #5
 8010dfe:	e110      	b.n	8011022 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	895b      	ldrh	r3, [r3, #10]
 8010e04:	2b13      	cmp	r3, #19
 8010e06:	d809      	bhi.n	8010e1c <ip4_frag+0x64>
 8010e08:	4b88      	ldr	r3, [pc, #544]	@ (801102c <ip4_frag+0x274>)
 8010e0a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8010e0e:	4988      	ldr	r1, [pc, #544]	@ (8011030 <ip4_frag+0x278>)
 8010e10:	4888      	ldr	r0, [pc, #544]	@ (8011034 <ip4_frag+0x27c>)
 8010e12:	f000 faed 	bl	80113f0 <iprintf>
 8010e16:	f06f 0305 	mvn.w	r3, #5
 8010e1a:	e102      	b.n	8011022 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8010e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e1e:	88db      	ldrh	r3, [r3, #6]
 8010e20:	b29b      	uxth	r3, r3
 8010e22:	4618      	mov	r0, r3
 8010e24:	f7f5 fda6 	bl	8006974 <lwip_htons>
 8010e28:	4603      	mov	r3, r0
 8010e2a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8010e2c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010e2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010e32:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8010e36:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010e38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	891b      	ldrh	r3, [r3, #8]
 8010e42:	3b14      	subs	r3, #20
 8010e44:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8010e48:	e0e1      	b.n	801100e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8010e4a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010e4c:	00db      	lsls	r3, r3, #3
 8010e4e:	b29b      	uxth	r3, r3
 8010e50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010e54:	4293      	cmp	r3, r2
 8010e56:	bf28      	it	cs
 8010e58:	4613      	movcs	r3, r2
 8010e5a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8010e5c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010e60:	2114      	movs	r1, #20
 8010e62:	200e      	movs	r0, #14
 8010e64:	f7f6 fe32 	bl	8007acc <pbuf_alloc>
 8010e68:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8010e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	f000 80d5 	beq.w	801101c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e74:	895b      	ldrh	r3, [r3, #10]
 8010e76:	2b13      	cmp	r3, #19
 8010e78:	d806      	bhi.n	8010e88 <ip4_frag+0xd0>
 8010e7a:	4b6c      	ldr	r3, [pc, #432]	@ (801102c <ip4_frag+0x274>)
 8010e7c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8010e80:	496d      	ldr	r1, [pc, #436]	@ (8011038 <ip4_frag+0x280>)
 8010e82:	486c      	ldr	r0, [pc, #432]	@ (8011034 <ip4_frag+0x27c>)
 8010e84:	f000 fab4 	bl	80113f0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8010e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e8a:	685b      	ldr	r3, [r3, #4]
 8010e8c:	2214      	movs	r2, #20
 8010e8e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010e90:	4618      	mov	r0, r3
 8010e92:	f000 fba6 	bl	80115e2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e98:	685b      	ldr	r3, [r3, #4]
 8010e9a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8010e9c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010e9e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8010ea2:	e064      	b.n	8010f6e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	895a      	ldrh	r2, [r3, #10]
 8010ea8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010eaa:	1ad3      	subs	r3, r2, r3
 8010eac:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	895b      	ldrh	r3, [r3, #10]
 8010eb2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8010eb4:	429a      	cmp	r2, r3
 8010eb6:	d906      	bls.n	8010ec6 <ip4_frag+0x10e>
 8010eb8:	4b5c      	ldr	r3, [pc, #368]	@ (801102c <ip4_frag+0x274>)
 8010eba:	f240 322d 	movw	r2, #813	@ 0x32d
 8010ebe:	495f      	ldr	r1, [pc, #380]	@ (801103c <ip4_frag+0x284>)
 8010ec0:	485c      	ldr	r0, [pc, #368]	@ (8011034 <ip4_frag+0x27c>)
 8010ec2:	f000 fa95 	bl	80113f0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8010ec6:	8bfa      	ldrh	r2, [r7, #30]
 8010ec8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010ecc:	4293      	cmp	r3, r2
 8010ece:	bf28      	it	cs
 8010ed0:	4613      	movcs	r3, r2
 8010ed2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8010ed6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d105      	bne.n	8010eea <ip4_frag+0x132>
        poff = 0;
 8010ede:	2300      	movs	r3, #0
 8010ee0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	60fb      	str	r3, [r7, #12]
        continue;
 8010ee8:	e041      	b.n	8010f6e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8010eea:	f7ff ff0d 	bl	8010d08 <ip_frag_alloc_pbuf_custom_ref>
 8010eee:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8010ef0:	69bb      	ldr	r3, [r7, #24]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d103      	bne.n	8010efe <ip4_frag+0x146>
        pbuf_free(rambuf);
 8010ef6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010ef8:	f7f7 f8cc 	bl	8008094 <pbuf_free>
        goto memerr;
 8010efc:	e08f      	b.n	801101e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010efe:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8010f04:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8010f06:	4413      	add	r3, r2
 8010f08:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8010f0c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8010f10:	9201      	str	r2, [sp, #4]
 8010f12:	9300      	str	r3, [sp, #0]
 8010f14:	4603      	mov	r3, r0
 8010f16:	2241      	movs	r2, #65	@ 0x41
 8010f18:	2000      	movs	r0, #0
 8010f1a:	f7f6 ff01 	bl	8007d20 <pbuf_alloced_custom>
 8010f1e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8010f20:	697b      	ldr	r3, [r7, #20]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d106      	bne.n	8010f34 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8010f26:	69b8      	ldr	r0, [r7, #24]
 8010f28:	f7ff fef6 	bl	8010d18 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8010f2c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010f2e:	f7f7 f8b1 	bl	8008094 <pbuf_free>
        goto memerr;
 8010f32:	e074      	b.n	801101e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8010f34:	68f8      	ldr	r0, [r7, #12]
 8010f36:	f7f7 f94d 	bl	80081d4 <pbuf_ref>
      pcr->original = p;
 8010f3a:	69bb      	ldr	r3, [r7, #24]
 8010f3c:	68fa      	ldr	r2, [r7, #12]
 8010f3e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010f40:	69bb      	ldr	r3, [r7, #24]
 8010f42:	4a3f      	ldr	r2, [pc, #252]	@ (8011040 <ip4_frag+0x288>)
 8010f44:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8010f46:	6979      	ldr	r1, [r7, #20]
 8010f48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010f4a:	f7f7 f965 	bl	8008218 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8010f4e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8010f52:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010f56:	1ad3      	subs	r3, r2, r3
 8010f58:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8010f5c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d004      	beq.n	8010f6e <ip4_frag+0x1b6>
        poff = 0;
 8010f64:	2300      	movs	r3, #0
 8010f66:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8010f6e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d196      	bne.n	8010ea4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8010f76:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8010f78:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8010f7c:	4413      	add	r3, r2
 8010f7e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8010f80:	68bb      	ldr	r3, [r7, #8]
 8010f82:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8010f84:	f1a3 0213 	sub.w	r2, r3, #19
 8010f88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010f8c:	429a      	cmp	r2, r3
 8010f8e:	bfcc      	ite	gt
 8010f90:	2301      	movgt	r3, #1
 8010f92:	2300      	movle	r3, #0
 8010f94:	b2db      	uxtb	r3, r3
 8010f96:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8010f98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8010f9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010fa0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8010fa2:	6a3b      	ldr	r3, [r7, #32]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d002      	beq.n	8010fae <ip4_frag+0x1f6>
 8010fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d003      	beq.n	8010fb6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8010fae:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010fb0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8010fb4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8010fb6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010fb8:	4618      	mov	r0, r3
 8010fba:	f7f5 fcdb 	bl	8006974 <lwip_htons>
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	461a      	mov	r2, r3
 8010fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fc4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8010fc6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010fc8:	3314      	adds	r3, #20
 8010fca:	b29b      	uxth	r3, r3
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f7f5 fcd1 	bl	8006974 <lwip_htons>
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	461a      	mov	r2, r3
 8010fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fd8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8010fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fdc:	2200      	movs	r2, #0
 8010fde:	729a      	strb	r2, [r3, #10]
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8010fe4:	68bb      	ldr	r3, [r7, #8]
 8010fe6:	695b      	ldr	r3, [r3, #20]
 8010fe8:	687a      	ldr	r2, [r7, #4]
 8010fea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010fec:	68b8      	ldr	r0, [r7, #8]
 8010fee:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8010ff0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010ff2:	f7f7 f84f 	bl	8008094 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8010ff6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010ffa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8010ffc:	1ad3      	subs	r3, r2, r3
 8010ffe:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8011002:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8011006:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011008:	4413      	add	r3, r2
 801100a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801100e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011012:	2b00      	cmp	r3, #0
 8011014:	f47f af19 	bne.w	8010e4a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8011018:	2300      	movs	r3, #0
 801101a:	e002      	b.n	8011022 <ip4_frag+0x26a>
      goto memerr;
 801101c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801101e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011022:	4618      	mov	r0, r3
 8011024:	3748      	adds	r7, #72	@ 0x48
 8011026:	46bd      	mov	sp, r7
 8011028:	bd80      	pop	{r7, pc}
 801102a:	bf00      	nop
 801102c:	08014bf8 	.word	0x08014bf8
 8011030:	08014dd4 	.word	0x08014dd4
 8011034:	08014c40 	.word	0x08014c40
 8011038:	08014df0 	.word	0x08014df0
 801103c:	08014e10 	.word	0x08014e10
 8011040:	08010d51 	.word	0x08010d51

08011044 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8011044:	b580      	push	{r7, lr}
 8011046:	b086      	sub	sp, #24
 8011048:	af00      	add	r7, sp, #0
 801104a:	6078      	str	r0, [r7, #4]
 801104c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801104e:	230e      	movs	r3, #14
 8011050:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	895b      	ldrh	r3, [r3, #10]
 8011056:	2b0e      	cmp	r3, #14
 8011058:	d96e      	bls.n	8011138 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	7bdb      	ldrb	r3, [r3, #15]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d106      	bne.n	8011070 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8011062:	683b      	ldr	r3, [r7, #0]
 8011064:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011068:	3301      	adds	r3, #1
 801106a:	b2da      	uxtb	r2, r3
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	685b      	ldr	r3, [r3, #4]
 8011074:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8011076:	693b      	ldr	r3, [r7, #16]
 8011078:	7b1a      	ldrb	r2, [r3, #12]
 801107a:	7b5b      	ldrb	r3, [r3, #13]
 801107c:	021b      	lsls	r3, r3, #8
 801107e:	4313      	orrs	r3, r2
 8011080:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8011082:	693b      	ldr	r3, [r7, #16]
 8011084:	781b      	ldrb	r3, [r3, #0]
 8011086:	f003 0301 	and.w	r3, r3, #1
 801108a:	2b00      	cmp	r3, #0
 801108c:	d023      	beq.n	80110d6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801108e:	693b      	ldr	r3, [r7, #16]
 8011090:	781b      	ldrb	r3, [r3, #0]
 8011092:	2b01      	cmp	r3, #1
 8011094:	d10f      	bne.n	80110b6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011096:	693b      	ldr	r3, [r7, #16]
 8011098:	785b      	ldrb	r3, [r3, #1]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d11b      	bne.n	80110d6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801109e:	693b      	ldr	r3, [r7, #16]
 80110a0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80110a2:	2b5e      	cmp	r3, #94	@ 0x5e
 80110a4:	d117      	bne.n	80110d6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	7b5b      	ldrb	r3, [r3, #13]
 80110aa:	f043 0310 	orr.w	r3, r3, #16
 80110ae:	b2da      	uxtb	r2, r3
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	735a      	strb	r2, [r3, #13]
 80110b4:	e00f      	b.n	80110d6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80110b6:	693b      	ldr	r3, [r7, #16]
 80110b8:	2206      	movs	r2, #6
 80110ba:	4928      	ldr	r1, [pc, #160]	@ (801115c <ethernet_input+0x118>)
 80110bc:	4618      	mov	r0, r3
 80110be:	f000 f9ec 	bl	801149a <memcmp>
 80110c2:	4603      	mov	r3, r0
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d106      	bne.n	80110d6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	7b5b      	ldrb	r3, [r3, #13]
 80110cc:	f043 0308 	orr.w	r3, r3, #8
 80110d0:	b2da      	uxtb	r2, r3
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80110d6:	89fb      	ldrh	r3, [r7, #14]
 80110d8:	2b08      	cmp	r3, #8
 80110da:	d003      	beq.n	80110e4 <ethernet_input+0xa0>
 80110dc:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80110e0:	d014      	beq.n	801110c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80110e2:	e032      	b.n	801114a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80110e4:	683b      	ldr	r3, [r7, #0]
 80110e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80110ea:	f003 0308 	and.w	r3, r3, #8
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d024      	beq.n	801113c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80110f2:	8afb      	ldrh	r3, [r7, #22]
 80110f4:	4619      	mov	r1, r3
 80110f6:	6878      	ldr	r0, [r7, #4]
 80110f8:	f7f6 ff46 	bl	8007f88 <pbuf_remove_header>
 80110fc:	4603      	mov	r3, r0
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d11e      	bne.n	8011140 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8011102:	6839      	ldr	r1, [r7, #0]
 8011104:	6878      	ldr	r0, [r7, #4]
 8011106:	f7fe ff21 	bl	800ff4c <ip4_input>
      break;
 801110a:	e013      	b.n	8011134 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011112:	f003 0308 	and.w	r3, r3, #8
 8011116:	2b00      	cmp	r3, #0
 8011118:	d014      	beq.n	8011144 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801111a:	8afb      	ldrh	r3, [r7, #22]
 801111c:	4619      	mov	r1, r3
 801111e:	6878      	ldr	r0, [r7, #4]
 8011120:	f7f6 ff32 	bl	8007f88 <pbuf_remove_header>
 8011124:	4603      	mov	r3, r0
 8011126:	2b00      	cmp	r3, #0
 8011128:	d10e      	bne.n	8011148 <ethernet_input+0x104>
        etharp_input(p, netif);
 801112a:	6839      	ldr	r1, [r7, #0]
 801112c:	6878      	ldr	r0, [r7, #4]
 801112e:	f7fe f8c1 	bl	800f2b4 <etharp_input>
      break;
 8011132:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8011134:	2300      	movs	r3, #0
 8011136:	e00c      	b.n	8011152 <ethernet_input+0x10e>
    goto free_and_return;
 8011138:	bf00      	nop
 801113a:	e006      	b.n	801114a <ethernet_input+0x106>
        goto free_and_return;
 801113c:	bf00      	nop
 801113e:	e004      	b.n	801114a <ethernet_input+0x106>
        goto free_and_return;
 8011140:	bf00      	nop
 8011142:	e002      	b.n	801114a <ethernet_input+0x106>
        goto free_and_return;
 8011144:	bf00      	nop
 8011146:	e000      	b.n	801114a <ethernet_input+0x106>
        goto free_and_return;
 8011148:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801114a:	6878      	ldr	r0, [r7, #4]
 801114c:	f7f6 ffa2 	bl	8008094 <pbuf_free>
  return ERR_OK;
 8011150:	2300      	movs	r3, #0
}
 8011152:	4618      	mov	r0, r3
 8011154:	3718      	adds	r7, #24
 8011156:	46bd      	mov	sp, r7
 8011158:	bd80      	pop	{r7, pc}
 801115a:	bf00      	nop
 801115c:	08015418 	.word	0x08015418

08011160 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8011160:	b580      	push	{r7, lr}
 8011162:	b086      	sub	sp, #24
 8011164:	af00      	add	r7, sp, #0
 8011166:	60f8      	str	r0, [r7, #12]
 8011168:	60b9      	str	r1, [r7, #8]
 801116a:	607a      	str	r2, [r7, #4]
 801116c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801116e:	8c3b      	ldrh	r3, [r7, #32]
 8011170:	4618      	mov	r0, r3
 8011172:	f7f5 fbff 	bl	8006974 <lwip_htons>
 8011176:	4603      	mov	r3, r0
 8011178:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801117a:	210e      	movs	r1, #14
 801117c:	68b8      	ldr	r0, [r7, #8]
 801117e:	f7f6 fef3 	bl	8007f68 <pbuf_add_header>
 8011182:	4603      	mov	r3, r0
 8011184:	2b00      	cmp	r3, #0
 8011186:	d125      	bne.n	80111d4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8011188:	68bb      	ldr	r3, [r7, #8]
 801118a:	685b      	ldr	r3, [r3, #4]
 801118c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801118e:	693b      	ldr	r3, [r7, #16]
 8011190:	8afa      	ldrh	r2, [r7, #22]
 8011192:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8011194:	693b      	ldr	r3, [r7, #16]
 8011196:	2206      	movs	r2, #6
 8011198:	6839      	ldr	r1, [r7, #0]
 801119a:	4618      	mov	r0, r3
 801119c:	f000 fa21 	bl	80115e2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80111a0:	693b      	ldr	r3, [r7, #16]
 80111a2:	3306      	adds	r3, #6
 80111a4:	2206      	movs	r2, #6
 80111a6:	6879      	ldr	r1, [r7, #4]
 80111a8:	4618      	mov	r0, r3
 80111aa:	f000 fa1a 	bl	80115e2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80111b4:	2b06      	cmp	r3, #6
 80111b6:	d006      	beq.n	80111c6 <ethernet_output+0x66>
 80111b8:	4b0a      	ldr	r3, [pc, #40]	@ (80111e4 <ethernet_output+0x84>)
 80111ba:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80111be:	490a      	ldr	r1, [pc, #40]	@ (80111e8 <ethernet_output+0x88>)
 80111c0:	480a      	ldr	r0, [pc, #40]	@ (80111ec <ethernet_output+0x8c>)
 80111c2:	f000 f915 	bl	80113f0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	699b      	ldr	r3, [r3, #24]
 80111ca:	68b9      	ldr	r1, [r7, #8]
 80111cc:	68f8      	ldr	r0, [r7, #12]
 80111ce:	4798      	blx	r3
 80111d0:	4603      	mov	r3, r0
 80111d2:	e002      	b.n	80111da <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80111d4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80111d6:	f06f 0301 	mvn.w	r3, #1
}
 80111da:	4618      	mov	r0, r3
 80111dc:	3718      	adds	r7, #24
 80111de:	46bd      	mov	sp, r7
 80111e0:	bd80      	pop	{r7, pc}
 80111e2:	bf00      	nop
 80111e4:	08014e20 	.word	0x08014e20
 80111e8:	08014e58 	.word	0x08014e58
 80111ec:	08014e8c 	.word	0x08014e8c

080111f0 <rand>:
 80111f0:	4b16      	ldr	r3, [pc, #88]	@ (801124c <rand+0x5c>)
 80111f2:	b510      	push	{r4, lr}
 80111f4:	681c      	ldr	r4, [r3, #0]
 80111f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80111f8:	b9b3      	cbnz	r3, 8011228 <rand+0x38>
 80111fa:	2018      	movs	r0, #24
 80111fc:	f000 fa68 	bl	80116d0 <malloc>
 8011200:	4602      	mov	r2, r0
 8011202:	6320      	str	r0, [r4, #48]	@ 0x30
 8011204:	b920      	cbnz	r0, 8011210 <rand+0x20>
 8011206:	4b12      	ldr	r3, [pc, #72]	@ (8011250 <rand+0x60>)
 8011208:	4812      	ldr	r0, [pc, #72]	@ (8011254 <rand+0x64>)
 801120a:	2152      	movs	r1, #82	@ 0x52
 801120c:	f000 f9f8 	bl	8011600 <__assert_func>
 8011210:	4911      	ldr	r1, [pc, #68]	@ (8011258 <rand+0x68>)
 8011212:	4b12      	ldr	r3, [pc, #72]	@ (801125c <rand+0x6c>)
 8011214:	e9c0 1300 	strd	r1, r3, [r0]
 8011218:	4b11      	ldr	r3, [pc, #68]	@ (8011260 <rand+0x70>)
 801121a:	6083      	str	r3, [r0, #8]
 801121c:	230b      	movs	r3, #11
 801121e:	8183      	strh	r3, [r0, #12]
 8011220:	2100      	movs	r1, #0
 8011222:	2001      	movs	r0, #1
 8011224:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011228:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801122a:	480e      	ldr	r0, [pc, #56]	@ (8011264 <rand+0x74>)
 801122c:	690b      	ldr	r3, [r1, #16]
 801122e:	694c      	ldr	r4, [r1, #20]
 8011230:	4a0d      	ldr	r2, [pc, #52]	@ (8011268 <rand+0x78>)
 8011232:	4358      	muls	r0, r3
 8011234:	fb02 0004 	mla	r0, r2, r4, r0
 8011238:	fba3 3202 	umull	r3, r2, r3, r2
 801123c:	3301      	adds	r3, #1
 801123e:	eb40 0002 	adc.w	r0, r0, r2
 8011242:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8011246:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801124a:	bd10      	pop	{r4, pc}
 801124c:	20000038 	.word	0x20000038
 8011250:	08015426 	.word	0x08015426
 8011254:	0801543d 	.word	0x0801543d
 8011258:	abcd330e 	.word	0xabcd330e
 801125c:	e66d1234 	.word	0xe66d1234
 8011260:	0005deec 	.word	0x0005deec
 8011264:	5851f42d 	.word	0x5851f42d
 8011268:	4c957f2d 	.word	0x4c957f2d

0801126c <std>:
 801126c:	2300      	movs	r3, #0
 801126e:	b510      	push	{r4, lr}
 8011270:	4604      	mov	r4, r0
 8011272:	e9c0 3300 	strd	r3, r3, [r0]
 8011276:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801127a:	6083      	str	r3, [r0, #8]
 801127c:	8181      	strh	r1, [r0, #12]
 801127e:	6643      	str	r3, [r0, #100]	@ 0x64
 8011280:	81c2      	strh	r2, [r0, #14]
 8011282:	6183      	str	r3, [r0, #24]
 8011284:	4619      	mov	r1, r3
 8011286:	2208      	movs	r2, #8
 8011288:	305c      	adds	r0, #92	@ 0x5c
 801128a:	f000 f916 	bl	80114ba <memset>
 801128e:	4b0d      	ldr	r3, [pc, #52]	@ (80112c4 <std+0x58>)
 8011290:	6263      	str	r3, [r4, #36]	@ 0x24
 8011292:	4b0d      	ldr	r3, [pc, #52]	@ (80112c8 <std+0x5c>)
 8011294:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011296:	4b0d      	ldr	r3, [pc, #52]	@ (80112cc <std+0x60>)
 8011298:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801129a:	4b0d      	ldr	r3, [pc, #52]	@ (80112d0 <std+0x64>)
 801129c:	6323      	str	r3, [r4, #48]	@ 0x30
 801129e:	4b0d      	ldr	r3, [pc, #52]	@ (80112d4 <std+0x68>)
 80112a0:	6224      	str	r4, [r4, #32]
 80112a2:	429c      	cmp	r4, r3
 80112a4:	d006      	beq.n	80112b4 <std+0x48>
 80112a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80112aa:	4294      	cmp	r4, r2
 80112ac:	d002      	beq.n	80112b4 <std+0x48>
 80112ae:	33d0      	adds	r3, #208	@ 0xd0
 80112b0:	429c      	cmp	r4, r3
 80112b2:	d105      	bne.n	80112c0 <std+0x54>
 80112b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80112b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80112bc:	f000 b98e 	b.w	80115dc <__retarget_lock_init_recursive>
 80112c0:	bd10      	pop	{r4, pc}
 80112c2:	bf00      	nop
 80112c4:	08011415 	.word	0x08011415
 80112c8:	08011437 	.word	0x08011437
 80112cc:	0801146f 	.word	0x0801146f
 80112d0:	08011493 	.word	0x08011493
 80112d4:	20008704 	.word	0x20008704

080112d8 <stdio_exit_handler>:
 80112d8:	4a02      	ldr	r2, [pc, #8]	@ (80112e4 <stdio_exit_handler+0xc>)
 80112da:	4903      	ldr	r1, [pc, #12]	@ (80112e8 <stdio_exit_handler+0x10>)
 80112dc:	4803      	ldr	r0, [pc, #12]	@ (80112ec <stdio_exit_handler+0x14>)
 80112de:	f000 b869 	b.w	80113b4 <_fwalk_sglue>
 80112e2:	bf00      	nop
 80112e4:	2000002c 	.word	0x2000002c
 80112e8:	08011ee1 	.word	0x08011ee1
 80112ec:	2000003c 	.word	0x2000003c

080112f0 <cleanup_stdio>:
 80112f0:	6841      	ldr	r1, [r0, #4]
 80112f2:	4b0c      	ldr	r3, [pc, #48]	@ (8011324 <cleanup_stdio+0x34>)
 80112f4:	4299      	cmp	r1, r3
 80112f6:	b510      	push	{r4, lr}
 80112f8:	4604      	mov	r4, r0
 80112fa:	d001      	beq.n	8011300 <cleanup_stdio+0x10>
 80112fc:	f000 fdf0 	bl	8011ee0 <_fflush_r>
 8011300:	68a1      	ldr	r1, [r4, #8]
 8011302:	4b09      	ldr	r3, [pc, #36]	@ (8011328 <cleanup_stdio+0x38>)
 8011304:	4299      	cmp	r1, r3
 8011306:	d002      	beq.n	801130e <cleanup_stdio+0x1e>
 8011308:	4620      	mov	r0, r4
 801130a:	f000 fde9 	bl	8011ee0 <_fflush_r>
 801130e:	68e1      	ldr	r1, [r4, #12]
 8011310:	4b06      	ldr	r3, [pc, #24]	@ (801132c <cleanup_stdio+0x3c>)
 8011312:	4299      	cmp	r1, r3
 8011314:	d004      	beq.n	8011320 <cleanup_stdio+0x30>
 8011316:	4620      	mov	r0, r4
 8011318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801131c:	f000 bde0 	b.w	8011ee0 <_fflush_r>
 8011320:	bd10      	pop	{r4, pc}
 8011322:	bf00      	nop
 8011324:	20008704 	.word	0x20008704
 8011328:	2000876c 	.word	0x2000876c
 801132c:	200087d4 	.word	0x200087d4

08011330 <global_stdio_init.part.0>:
 8011330:	b510      	push	{r4, lr}
 8011332:	4b0b      	ldr	r3, [pc, #44]	@ (8011360 <global_stdio_init.part.0+0x30>)
 8011334:	4c0b      	ldr	r4, [pc, #44]	@ (8011364 <global_stdio_init.part.0+0x34>)
 8011336:	4a0c      	ldr	r2, [pc, #48]	@ (8011368 <global_stdio_init.part.0+0x38>)
 8011338:	601a      	str	r2, [r3, #0]
 801133a:	4620      	mov	r0, r4
 801133c:	2200      	movs	r2, #0
 801133e:	2104      	movs	r1, #4
 8011340:	f7ff ff94 	bl	801126c <std>
 8011344:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011348:	2201      	movs	r2, #1
 801134a:	2109      	movs	r1, #9
 801134c:	f7ff ff8e 	bl	801126c <std>
 8011350:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011354:	2202      	movs	r2, #2
 8011356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801135a:	2112      	movs	r1, #18
 801135c:	f7ff bf86 	b.w	801126c <std>
 8011360:	2000883c 	.word	0x2000883c
 8011364:	20008704 	.word	0x20008704
 8011368:	080112d9 	.word	0x080112d9

0801136c <__sfp_lock_acquire>:
 801136c:	4801      	ldr	r0, [pc, #4]	@ (8011374 <__sfp_lock_acquire+0x8>)
 801136e:	f000 b936 	b.w	80115de <__retarget_lock_acquire_recursive>
 8011372:	bf00      	nop
 8011374:	20008845 	.word	0x20008845

08011378 <__sfp_lock_release>:
 8011378:	4801      	ldr	r0, [pc, #4]	@ (8011380 <__sfp_lock_release+0x8>)
 801137a:	f000 b931 	b.w	80115e0 <__retarget_lock_release_recursive>
 801137e:	bf00      	nop
 8011380:	20008845 	.word	0x20008845

08011384 <__sinit>:
 8011384:	b510      	push	{r4, lr}
 8011386:	4604      	mov	r4, r0
 8011388:	f7ff fff0 	bl	801136c <__sfp_lock_acquire>
 801138c:	6a23      	ldr	r3, [r4, #32]
 801138e:	b11b      	cbz	r3, 8011398 <__sinit+0x14>
 8011390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011394:	f7ff bff0 	b.w	8011378 <__sfp_lock_release>
 8011398:	4b04      	ldr	r3, [pc, #16]	@ (80113ac <__sinit+0x28>)
 801139a:	6223      	str	r3, [r4, #32]
 801139c:	4b04      	ldr	r3, [pc, #16]	@ (80113b0 <__sinit+0x2c>)
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d1f5      	bne.n	8011390 <__sinit+0xc>
 80113a4:	f7ff ffc4 	bl	8011330 <global_stdio_init.part.0>
 80113a8:	e7f2      	b.n	8011390 <__sinit+0xc>
 80113aa:	bf00      	nop
 80113ac:	080112f1 	.word	0x080112f1
 80113b0:	2000883c 	.word	0x2000883c

080113b4 <_fwalk_sglue>:
 80113b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113b8:	4607      	mov	r7, r0
 80113ba:	4688      	mov	r8, r1
 80113bc:	4614      	mov	r4, r2
 80113be:	2600      	movs	r6, #0
 80113c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80113c4:	f1b9 0901 	subs.w	r9, r9, #1
 80113c8:	d505      	bpl.n	80113d6 <_fwalk_sglue+0x22>
 80113ca:	6824      	ldr	r4, [r4, #0]
 80113cc:	2c00      	cmp	r4, #0
 80113ce:	d1f7      	bne.n	80113c0 <_fwalk_sglue+0xc>
 80113d0:	4630      	mov	r0, r6
 80113d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80113d6:	89ab      	ldrh	r3, [r5, #12]
 80113d8:	2b01      	cmp	r3, #1
 80113da:	d907      	bls.n	80113ec <_fwalk_sglue+0x38>
 80113dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80113e0:	3301      	adds	r3, #1
 80113e2:	d003      	beq.n	80113ec <_fwalk_sglue+0x38>
 80113e4:	4629      	mov	r1, r5
 80113e6:	4638      	mov	r0, r7
 80113e8:	47c0      	blx	r8
 80113ea:	4306      	orrs	r6, r0
 80113ec:	3568      	adds	r5, #104	@ 0x68
 80113ee:	e7e9      	b.n	80113c4 <_fwalk_sglue+0x10>

080113f0 <iprintf>:
 80113f0:	b40f      	push	{r0, r1, r2, r3}
 80113f2:	b507      	push	{r0, r1, r2, lr}
 80113f4:	4906      	ldr	r1, [pc, #24]	@ (8011410 <iprintf+0x20>)
 80113f6:	ab04      	add	r3, sp, #16
 80113f8:	6808      	ldr	r0, [r1, #0]
 80113fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80113fe:	6881      	ldr	r1, [r0, #8]
 8011400:	9301      	str	r3, [sp, #4]
 8011402:	f000 fa45 	bl	8011890 <_vfiprintf_r>
 8011406:	b003      	add	sp, #12
 8011408:	f85d eb04 	ldr.w	lr, [sp], #4
 801140c:	b004      	add	sp, #16
 801140e:	4770      	bx	lr
 8011410:	20000038 	.word	0x20000038

08011414 <__sread>:
 8011414:	b510      	push	{r4, lr}
 8011416:	460c      	mov	r4, r1
 8011418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801141c:	f000 f896 	bl	801154c <_read_r>
 8011420:	2800      	cmp	r0, #0
 8011422:	bfab      	itete	ge
 8011424:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011426:	89a3      	ldrhlt	r3, [r4, #12]
 8011428:	181b      	addge	r3, r3, r0
 801142a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801142e:	bfac      	ite	ge
 8011430:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011432:	81a3      	strhlt	r3, [r4, #12]
 8011434:	bd10      	pop	{r4, pc}

08011436 <__swrite>:
 8011436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801143a:	461f      	mov	r7, r3
 801143c:	898b      	ldrh	r3, [r1, #12]
 801143e:	05db      	lsls	r3, r3, #23
 8011440:	4605      	mov	r5, r0
 8011442:	460c      	mov	r4, r1
 8011444:	4616      	mov	r6, r2
 8011446:	d505      	bpl.n	8011454 <__swrite+0x1e>
 8011448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801144c:	2302      	movs	r3, #2
 801144e:	2200      	movs	r2, #0
 8011450:	f000 f86a 	bl	8011528 <_lseek_r>
 8011454:	89a3      	ldrh	r3, [r4, #12]
 8011456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801145a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801145e:	81a3      	strh	r3, [r4, #12]
 8011460:	4632      	mov	r2, r6
 8011462:	463b      	mov	r3, r7
 8011464:	4628      	mov	r0, r5
 8011466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801146a:	f000 b881 	b.w	8011570 <_write_r>

0801146e <__sseek>:
 801146e:	b510      	push	{r4, lr}
 8011470:	460c      	mov	r4, r1
 8011472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011476:	f000 f857 	bl	8011528 <_lseek_r>
 801147a:	1c43      	adds	r3, r0, #1
 801147c:	89a3      	ldrh	r3, [r4, #12]
 801147e:	bf15      	itete	ne
 8011480:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011482:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011486:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801148a:	81a3      	strheq	r3, [r4, #12]
 801148c:	bf18      	it	ne
 801148e:	81a3      	strhne	r3, [r4, #12]
 8011490:	bd10      	pop	{r4, pc}

08011492 <__sclose>:
 8011492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011496:	f000 b837 	b.w	8011508 <_close_r>

0801149a <memcmp>:
 801149a:	b510      	push	{r4, lr}
 801149c:	3901      	subs	r1, #1
 801149e:	4402      	add	r2, r0
 80114a0:	4290      	cmp	r0, r2
 80114a2:	d101      	bne.n	80114a8 <memcmp+0xe>
 80114a4:	2000      	movs	r0, #0
 80114a6:	e005      	b.n	80114b4 <memcmp+0x1a>
 80114a8:	7803      	ldrb	r3, [r0, #0]
 80114aa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80114ae:	42a3      	cmp	r3, r4
 80114b0:	d001      	beq.n	80114b6 <memcmp+0x1c>
 80114b2:	1b18      	subs	r0, r3, r4
 80114b4:	bd10      	pop	{r4, pc}
 80114b6:	3001      	adds	r0, #1
 80114b8:	e7f2      	b.n	80114a0 <memcmp+0x6>

080114ba <memset>:
 80114ba:	4402      	add	r2, r0
 80114bc:	4603      	mov	r3, r0
 80114be:	4293      	cmp	r3, r2
 80114c0:	d100      	bne.n	80114c4 <memset+0xa>
 80114c2:	4770      	bx	lr
 80114c4:	f803 1b01 	strb.w	r1, [r3], #1
 80114c8:	e7f9      	b.n	80114be <memset+0x4>

080114ca <strchr>:
 80114ca:	b2c9      	uxtb	r1, r1
 80114cc:	4603      	mov	r3, r0
 80114ce:	4618      	mov	r0, r3
 80114d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80114d4:	b112      	cbz	r2, 80114dc <strchr+0x12>
 80114d6:	428a      	cmp	r2, r1
 80114d8:	d1f9      	bne.n	80114ce <strchr+0x4>
 80114da:	4770      	bx	lr
 80114dc:	2900      	cmp	r1, #0
 80114de:	bf18      	it	ne
 80114e0:	2000      	movne	r0, #0
 80114e2:	4770      	bx	lr

080114e4 <strncmp>:
 80114e4:	b510      	push	{r4, lr}
 80114e6:	b16a      	cbz	r2, 8011504 <strncmp+0x20>
 80114e8:	3901      	subs	r1, #1
 80114ea:	1884      	adds	r4, r0, r2
 80114ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80114f0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80114f4:	429a      	cmp	r2, r3
 80114f6:	d103      	bne.n	8011500 <strncmp+0x1c>
 80114f8:	42a0      	cmp	r0, r4
 80114fa:	d001      	beq.n	8011500 <strncmp+0x1c>
 80114fc:	2a00      	cmp	r2, #0
 80114fe:	d1f5      	bne.n	80114ec <strncmp+0x8>
 8011500:	1ad0      	subs	r0, r2, r3
 8011502:	bd10      	pop	{r4, pc}
 8011504:	4610      	mov	r0, r2
 8011506:	e7fc      	b.n	8011502 <strncmp+0x1e>

08011508 <_close_r>:
 8011508:	b538      	push	{r3, r4, r5, lr}
 801150a:	4d06      	ldr	r5, [pc, #24]	@ (8011524 <_close_r+0x1c>)
 801150c:	2300      	movs	r3, #0
 801150e:	4604      	mov	r4, r0
 8011510:	4608      	mov	r0, r1
 8011512:	602b      	str	r3, [r5, #0]
 8011514:	f7ef fc54 	bl	8000dc0 <_close>
 8011518:	1c43      	adds	r3, r0, #1
 801151a:	d102      	bne.n	8011522 <_close_r+0x1a>
 801151c:	682b      	ldr	r3, [r5, #0]
 801151e:	b103      	cbz	r3, 8011522 <_close_r+0x1a>
 8011520:	6023      	str	r3, [r4, #0]
 8011522:	bd38      	pop	{r3, r4, r5, pc}
 8011524:	20008840 	.word	0x20008840

08011528 <_lseek_r>:
 8011528:	b538      	push	{r3, r4, r5, lr}
 801152a:	4d07      	ldr	r5, [pc, #28]	@ (8011548 <_lseek_r+0x20>)
 801152c:	4604      	mov	r4, r0
 801152e:	4608      	mov	r0, r1
 8011530:	4611      	mov	r1, r2
 8011532:	2200      	movs	r2, #0
 8011534:	602a      	str	r2, [r5, #0]
 8011536:	461a      	mov	r2, r3
 8011538:	f7ef fc69 	bl	8000e0e <_lseek>
 801153c:	1c43      	adds	r3, r0, #1
 801153e:	d102      	bne.n	8011546 <_lseek_r+0x1e>
 8011540:	682b      	ldr	r3, [r5, #0]
 8011542:	b103      	cbz	r3, 8011546 <_lseek_r+0x1e>
 8011544:	6023      	str	r3, [r4, #0]
 8011546:	bd38      	pop	{r3, r4, r5, pc}
 8011548:	20008840 	.word	0x20008840

0801154c <_read_r>:
 801154c:	b538      	push	{r3, r4, r5, lr}
 801154e:	4d07      	ldr	r5, [pc, #28]	@ (801156c <_read_r+0x20>)
 8011550:	4604      	mov	r4, r0
 8011552:	4608      	mov	r0, r1
 8011554:	4611      	mov	r1, r2
 8011556:	2200      	movs	r2, #0
 8011558:	602a      	str	r2, [r5, #0]
 801155a:	461a      	mov	r2, r3
 801155c:	f7ef fbf7 	bl	8000d4e <_read>
 8011560:	1c43      	adds	r3, r0, #1
 8011562:	d102      	bne.n	801156a <_read_r+0x1e>
 8011564:	682b      	ldr	r3, [r5, #0]
 8011566:	b103      	cbz	r3, 801156a <_read_r+0x1e>
 8011568:	6023      	str	r3, [r4, #0]
 801156a:	bd38      	pop	{r3, r4, r5, pc}
 801156c:	20008840 	.word	0x20008840

08011570 <_write_r>:
 8011570:	b538      	push	{r3, r4, r5, lr}
 8011572:	4d07      	ldr	r5, [pc, #28]	@ (8011590 <_write_r+0x20>)
 8011574:	4604      	mov	r4, r0
 8011576:	4608      	mov	r0, r1
 8011578:	4611      	mov	r1, r2
 801157a:	2200      	movs	r2, #0
 801157c:	602a      	str	r2, [r5, #0]
 801157e:	461a      	mov	r2, r3
 8011580:	f7ef fc02 	bl	8000d88 <_write>
 8011584:	1c43      	adds	r3, r0, #1
 8011586:	d102      	bne.n	801158e <_write_r+0x1e>
 8011588:	682b      	ldr	r3, [r5, #0]
 801158a:	b103      	cbz	r3, 801158e <_write_r+0x1e>
 801158c:	6023      	str	r3, [r4, #0]
 801158e:	bd38      	pop	{r3, r4, r5, pc}
 8011590:	20008840 	.word	0x20008840

08011594 <__libc_init_array>:
 8011594:	b570      	push	{r4, r5, r6, lr}
 8011596:	4d0d      	ldr	r5, [pc, #52]	@ (80115cc <__libc_init_array+0x38>)
 8011598:	4c0d      	ldr	r4, [pc, #52]	@ (80115d0 <__libc_init_array+0x3c>)
 801159a:	1b64      	subs	r4, r4, r5
 801159c:	10a4      	asrs	r4, r4, #2
 801159e:	2600      	movs	r6, #0
 80115a0:	42a6      	cmp	r6, r4
 80115a2:	d109      	bne.n	80115b8 <__libc_init_array+0x24>
 80115a4:	4d0b      	ldr	r5, [pc, #44]	@ (80115d4 <__libc_init_array+0x40>)
 80115a6:	4c0c      	ldr	r4, [pc, #48]	@ (80115d8 <__libc_init_array+0x44>)
 80115a8:	f000 fe48 	bl	801223c <_init>
 80115ac:	1b64      	subs	r4, r4, r5
 80115ae:	10a4      	asrs	r4, r4, #2
 80115b0:	2600      	movs	r6, #0
 80115b2:	42a6      	cmp	r6, r4
 80115b4:	d105      	bne.n	80115c2 <__libc_init_array+0x2e>
 80115b6:	bd70      	pop	{r4, r5, r6, pc}
 80115b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80115bc:	4798      	blx	r3
 80115be:	3601      	adds	r6, #1
 80115c0:	e7ee      	b.n	80115a0 <__libc_init_array+0xc>
 80115c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80115c6:	4798      	blx	r3
 80115c8:	3601      	adds	r6, #1
 80115ca:	e7f2      	b.n	80115b2 <__libc_init_array+0x1e>
 80115cc:	0801550c 	.word	0x0801550c
 80115d0:	0801550c 	.word	0x0801550c
 80115d4:	0801550c 	.word	0x0801550c
 80115d8:	08015510 	.word	0x08015510

080115dc <__retarget_lock_init_recursive>:
 80115dc:	4770      	bx	lr

080115de <__retarget_lock_acquire_recursive>:
 80115de:	4770      	bx	lr

080115e0 <__retarget_lock_release_recursive>:
 80115e0:	4770      	bx	lr

080115e2 <memcpy>:
 80115e2:	440a      	add	r2, r1
 80115e4:	4291      	cmp	r1, r2
 80115e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80115ea:	d100      	bne.n	80115ee <memcpy+0xc>
 80115ec:	4770      	bx	lr
 80115ee:	b510      	push	{r4, lr}
 80115f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80115f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80115f8:	4291      	cmp	r1, r2
 80115fa:	d1f9      	bne.n	80115f0 <memcpy+0xe>
 80115fc:	bd10      	pop	{r4, pc}
	...

08011600 <__assert_func>:
 8011600:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011602:	4614      	mov	r4, r2
 8011604:	461a      	mov	r2, r3
 8011606:	4b09      	ldr	r3, [pc, #36]	@ (801162c <__assert_func+0x2c>)
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	4605      	mov	r5, r0
 801160c:	68d8      	ldr	r0, [r3, #12]
 801160e:	b14c      	cbz	r4, 8011624 <__assert_func+0x24>
 8011610:	4b07      	ldr	r3, [pc, #28]	@ (8011630 <__assert_func+0x30>)
 8011612:	9100      	str	r1, [sp, #0]
 8011614:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011618:	4906      	ldr	r1, [pc, #24]	@ (8011634 <__assert_func+0x34>)
 801161a:	462b      	mov	r3, r5
 801161c:	f000 fc88 	bl	8011f30 <fiprintf>
 8011620:	f000 fd3c 	bl	801209c <abort>
 8011624:	4b04      	ldr	r3, [pc, #16]	@ (8011638 <__assert_func+0x38>)
 8011626:	461c      	mov	r4, r3
 8011628:	e7f3      	b.n	8011612 <__assert_func+0x12>
 801162a:	bf00      	nop
 801162c:	20000038 	.word	0x20000038
 8011630:	08015495 	.word	0x08015495
 8011634:	080154a2 	.word	0x080154a2
 8011638:	080154d0 	.word	0x080154d0

0801163c <_free_r>:
 801163c:	b538      	push	{r3, r4, r5, lr}
 801163e:	4605      	mov	r5, r0
 8011640:	2900      	cmp	r1, #0
 8011642:	d041      	beq.n	80116c8 <_free_r+0x8c>
 8011644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011648:	1f0c      	subs	r4, r1, #4
 801164a:	2b00      	cmp	r3, #0
 801164c:	bfb8      	it	lt
 801164e:	18e4      	addlt	r4, r4, r3
 8011650:	f000 f8e8 	bl	8011824 <__malloc_lock>
 8011654:	4a1d      	ldr	r2, [pc, #116]	@ (80116cc <_free_r+0x90>)
 8011656:	6813      	ldr	r3, [r2, #0]
 8011658:	b933      	cbnz	r3, 8011668 <_free_r+0x2c>
 801165a:	6063      	str	r3, [r4, #4]
 801165c:	6014      	str	r4, [r2, #0]
 801165e:	4628      	mov	r0, r5
 8011660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011664:	f000 b8e4 	b.w	8011830 <__malloc_unlock>
 8011668:	42a3      	cmp	r3, r4
 801166a:	d908      	bls.n	801167e <_free_r+0x42>
 801166c:	6820      	ldr	r0, [r4, #0]
 801166e:	1821      	adds	r1, r4, r0
 8011670:	428b      	cmp	r3, r1
 8011672:	bf01      	itttt	eq
 8011674:	6819      	ldreq	r1, [r3, #0]
 8011676:	685b      	ldreq	r3, [r3, #4]
 8011678:	1809      	addeq	r1, r1, r0
 801167a:	6021      	streq	r1, [r4, #0]
 801167c:	e7ed      	b.n	801165a <_free_r+0x1e>
 801167e:	461a      	mov	r2, r3
 8011680:	685b      	ldr	r3, [r3, #4]
 8011682:	b10b      	cbz	r3, 8011688 <_free_r+0x4c>
 8011684:	42a3      	cmp	r3, r4
 8011686:	d9fa      	bls.n	801167e <_free_r+0x42>
 8011688:	6811      	ldr	r1, [r2, #0]
 801168a:	1850      	adds	r0, r2, r1
 801168c:	42a0      	cmp	r0, r4
 801168e:	d10b      	bne.n	80116a8 <_free_r+0x6c>
 8011690:	6820      	ldr	r0, [r4, #0]
 8011692:	4401      	add	r1, r0
 8011694:	1850      	adds	r0, r2, r1
 8011696:	4283      	cmp	r3, r0
 8011698:	6011      	str	r1, [r2, #0]
 801169a:	d1e0      	bne.n	801165e <_free_r+0x22>
 801169c:	6818      	ldr	r0, [r3, #0]
 801169e:	685b      	ldr	r3, [r3, #4]
 80116a0:	6053      	str	r3, [r2, #4]
 80116a2:	4408      	add	r0, r1
 80116a4:	6010      	str	r0, [r2, #0]
 80116a6:	e7da      	b.n	801165e <_free_r+0x22>
 80116a8:	d902      	bls.n	80116b0 <_free_r+0x74>
 80116aa:	230c      	movs	r3, #12
 80116ac:	602b      	str	r3, [r5, #0]
 80116ae:	e7d6      	b.n	801165e <_free_r+0x22>
 80116b0:	6820      	ldr	r0, [r4, #0]
 80116b2:	1821      	adds	r1, r4, r0
 80116b4:	428b      	cmp	r3, r1
 80116b6:	bf04      	itt	eq
 80116b8:	6819      	ldreq	r1, [r3, #0]
 80116ba:	685b      	ldreq	r3, [r3, #4]
 80116bc:	6063      	str	r3, [r4, #4]
 80116be:	bf04      	itt	eq
 80116c0:	1809      	addeq	r1, r1, r0
 80116c2:	6021      	streq	r1, [r4, #0]
 80116c4:	6054      	str	r4, [r2, #4]
 80116c6:	e7ca      	b.n	801165e <_free_r+0x22>
 80116c8:	bd38      	pop	{r3, r4, r5, pc}
 80116ca:	bf00      	nop
 80116cc:	2000884c 	.word	0x2000884c

080116d0 <malloc>:
 80116d0:	4b02      	ldr	r3, [pc, #8]	@ (80116dc <malloc+0xc>)
 80116d2:	4601      	mov	r1, r0
 80116d4:	6818      	ldr	r0, [r3, #0]
 80116d6:	f000 b825 	b.w	8011724 <_malloc_r>
 80116da:	bf00      	nop
 80116dc:	20000038 	.word	0x20000038

080116e0 <sbrk_aligned>:
 80116e0:	b570      	push	{r4, r5, r6, lr}
 80116e2:	4e0f      	ldr	r6, [pc, #60]	@ (8011720 <sbrk_aligned+0x40>)
 80116e4:	460c      	mov	r4, r1
 80116e6:	6831      	ldr	r1, [r6, #0]
 80116e8:	4605      	mov	r5, r0
 80116ea:	b911      	cbnz	r1, 80116f2 <sbrk_aligned+0x12>
 80116ec:	f000 fcc6 	bl	801207c <_sbrk_r>
 80116f0:	6030      	str	r0, [r6, #0]
 80116f2:	4621      	mov	r1, r4
 80116f4:	4628      	mov	r0, r5
 80116f6:	f000 fcc1 	bl	801207c <_sbrk_r>
 80116fa:	1c43      	adds	r3, r0, #1
 80116fc:	d103      	bne.n	8011706 <sbrk_aligned+0x26>
 80116fe:	f04f 34ff 	mov.w	r4, #4294967295
 8011702:	4620      	mov	r0, r4
 8011704:	bd70      	pop	{r4, r5, r6, pc}
 8011706:	1cc4      	adds	r4, r0, #3
 8011708:	f024 0403 	bic.w	r4, r4, #3
 801170c:	42a0      	cmp	r0, r4
 801170e:	d0f8      	beq.n	8011702 <sbrk_aligned+0x22>
 8011710:	1a21      	subs	r1, r4, r0
 8011712:	4628      	mov	r0, r5
 8011714:	f000 fcb2 	bl	801207c <_sbrk_r>
 8011718:	3001      	adds	r0, #1
 801171a:	d1f2      	bne.n	8011702 <sbrk_aligned+0x22>
 801171c:	e7ef      	b.n	80116fe <sbrk_aligned+0x1e>
 801171e:	bf00      	nop
 8011720:	20008848 	.word	0x20008848

08011724 <_malloc_r>:
 8011724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011728:	1ccd      	adds	r5, r1, #3
 801172a:	f025 0503 	bic.w	r5, r5, #3
 801172e:	3508      	adds	r5, #8
 8011730:	2d0c      	cmp	r5, #12
 8011732:	bf38      	it	cc
 8011734:	250c      	movcc	r5, #12
 8011736:	2d00      	cmp	r5, #0
 8011738:	4606      	mov	r6, r0
 801173a:	db01      	blt.n	8011740 <_malloc_r+0x1c>
 801173c:	42a9      	cmp	r1, r5
 801173e:	d904      	bls.n	801174a <_malloc_r+0x26>
 8011740:	230c      	movs	r3, #12
 8011742:	6033      	str	r3, [r6, #0]
 8011744:	2000      	movs	r0, #0
 8011746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801174a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011820 <_malloc_r+0xfc>
 801174e:	f000 f869 	bl	8011824 <__malloc_lock>
 8011752:	f8d8 3000 	ldr.w	r3, [r8]
 8011756:	461c      	mov	r4, r3
 8011758:	bb44      	cbnz	r4, 80117ac <_malloc_r+0x88>
 801175a:	4629      	mov	r1, r5
 801175c:	4630      	mov	r0, r6
 801175e:	f7ff ffbf 	bl	80116e0 <sbrk_aligned>
 8011762:	1c43      	adds	r3, r0, #1
 8011764:	4604      	mov	r4, r0
 8011766:	d158      	bne.n	801181a <_malloc_r+0xf6>
 8011768:	f8d8 4000 	ldr.w	r4, [r8]
 801176c:	4627      	mov	r7, r4
 801176e:	2f00      	cmp	r7, #0
 8011770:	d143      	bne.n	80117fa <_malloc_r+0xd6>
 8011772:	2c00      	cmp	r4, #0
 8011774:	d04b      	beq.n	801180e <_malloc_r+0xea>
 8011776:	6823      	ldr	r3, [r4, #0]
 8011778:	4639      	mov	r1, r7
 801177a:	4630      	mov	r0, r6
 801177c:	eb04 0903 	add.w	r9, r4, r3
 8011780:	f000 fc7c 	bl	801207c <_sbrk_r>
 8011784:	4581      	cmp	r9, r0
 8011786:	d142      	bne.n	801180e <_malloc_r+0xea>
 8011788:	6821      	ldr	r1, [r4, #0]
 801178a:	1a6d      	subs	r5, r5, r1
 801178c:	4629      	mov	r1, r5
 801178e:	4630      	mov	r0, r6
 8011790:	f7ff ffa6 	bl	80116e0 <sbrk_aligned>
 8011794:	3001      	adds	r0, #1
 8011796:	d03a      	beq.n	801180e <_malloc_r+0xea>
 8011798:	6823      	ldr	r3, [r4, #0]
 801179a:	442b      	add	r3, r5
 801179c:	6023      	str	r3, [r4, #0]
 801179e:	f8d8 3000 	ldr.w	r3, [r8]
 80117a2:	685a      	ldr	r2, [r3, #4]
 80117a4:	bb62      	cbnz	r2, 8011800 <_malloc_r+0xdc>
 80117a6:	f8c8 7000 	str.w	r7, [r8]
 80117aa:	e00f      	b.n	80117cc <_malloc_r+0xa8>
 80117ac:	6822      	ldr	r2, [r4, #0]
 80117ae:	1b52      	subs	r2, r2, r5
 80117b0:	d420      	bmi.n	80117f4 <_malloc_r+0xd0>
 80117b2:	2a0b      	cmp	r2, #11
 80117b4:	d917      	bls.n	80117e6 <_malloc_r+0xc2>
 80117b6:	1961      	adds	r1, r4, r5
 80117b8:	42a3      	cmp	r3, r4
 80117ba:	6025      	str	r5, [r4, #0]
 80117bc:	bf18      	it	ne
 80117be:	6059      	strne	r1, [r3, #4]
 80117c0:	6863      	ldr	r3, [r4, #4]
 80117c2:	bf08      	it	eq
 80117c4:	f8c8 1000 	streq.w	r1, [r8]
 80117c8:	5162      	str	r2, [r4, r5]
 80117ca:	604b      	str	r3, [r1, #4]
 80117cc:	4630      	mov	r0, r6
 80117ce:	f000 f82f 	bl	8011830 <__malloc_unlock>
 80117d2:	f104 000b 	add.w	r0, r4, #11
 80117d6:	1d23      	adds	r3, r4, #4
 80117d8:	f020 0007 	bic.w	r0, r0, #7
 80117dc:	1ac2      	subs	r2, r0, r3
 80117de:	bf1c      	itt	ne
 80117e0:	1a1b      	subne	r3, r3, r0
 80117e2:	50a3      	strne	r3, [r4, r2]
 80117e4:	e7af      	b.n	8011746 <_malloc_r+0x22>
 80117e6:	6862      	ldr	r2, [r4, #4]
 80117e8:	42a3      	cmp	r3, r4
 80117ea:	bf0c      	ite	eq
 80117ec:	f8c8 2000 	streq.w	r2, [r8]
 80117f0:	605a      	strne	r2, [r3, #4]
 80117f2:	e7eb      	b.n	80117cc <_malloc_r+0xa8>
 80117f4:	4623      	mov	r3, r4
 80117f6:	6864      	ldr	r4, [r4, #4]
 80117f8:	e7ae      	b.n	8011758 <_malloc_r+0x34>
 80117fa:	463c      	mov	r4, r7
 80117fc:	687f      	ldr	r7, [r7, #4]
 80117fe:	e7b6      	b.n	801176e <_malloc_r+0x4a>
 8011800:	461a      	mov	r2, r3
 8011802:	685b      	ldr	r3, [r3, #4]
 8011804:	42a3      	cmp	r3, r4
 8011806:	d1fb      	bne.n	8011800 <_malloc_r+0xdc>
 8011808:	2300      	movs	r3, #0
 801180a:	6053      	str	r3, [r2, #4]
 801180c:	e7de      	b.n	80117cc <_malloc_r+0xa8>
 801180e:	230c      	movs	r3, #12
 8011810:	6033      	str	r3, [r6, #0]
 8011812:	4630      	mov	r0, r6
 8011814:	f000 f80c 	bl	8011830 <__malloc_unlock>
 8011818:	e794      	b.n	8011744 <_malloc_r+0x20>
 801181a:	6005      	str	r5, [r0, #0]
 801181c:	e7d6      	b.n	80117cc <_malloc_r+0xa8>
 801181e:	bf00      	nop
 8011820:	2000884c 	.word	0x2000884c

08011824 <__malloc_lock>:
 8011824:	4801      	ldr	r0, [pc, #4]	@ (801182c <__malloc_lock+0x8>)
 8011826:	f7ff beda 	b.w	80115de <__retarget_lock_acquire_recursive>
 801182a:	bf00      	nop
 801182c:	20008844 	.word	0x20008844

08011830 <__malloc_unlock>:
 8011830:	4801      	ldr	r0, [pc, #4]	@ (8011838 <__malloc_unlock+0x8>)
 8011832:	f7ff bed5 	b.w	80115e0 <__retarget_lock_release_recursive>
 8011836:	bf00      	nop
 8011838:	20008844 	.word	0x20008844

0801183c <__sfputc_r>:
 801183c:	6893      	ldr	r3, [r2, #8]
 801183e:	3b01      	subs	r3, #1
 8011840:	2b00      	cmp	r3, #0
 8011842:	b410      	push	{r4}
 8011844:	6093      	str	r3, [r2, #8]
 8011846:	da08      	bge.n	801185a <__sfputc_r+0x1e>
 8011848:	6994      	ldr	r4, [r2, #24]
 801184a:	42a3      	cmp	r3, r4
 801184c:	db01      	blt.n	8011852 <__sfputc_r+0x16>
 801184e:	290a      	cmp	r1, #10
 8011850:	d103      	bne.n	801185a <__sfputc_r+0x1e>
 8011852:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011856:	f000 bb7d 	b.w	8011f54 <__swbuf_r>
 801185a:	6813      	ldr	r3, [r2, #0]
 801185c:	1c58      	adds	r0, r3, #1
 801185e:	6010      	str	r0, [r2, #0]
 8011860:	7019      	strb	r1, [r3, #0]
 8011862:	4608      	mov	r0, r1
 8011864:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011868:	4770      	bx	lr

0801186a <__sfputs_r>:
 801186a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801186c:	4606      	mov	r6, r0
 801186e:	460f      	mov	r7, r1
 8011870:	4614      	mov	r4, r2
 8011872:	18d5      	adds	r5, r2, r3
 8011874:	42ac      	cmp	r4, r5
 8011876:	d101      	bne.n	801187c <__sfputs_r+0x12>
 8011878:	2000      	movs	r0, #0
 801187a:	e007      	b.n	801188c <__sfputs_r+0x22>
 801187c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011880:	463a      	mov	r2, r7
 8011882:	4630      	mov	r0, r6
 8011884:	f7ff ffda 	bl	801183c <__sfputc_r>
 8011888:	1c43      	adds	r3, r0, #1
 801188a:	d1f3      	bne.n	8011874 <__sfputs_r+0xa>
 801188c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011890 <_vfiprintf_r>:
 8011890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011894:	460d      	mov	r5, r1
 8011896:	b09d      	sub	sp, #116	@ 0x74
 8011898:	4614      	mov	r4, r2
 801189a:	4698      	mov	r8, r3
 801189c:	4606      	mov	r6, r0
 801189e:	b118      	cbz	r0, 80118a8 <_vfiprintf_r+0x18>
 80118a0:	6a03      	ldr	r3, [r0, #32]
 80118a2:	b90b      	cbnz	r3, 80118a8 <_vfiprintf_r+0x18>
 80118a4:	f7ff fd6e 	bl	8011384 <__sinit>
 80118a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80118aa:	07d9      	lsls	r1, r3, #31
 80118ac:	d405      	bmi.n	80118ba <_vfiprintf_r+0x2a>
 80118ae:	89ab      	ldrh	r3, [r5, #12]
 80118b0:	059a      	lsls	r2, r3, #22
 80118b2:	d402      	bmi.n	80118ba <_vfiprintf_r+0x2a>
 80118b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80118b6:	f7ff fe92 	bl	80115de <__retarget_lock_acquire_recursive>
 80118ba:	89ab      	ldrh	r3, [r5, #12]
 80118bc:	071b      	lsls	r3, r3, #28
 80118be:	d501      	bpl.n	80118c4 <_vfiprintf_r+0x34>
 80118c0:	692b      	ldr	r3, [r5, #16]
 80118c2:	b99b      	cbnz	r3, 80118ec <_vfiprintf_r+0x5c>
 80118c4:	4629      	mov	r1, r5
 80118c6:	4630      	mov	r0, r6
 80118c8:	f000 fb82 	bl	8011fd0 <__swsetup_r>
 80118cc:	b170      	cbz	r0, 80118ec <_vfiprintf_r+0x5c>
 80118ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80118d0:	07dc      	lsls	r4, r3, #31
 80118d2:	d504      	bpl.n	80118de <_vfiprintf_r+0x4e>
 80118d4:	f04f 30ff 	mov.w	r0, #4294967295
 80118d8:	b01d      	add	sp, #116	@ 0x74
 80118da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118de:	89ab      	ldrh	r3, [r5, #12]
 80118e0:	0598      	lsls	r0, r3, #22
 80118e2:	d4f7      	bmi.n	80118d4 <_vfiprintf_r+0x44>
 80118e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80118e6:	f7ff fe7b 	bl	80115e0 <__retarget_lock_release_recursive>
 80118ea:	e7f3      	b.n	80118d4 <_vfiprintf_r+0x44>
 80118ec:	2300      	movs	r3, #0
 80118ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80118f0:	2320      	movs	r3, #32
 80118f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80118f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80118fa:	2330      	movs	r3, #48	@ 0x30
 80118fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011aac <_vfiprintf_r+0x21c>
 8011900:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011904:	f04f 0901 	mov.w	r9, #1
 8011908:	4623      	mov	r3, r4
 801190a:	469a      	mov	sl, r3
 801190c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011910:	b10a      	cbz	r2, 8011916 <_vfiprintf_r+0x86>
 8011912:	2a25      	cmp	r2, #37	@ 0x25
 8011914:	d1f9      	bne.n	801190a <_vfiprintf_r+0x7a>
 8011916:	ebba 0b04 	subs.w	fp, sl, r4
 801191a:	d00b      	beq.n	8011934 <_vfiprintf_r+0xa4>
 801191c:	465b      	mov	r3, fp
 801191e:	4622      	mov	r2, r4
 8011920:	4629      	mov	r1, r5
 8011922:	4630      	mov	r0, r6
 8011924:	f7ff ffa1 	bl	801186a <__sfputs_r>
 8011928:	3001      	adds	r0, #1
 801192a:	f000 80a7 	beq.w	8011a7c <_vfiprintf_r+0x1ec>
 801192e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011930:	445a      	add	r2, fp
 8011932:	9209      	str	r2, [sp, #36]	@ 0x24
 8011934:	f89a 3000 	ldrb.w	r3, [sl]
 8011938:	2b00      	cmp	r3, #0
 801193a:	f000 809f 	beq.w	8011a7c <_vfiprintf_r+0x1ec>
 801193e:	2300      	movs	r3, #0
 8011940:	f04f 32ff 	mov.w	r2, #4294967295
 8011944:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011948:	f10a 0a01 	add.w	sl, sl, #1
 801194c:	9304      	str	r3, [sp, #16]
 801194e:	9307      	str	r3, [sp, #28]
 8011950:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011954:	931a      	str	r3, [sp, #104]	@ 0x68
 8011956:	4654      	mov	r4, sl
 8011958:	2205      	movs	r2, #5
 801195a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801195e:	4853      	ldr	r0, [pc, #332]	@ (8011aac <_vfiprintf_r+0x21c>)
 8011960:	f7ee fc86 	bl	8000270 <memchr>
 8011964:	9a04      	ldr	r2, [sp, #16]
 8011966:	b9d8      	cbnz	r0, 80119a0 <_vfiprintf_r+0x110>
 8011968:	06d1      	lsls	r1, r2, #27
 801196a:	bf44      	itt	mi
 801196c:	2320      	movmi	r3, #32
 801196e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011972:	0713      	lsls	r3, r2, #28
 8011974:	bf44      	itt	mi
 8011976:	232b      	movmi	r3, #43	@ 0x2b
 8011978:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801197c:	f89a 3000 	ldrb.w	r3, [sl]
 8011980:	2b2a      	cmp	r3, #42	@ 0x2a
 8011982:	d015      	beq.n	80119b0 <_vfiprintf_r+0x120>
 8011984:	9a07      	ldr	r2, [sp, #28]
 8011986:	4654      	mov	r4, sl
 8011988:	2000      	movs	r0, #0
 801198a:	f04f 0c0a 	mov.w	ip, #10
 801198e:	4621      	mov	r1, r4
 8011990:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011994:	3b30      	subs	r3, #48	@ 0x30
 8011996:	2b09      	cmp	r3, #9
 8011998:	d94b      	bls.n	8011a32 <_vfiprintf_r+0x1a2>
 801199a:	b1b0      	cbz	r0, 80119ca <_vfiprintf_r+0x13a>
 801199c:	9207      	str	r2, [sp, #28]
 801199e:	e014      	b.n	80119ca <_vfiprintf_r+0x13a>
 80119a0:	eba0 0308 	sub.w	r3, r0, r8
 80119a4:	fa09 f303 	lsl.w	r3, r9, r3
 80119a8:	4313      	orrs	r3, r2
 80119aa:	9304      	str	r3, [sp, #16]
 80119ac:	46a2      	mov	sl, r4
 80119ae:	e7d2      	b.n	8011956 <_vfiprintf_r+0xc6>
 80119b0:	9b03      	ldr	r3, [sp, #12]
 80119b2:	1d19      	adds	r1, r3, #4
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	9103      	str	r1, [sp, #12]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	bfbb      	ittet	lt
 80119bc:	425b      	neglt	r3, r3
 80119be:	f042 0202 	orrlt.w	r2, r2, #2
 80119c2:	9307      	strge	r3, [sp, #28]
 80119c4:	9307      	strlt	r3, [sp, #28]
 80119c6:	bfb8      	it	lt
 80119c8:	9204      	strlt	r2, [sp, #16]
 80119ca:	7823      	ldrb	r3, [r4, #0]
 80119cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80119ce:	d10a      	bne.n	80119e6 <_vfiprintf_r+0x156>
 80119d0:	7863      	ldrb	r3, [r4, #1]
 80119d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80119d4:	d132      	bne.n	8011a3c <_vfiprintf_r+0x1ac>
 80119d6:	9b03      	ldr	r3, [sp, #12]
 80119d8:	1d1a      	adds	r2, r3, #4
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	9203      	str	r2, [sp, #12]
 80119de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80119e2:	3402      	adds	r4, #2
 80119e4:	9305      	str	r3, [sp, #20]
 80119e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011abc <_vfiprintf_r+0x22c>
 80119ea:	7821      	ldrb	r1, [r4, #0]
 80119ec:	2203      	movs	r2, #3
 80119ee:	4650      	mov	r0, sl
 80119f0:	f7ee fc3e 	bl	8000270 <memchr>
 80119f4:	b138      	cbz	r0, 8011a06 <_vfiprintf_r+0x176>
 80119f6:	9b04      	ldr	r3, [sp, #16]
 80119f8:	eba0 000a 	sub.w	r0, r0, sl
 80119fc:	2240      	movs	r2, #64	@ 0x40
 80119fe:	4082      	lsls	r2, r0
 8011a00:	4313      	orrs	r3, r2
 8011a02:	3401      	adds	r4, #1
 8011a04:	9304      	str	r3, [sp, #16]
 8011a06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a0a:	4829      	ldr	r0, [pc, #164]	@ (8011ab0 <_vfiprintf_r+0x220>)
 8011a0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011a10:	2206      	movs	r2, #6
 8011a12:	f7ee fc2d 	bl	8000270 <memchr>
 8011a16:	2800      	cmp	r0, #0
 8011a18:	d03f      	beq.n	8011a9a <_vfiprintf_r+0x20a>
 8011a1a:	4b26      	ldr	r3, [pc, #152]	@ (8011ab4 <_vfiprintf_r+0x224>)
 8011a1c:	bb1b      	cbnz	r3, 8011a66 <_vfiprintf_r+0x1d6>
 8011a1e:	9b03      	ldr	r3, [sp, #12]
 8011a20:	3307      	adds	r3, #7
 8011a22:	f023 0307 	bic.w	r3, r3, #7
 8011a26:	3308      	adds	r3, #8
 8011a28:	9303      	str	r3, [sp, #12]
 8011a2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a2c:	443b      	add	r3, r7
 8011a2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a30:	e76a      	b.n	8011908 <_vfiprintf_r+0x78>
 8011a32:	fb0c 3202 	mla	r2, ip, r2, r3
 8011a36:	460c      	mov	r4, r1
 8011a38:	2001      	movs	r0, #1
 8011a3a:	e7a8      	b.n	801198e <_vfiprintf_r+0xfe>
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	3401      	adds	r4, #1
 8011a40:	9305      	str	r3, [sp, #20]
 8011a42:	4619      	mov	r1, r3
 8011a44:	f04f 0c0a 	mov.w	ip, #10
 8011a48:	4620      	mov	r0, r4
 8011a4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a4e:	3a30      	subs	r2, #48	@ 0x30
 8011a50:	2a09      	cmp	r2, #9
 8011a52:	d903      	bls.n	8011a5c <_vfiprintf_r+0x1cc>
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d0c6      	beq.n	80119e6 <_vfiprintf_r+0x156>
 8011a58:	9105      	str	r1, [sp, #20]
 8011a5a:	e7c4      	b.n	80119e6 <_vfiprintf_r+0x156>
 8011a5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011a60:	4604      	mov	r4, r0
 8011a62:	2301      	movs	r3, #1
 8011a64:	e7f0      	b.n	8011a48 <_vfiprintf_r+0x1b8>
 8011a66:	ab03      	add	r3, sp, #12
 8011a68:	9300      	str	r3, [sp, #0]
 8011a6a:	462a      	mov	r2, r5
 8011a6c:	4b12      	ldr	r3, [pc, #72]	@ (8011ab8 <_vfiprintf_r+0x228>)
 8011a6e:	a904      	add	r1, sp, #16
 8011a70:	4630      	mov	r0, r6
 8011a72:	f3af 8000 	nop.w
 8011a76:	4607      	mov	r7, r0
 8011a78:	1c78      	adds	r0, r7, #1
 8011a7a:	d1d6      	bne.n	8011a2a <_vfiprintf_r+0x19a>
 8011a7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011a7e:	07d9      	lsls	r1, r3, #31
 8011a80:	d405      	bmi.n	8011a8e <_vfiprintf_r+0x1fe>
 8011a82:	89ab      	ldrh	r3, [r5, #12]
 8011a84:	059a      	lsls	r2, r3, #22
 8011a86:	d402      	bmi.n	8011a8e <_vfiprintf_r+0x1fe>
 8011a88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011a8a:	f7ff fda9 	bl	80115e0 <__retarget_lock_release_recursive>
 8011a8e:	89ab      	ldrh	r3, [r5, #12]
 8011a90:	065b      	lsls	r3, r3, #25
 8011a92:	f53f af1f 	bmi.w	80118d4 <_vfiprintf_r+0x44>
 8011a96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011a98:	e71e      	b.n	80118d8 <_vfiprintf_r+0x48>
 8011a9a:	ab03      	add	r3, sp, #12
 8011a9c:	9300      	str	r3, [sp, #0]
 8011a9e:	462a      	mov	r2, r5
 8011aa0:	4b05      	ldr	r3, [pc, #20]	@ (8011ab8 <_vfiprintf_r+0x228>)
 8011aa2:	a904      	add	r1, sp, #16
 8011aa4:	4630      	mov	r0, r6
 8011aa6:	f000 f879 	bl	8011b9c <_printf_i>
 8011aaa:	e7e4      	b.n	8011a76 <_vfiprintf_r+0x1e6>
 8011aac:	080154d1 	.word	0x080154d1
 8011ab0:	080154db 	.word	0x080154db
 8011ab4:	00000000 	.word	0x00000000
 8011ab8:	0801186b 	.word	0x0801186b
 8011abc:	080154d7 	.word	0x080154d7

08011ac0 <_printf_common>:
 8011ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ac4:	4616      	mov	r6, r2
 8011ac6:	4698      	mov	r8, r3
 8011ac8:	688a      	ldr	r2, [r1, #8]
 8011aca:	690b      	ldr	r3, [r1, #16]
 8011acc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011ad0:	4293      	cmp	r3, r2
 8011ad2:	bfb8      	it	lt
 8011ad4:	4613      	movlt	r3, r2
 8011ad6:	6033      	str	r3, [r6, #0]
 8011ad8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011adc:	4607      	mov	r7, r0
 8011ade:	460c      	mov	r4, r1
 8011ae0:	b10a      	cbz	r2, 8011ae6 <_printf_common+0x26>
 8011ae2:	3301      	adds	r3, #1
 8011ae4:	6033      	str	r3, [r6, #0]
 8011ae6:	6823      	ldr	r3, [r4, #0]
 8011ae8:	0699      	lsls	r1, r3, #26
 8011aea:	bf42      	ittt	mi
 8011aec:	6833      	ldrmi	r3, [r6, #0]
 8011aee:	3302      	addmi	r3, #2
 8011af0:	6033      	strmi	r3, [r6, #0]
 8011af2:	6825      	ldr	r5, [r4, #0]
 8011af4:	f015 0506 	ands.w	r5, r5, #6
 8011af8:	d106      	bne.n	8011b08 <_printf_common+0x48>
 8011afa:	f104 0a19 	add.w	sl, r4, #25
 8011afe:	68e3      	ldr	r3, [r4, #12]
 8011b00:	6832      	ldr	r2, [r6, #0]
 8011b02:	1a9b      	subs	r3, r3, r2
 8011b04:	42ab      	cmp	r3, r5
 8011b06:	dc26      	bgt.n	8011b56 <_printf_common+0x96>
 8011b08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011b0c:	6822      	ldr	r2, [r4, #0]
 8011b0e:	3b00      	subs	r3, #0
 8011b10:	bf18      	it	ne
 8011b12:	2301      	movne	r3, #1
 8011b14:	0692      	lsls	r2, r2, #26
 8011b16:	d42b      	bmi.n	8011b70 <_printf_common+0xb0>
 8011b18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011b1c:	4641      	mov	r1, r8
 8011b1e:	4638      	mov	r0, r7
 8011b20:	47c8      	blx	r9
 8011b22:	3001      	adds	r0, #1
 8011b24:	d01e      	beq.n	8011b64 <_printf_common+0xa4>
 8011b26:	6823      	ldr	r3, [r4, #0]
 8011b28:	6922      	ldr	r2, [r4, #16]
 8011b2a:	f003 0306 	and.w	r3, r3, #6
 8011b2e:	2b04      	cmp	r3, #4
 8011b30:	bf02      	ittt	eq
 8011b32:	68e5      	ldreq	r5, [r4, #12]
 8011b34:	6833      	ldreq	r3, [r6, #0]
 8011b36:	1aed      	subeq	r5, r5, r3
 8011b38:	68a3      	ldr	r3, [r4, #8]
 8011b3a:	bf0c      	ite	eq
 8011b3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011b40:	2500      	movne	r5, #0
 8011b42:	4293      	cmp	r3, r2
 8011b44:	bfc4      	itt	gt
 8011b46:	1a9b      	subgt	r3, r3, r2
 8011b48:	18ed      	addgt	r5, r5, r3
 8011b4a:	2600      	movs	r6, #0
 8011b4c:	341a      	adds	r4, #26
 8011b4e:	42b5      	cmp	r5, r6
 8011b50:	d11a      	bne.n	8011b88 <_printf_common+0xc8>
 8011b52:	2000      	movs	r0, #0
 8011b54:	e008      	b.n	8011b68 <_printf_common+0xa8>
 8011b56:	2301      	movs	r3, #1
 8011b58:	4652      	mov	r2, sl
 8011b5a:	4641      	mov	r1, r8
 8011b5c:	4638      	mov	r0, r7
 8011b5e:	47c8      	blx	r9
 8011b60:	3001      	adds	r0, #1
 8011b62:	d103      	bne.n	8011b6c <_printf_common+0xac>
 8011b64:	f04f 30ff 	mov.w	r0, #4294967295
 8011b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b6c:	3501      	adds	r5, #1
 8011b6e:	e7c6      	b.n	8011afe <_printf_common+0x3e>
 8011b70:	18e1      	adds	r1, r4, r3
 8011b72:	1c5a      	adds	r2, r3, #1
 8011b74:	2030      	movs	r0, #48	@ 0x30
 8011b76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011b7a:	4422      	add	r2, r4
 8011b7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011b80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011b84:	3302      	adds	r3, #2
 8011b86:	e7c7      	b.n	8011b18 <_printf_common+0x58>
 8011b88:	2301      	movs	r3, #1
 8011b8a:	4622      	mov	r2, r4
 8011b8c:	4641      	mov	r1, r8
 8011b8e:	4638      	mov	r0, r7
 8011b90:	47c8      	blx	r9
 8011b92:	3001      	adds	r0, #1
 8011b94:	d0e6      	beq.n	8011b64 <_printf_common+0xa4>
 8011b96:	3601      	adds	r6, #1
 8011b98:	e7d9      	b.n	8011b4e <_printf_common+0x8e>
	...

08011b9c <_printf_i>:
 8011b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011ba0:	7e0f      	ldrb	r7, [r1, #24]
 8011ba2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011ba4:	2f78      	cmp	r7, #120	@ 0x78
 8011ba6:	4691      	mov	r9, r2
 8011ba8:	4680      	mov	r8, r0
 8011baa:	460c      	mov	r4, r1
 8011bac:	469a      	mov	sl, r3
 8011bae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011bb2:	d807      	bhi.n	8011bc4 <_printf_i+0x28>
 8011bb4:	2f62      	cmp	r7, #98	@ 0x62
 8011bb6:	d80a      	bhi.n	8011bce <_printf_i+0x32>
 8011bb8:	2f00      	cmp	r7, #0
 8011bba:	f000 80d1 	beq.w	8011d60 <_printf_i+0x1c4>
 8011bbe:	2f58      	cmp	r7, #88	@ 0x58
 8011bc0:	f000 80b8 	beq.w	8011d34 <_printf_i+0x198>
 8011bc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011bc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011bcc:	e03a      	b.n	8011c44 <_printf_i+0xa8>
 8011bce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011bd2:	2b15      	cmp	r3, #21
 8011bd4:	d8f6      	bhi.n	8011bc4 <_printf_i+0x28>
 8011bd6:	a101      	add	r1, pc, #4	@ (adr r1, 8011bdc <_printf_i+0x40>)
 8011bd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011bdc:	08011c35 	.word	0x08011c35
 8011be0:	08011c49 	.word	0x08011c49
 8011be4:	08011bc5 	.word	0x08011bc5
 8011be8:	08011bc5 	.word	0x08011bc5
 8011bec:	08011bc5 	.word	0x08011bc5
 8011bf0:	08011bc5 	.word	0x08011bc5
 8011bf4:	08011c49 	.word	0x08011c49
 8011bf8:	08011bc5 	.word	0x08011bc5
 8011bfc:	08011bc5 	.word	0x08011bc5
 8011c00:	08011bc5 	.word	0x08011bc5
 8011c04:	08011bc5 	.word	0x08011bc5
 8011c08:	08011d47 	.word	0x08011d47
 8011c0c:	08011c73 	.word	0x08011c73
 8011c10:	08011d01 	.word	0x08011d01
 8011c14:	08011bc5 	.word	0x08011bc5
 8011c18:	08011bc5 	.word	0x08011bc5
 8011c1c:	08011d69 	.word	0x08011d69
 8011c20:	08011bc5 	.word	0x08011bc5
 8011c24:	08011c73 	.word	0x08011c73
 8011c28:	08011bc5 	.word	0x08011bc5
 8011c2c:	08011bc5 	.word	0x08011bc5
 8011c30:	08011d09 	.word	0x08011d09
 8011c34:	6833      	ldr	r3, [r6, #0]
 8011c36:	1d1a      	adds	r2, r3, #4
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	6032      	str	r2, [r6, #0]
 8011c3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011c40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011c44:	2301      	movs	r3, #1
 8011c46:	e09c      	b.n	8011d82 <_printf_i+0x1e6>
 8011c48:	6833      	ldr	r3, [r6, #0]
 8011c4a:	6820      	ldr	r0, [r4, #0]
 8011c4c:	1d19      	adds	r1, r3, #4
 8011c4e:	6031      	str	r1, [r6, #0]
 8011c50:	0606      	lsls	r6, r0, #24
 8011c52:	d501      	bpl.n	8011c58 <_printf_i+0xbc>
 8011c54:	681d      	ldr	r5, [r3, #0]
 8011c56:	e003      	b.n	8011c60 <_printf_i+0xc4>
 8011c58:	0645      	lsls	r5, r0, #25
 8011c5a:	d5fb      	bpl.n	8011c54 <_printf_i+0xb8>
 8011c5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011c60:	2d00      	cmp	r5, #0
 8011c62:	da03      	bge.n	8011c6c <_printf_i+0xd0>
 8011c64:	232d      	movs	r3, #45	@ 0x2d
 8011c66:	426d      	negs	r5, r5
 8011c68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011c6c:	4858      	ldr	r0, [pc, #352]	@ (8011dd0 <_printf_i+0x234>)
 8011c6e:	230a      	movs	r3, #10
 8011c70:	e011      	b.n	8011c96 <_printf_i+0xfa>
 8011c72:	6821      	ldr	r1, [r4, #0]
 8011c74:	6833      	ldr	r3, [r6, #0]
 8011c76:	0608      	lsls	r0, r1, #24
 8011c78:	f853 5b04 	ldr.w	r5, [r3], #4
 8011c7c:	d402      	bmi.n	8011c84 <_printf_i+0xe8>
 8011c7e:	0649      	lsls	r1, r1, #25
 8011c80:	bf48      	it	mi
 8011c82:	b2ad      	uxthmi	r5, r5
 8011c84:	2f6f      	cmp	r7, #111	@ 0x6f
 8011c86:	4852      	ldr	r0, [pc, #328]	@ (8011dd0 <_printf_i+0x234>)
 8011c88:	6033      	str	r3, [r6, #0]
 8011c8a:	bf14      	ite	ne
 8011c8c:	230a      	movne	r3, #10
 8011c8e:	2308      	moveq	r3, #8
 8011c90:	2100      	movs	r1, #0
 8011c92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011c96:	6866      	ldr	r6, [r4, #4]
 8011c98:	60a6      	str	r6, [r4, #8]
 8011c9a:	2e00      	cmp	r6, #0
 8011c9c:	db05      	blt.n	8011caa <_printf_i+0x10e>
 8011c9e:	6821      	ldr	r1, [r4, #0]
 8011ca0:	432e      	orrs	r6, r5
 8011ca2:	f021 0104 	bic.w	r1, r1, #4
 8011ca6:	6021      	str	r1, [r4, #0]
 8011ca8:	d04b      	beq.n	8011d42 <_printf_i+0x1a6>
 8011caa:	4616      	mov	r6, r2
 8011cac:	fbb5 f1f3 	udiv	r1, r5, r3
 8011cb0:	fb03 5711 	mls	r7, r3, r1, r5
 8011cb4:	5dc7      	ldrb	r7, [r0, r7]
 8011cb6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011cba:	462f      	mov	r7, r5
 8011cbc:	42bb      	cmp	r3, r7
 8011cbe:	460d      	mov	r5, r1
 8011cc0:	d9f4      	bls.n	8011cac <_printf_i+0x110>
 8011cc2:	2b08      	cmp	r3, #8
 8011cc4:	d10b      	bne.n	8011cde <_printf_i+0x142>
 8011cc6:	6823      	ldr	r3, [r4, #0]
 8011cc8:	07df      	lsls	r7, r3, #31
 8011cca:	d508      	bpl.n	8011cde <_printf_i+0x142>
 8011ccc:	6923      	ldr	r3, [r4, #16]
 8011cce:	6861      	ldr	r1, [r4, #4]
 8011cd0:	4299      	cmp	r1, r3
 8011cd2:	bfde      	ittt	le
 8011cd4:	2330      	movle	r3, #48	@ 0x30
 8011cd6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011cda:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011cde:	1b92      	subs	r2, r2, r6
 8011ce0:	6122      	str	r2, [r4, #16]
 8011ce2:	f8cd a000 	str.w	sl, [sp]
 8011ce6:	464b      	mov	r3, r9
 8011ce8:	aa03      	add	r2, sp, #12
 8011cea:	4621      	mov	r1, r4
 8011cec:	4640      	mov	r0, r8
 8011cee:	f7ff fee7 	bl	8011ac0 <_printf_common>
 8011cf2:	3001      	adds	r0, #1
 8011cf4:	d14a      	bne.n	8011d8c <_printf_i+0x1f0>
 8011cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8011cfa:	b004      	add	sp, #16
 8011cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d00:	6823      	ldr	r3, [r4, #0]
 8011d02:	f043 0320 	orr.w	r3, r3, #32
 8011d06:	6023      	str	r3, [r4, #0]
 8011d08:	4832      	ldr	r0, [pc, #200]	@ (8011dd4 <_printf_i+0x238>)
 8011d0a:	2778      	movs	r7, #120	@ 0x78
 8011d0c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011d10:	6823      	ldr	r3, [r4, #0]
 8011d12:	6831      	ldr	r1, [r6, #0]
 8011d14:	061f      	lsls	r7, r3, #24
 8011d16:	f851 5b04 	ldr.w	r5, [r1], #4
 8011d1a:	d402      	bmi.n	8011d22 <_printf_i+0x186>
 8011d1c:	065f      	lsls	r7, r3, #25
 8011d1e:	bf48      	it	mi
 8011d20:	b2ad      	uxthmi	r5, r5
 8011d22:	6031      	str	r1, [r6, #0]
 8011d24:	07d9      	lsls	r1, r3, #31
 8011d26:	bf44      	itt	mi
 8011d28:	f043 0320 	orrmi.w	r3, r3, #32
 8011d2c:	6023      	strmi	r3, [r4, #0]
 8011d2e:	b11d      	cbz	r5, 8011d38 <_printf_i+0x19c>
 8011d30:	2310      	movs	r3, #16
 8011d32:	e7ad      	b.n	8011c90 <_printf_i+0xf4>
 8011d34:	4826      	ldr	r0, [pc, #152]	@ (8011dd0 <_printf_i+0x234>)
 8011d36:	e7e9      	b.n	8011d0c <_printf_i+0x170>
 8011d38:	6823      	ldr	r3, [r4, #0]
 8011d3a:	f023 0320 	bic.w	r3, r3, #32
 8011d3e:	6023      	str	r3, [r4, #0]
 8011d40:	e7f6      	b.n	8011d30 <_printf_i+0x194>
 8011d42:	4616      	mov	r6, r2
 8011d44:	e7bd      	b.n	8011cc2 <_printf_i+0x126>
 8011d46:	6833      	ldr	r3, [r6, #0]
 8011d48:	6825      	ldr	r5, [r4, #0]
 8011d4a:	6961      	ldr	r1, [r4, #20]
 8011d4c:	1d18      	adds	r0, r3, #4
 8011d4e:	6030      	str	r0, [r6, #0]
 8011d50:	062e      	lsls	r6, r5, #24
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	d501      	bpl.n	8011d5a <_printf_i+0x1be>
 8011d56:	6019      	str	r1, [r3, #0]
 8011d58:	e002      	b.n	8011d60 <_printf_i+0x1c4>
 8011d5a:	0668      	lsls	r0, r5, #25
 8011d5c:	d5fb      	bpl.n	8011d56 <_printf_i+0x1ba>
 8011d5e:	8019      	strh	r1, [r3, #0]
 8011d60:	2300      	movs	r3, #0
 8011d62:	6123      	str	r3, [r4, #16]
 8011d64:	4616      	mov	r6, r2
 8011d66:	e7bc      	b.n	8011ce2 <_printf_i+0x146>
 8011d68:	6833      	ldr	r3, [r6, #0]
 8011d6a:	1d1a      	adds	r2, r3, #4
 8011d6c:	6032      	str	r2, [r6, #0]
 8011d6e:	681e      	ldr	r6, [r3, #0]
 8011d70:	6862      	ldr	r2, [r4, #4]
 8011d72:	2100      	movs	r1, #0
 8011d74:	4630      	mov	r0, r6
 8011d76:	f7ee fa7b 	bl	8000270 <memchr>
 8011d7a:	b108      	cbz	r0, 8011d80 <_printf_i+0x1e4>
 8011d7c:	1b80      	subs	r0, r0, r6
 8011d7e:	6060      	str	r0, [r4, #4]
 8011d80:	6863      	ldr	r3, [r4, #4]
 8011d82:	6123      	str	r3, [r4, #16]
 8011d84:	2300      	movs	r3, #0
 8011d86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011d8a:	e7aa      	b.n	8011ce2 <_printf_i+0x146>
 8011d8c:	6923      	ldr	r3, [r4, #16]
 8011d8e:	4632      	mov	r2, r6
 8011d90:	4649      	mov	r1, r9
 8011d92:	4640      	mov	r0, r8
 8011d94:	47d0      	blx	sl
 8011d96:	3001      	adds	r0, #1
 8011d98:	d0ad      	beq.n	8011cf6 <_printf_i+0x15a>
 8011d9a:	6823      	ldr	r3, [r4, #0]
 8011d9c:	079b      	lsls	r3, r3, #30
 8011d9e:	d413      	bmi.n	8011dc8 <_printf_i+0x22c>
 8011da0:	68e0      	ldr	r0, [r4, #12]
 8011da2:	9b03      	ldr	r3, [sp, #12]
 8011da4:	4298      	cmp	r0, r3
 8011da6:	bfb8      	it	lt
 8011da8:	4618      	movlt	r0, r3
 8011daa:	e7a6      	b.n	8011cfa <_printf_i+0x15e>
 8011dac:	2301      	movs	r3, #1
 8011dae:	4632      	mov	r2, r6
 8011db0:	4649      	mov	r1, r9
 8011db2:	4640      	mov	r0, r8
 8011db4:	47d0      	blx	sl
 8011db6:	3001      	adds	r0, #1
 8011db8:	d09d      	beq.n	8011cf6 <_printf_i+0x15a>
 8011dba:	3501      	adds	r5, #1
 8011dbc:	68e3      	ldr	r3, [r4, #12]
 8011dbe:	9903      	ldr	r1, [sp, #12]
 8011dc0:	1a5b      	subs	r3, r3, r1
 8011dc2:	42ab      	cmp	r3, r5
 8011dc4:	dcf2      	bgt.n	8011dac <_printf_i+0x210>
 8011dc6:	e7eb      	b.n	8011da0 <_printf_i+0x204>
 8011dc8:	2500      	movs	r5, #0
 8011dca:	f104 0619 	add.w	r6, r4, #25
 8011dce:	e7f5      	b.n	8011dbc <_printf_i+0x220>
 8011dd0:	080154e2 	.word	0x080154e2
 8011dd4:	080154f3 	.word	0x080154f3

08011dd8 <__sflush_r>:
 8011dd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011de0:	0716      	lsls	r6, r2, #28
 8011de2:	4605      	mov	r5, r0
 8011de4:	460c      	mov	r4, r1
 8011de6:	d454      	bmi.n	8011e92 <__sflush_r+0xba>
 8011de8:	684b      	ldr	r3, [r1, #4]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	dc02      	bgt.n	8011df4 <__sflush_r+0x1c>
 8011dee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	dd48      	ble.n	8011e86 <__sflush_r+0xae>
 8011df4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011df6:	2e00      	cmp	r6, #0
 8011df8:	d045      	beq.n	8011e86 <__sflush_r+0xae>
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011e00:	682f      	ldr	r7, [r5, #0]
 8011e02:	6a21      	ldr	r1, [r4, #32]
 8011e04:	602b      	str	r3, [r5, #0]
 8011e06:	d030      	beq.n	8011e6a <__sflush_r+0x92>
 8011e08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011e0a:	89a3      	ldrh	r3, [r4, #12]
 8011e0c:	0759      	lsls	r1, r3, #29
 8011e0e:	d505      	bpl.n	8011e1c <__sflush_r+0x44>
 8011e10:	6863      	ldr	r3, [r4, #4]
 8011e12:	1ad2      	subs	r2, r2, r3
 8011e14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011e16:	b10b      	cbz	r3, 8011e1c <__sflush_r+0x44>
 8011e18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011e1a:	1ad2      	subs	r2, r2, r3
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011e20:	6a21      	ldr	r1, [r4, #32]
 8011e22:	4628      	mov	r0, r5
 8011e24:	47b0      	blx	r6
 8011e26:	1c43      	adds	r3, r0, #1
 8011e28:	89a3      	ldrh	r3, [r4, #12]
 8011e2a:	d106      	bne.n	8011e3a <__sflush_r+0x62>
 8011e2c:	6829      	ldr	r1, [r5, #0]
 8011e2e:	291d      	cmp	r1, #29
 8011e30:	d82b      	bhi.n	8011e8a <__sflush_r+0xb2>
 8011e32:	4a2a      	ldr	r2, [pc, #168]	@ (8011edc <__sflush_r+0x104>)
 8011e34:	40ca      	lsrs	r2, r1
 8011e36:	07d6      	lsls	r6, r2, #31
 8011e38:	d527      	bpl.n	8011e8a <__sflush_r+0xb2>
 8011e3a:	2200      	movs	r2, #0
 8011e3c:	6062      	str	r2, [r4, #4]
 8011e3e:	04d9      	lsls	r1, r3, #19
 8011e40:	6922      	ldr	r2, [r4, #16]
 8011e42:	6022      	str	r2, [r4, #0]
 8011e44:	d504      	bpl.n	8011e50 <__sflush_r+0x78>
 8011e46:	1c42      	adds	r2, r0, #1
 8011e48:	d101      	bne.n	8011e4e <__sflush_r+0x76>
 8011e4a:	682b      	ldr	r3, [r5, #0]
 8011e4c:	b903      	cbnz	r3, 8011e50 <__sflush_r+0x78>
 8011e4e:	6560      	str	r0, [r4, #84]	@ 0x54
 8011e50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011e52:	602f      	str	r7, [r5, #0]
 8011e54:	b1b9      	cbz	r1, 8011e86 <__sflush_r+0xae>
 8011e56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011e5a:	4299      	cmp	r1, r3
 8011e5c:	d002      	beq.n	8011e64 <__sflush_r+0x8c>
 8011e5e:	4628      	mov	r0, r5
 8011e60:	f7ff fbec 	bl	801163c <_free_r>
 8011e64:	2300      	movs	r3, #0
 8011e66:	6363      	str	r3, [r4, #52]	@ 0x34
 8011e68:	e00d      	b.n	8011e86 <__sflush_r+0xae>
 8011e6a:	2301      	movs	r3, #1
 8011e6c:	4628      	mov	r0, r5
 8011e6e:	47b0      	blx	r6
 8011e70:	4602      	mov	r2, r0
 8011e72:	1c50      	adds	r0, r2, #1
 8011e74:	d1c9      	bne.n	8011e0a <__sflush_r+0x32>
 8011e76:	682b      	ldr	r3, [r5, #0]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d0c6      	beq.n	8011e0a <__sflush_r+0x32>
 8011e7c:	2b1d      	cmp	r3, #29
 8011e7e:	d001      	beq.n	8011e84 <__sflush_r+0xac>
 8011e80:	2b16      	cmp	r3, #22
 8011e82:	d11e      	bne.n	8011ec2 <__sflush_r+0xea>
 8011e84:	602f      	str	r7, [r5, #0]
 8011e86:	2000      	movs	r0, #0
 8011e88:	e022      	b.n	8011ed0 <__sflush_r+0xf8>
 8011e8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e8e:	b21b      	sxth	r3, r3
 8011e90:	e01b      	b.n	8011eca <__sflush_r+0xf2>
 8011e92:	690f      	ldr	r7, [r1, #16]
 8011e94:	2f00      	cmp	r7, #0
 8011e96:	d0f6      	beq.n	8011e86 <__sflush_r+0xae>
 8011e98:	0793      	lsls	r3, r2, #30
 8011e9a:	680e      	ldr	r6, [r1, #0]
 8011e9c:	bf08      	it	eq
 8011e9e:	694b      	ldreq	r3, [r1, #20]
 8011ea0:	600f      	str	r7, [r1, #0]
 8011ea2:	bf18      	it	ne
 8011ea4:	2300      	movne	r3, #0
 8011ea6:	eba6 0807 	sub.w	r8, r6, r7
 8011eaa:	608b      	str	r3, [r1, #8]
 8011eac:	f1b8 0f00 	cmp.w	r8, #0
 8011eb0:	dde9      	ble.n	8011e86 <__sflush_r+0xae>
 8011eb2:	6a21      	ldr	r1, [r4, #32]
 8011eb4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011eb6:	4643      	mov	r3, r8
 8011eb8:	463a      	mov	r2, r7
 8011eba:	4628      	mov	r0, r5
 8011ebc:	47b0      	blx	r6
 8011ebe:	2800      	cmp	r0, #0
 8011ec0:	dc08      	bgt.n	8011ed4 <__sflush_r+0xfc>
 8011ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ec6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011eca:	81a3      	strh	r3, [r4, #12]
 8011ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8011ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ed4:	4407      	add	r7, r0
 8011ed6:	eba8 0800 	sub.w	r8, r8, r0
 8011eda:	e7e7      	b.n	8011eac <__sflush_r+0xd4>
 8011edc:	20400001 	.word	0x20400001

08011ee0 <_fflush_r>:
 8011ee0:	b538      	push	{r3, r4, r5, lr}
 8011ee2:	690b      	ldr	r3, [r1, #16]
 8011ee4:	4605      	mov	r5, r0
 8011ee6:	460c      	mov	r4, r1
 8011ee8:	b913      	cbnz	r3, 8011ef0 <_fflush_r+0x10>
 8011eea:	2500      	movs	r5, #0
 8011eec:	4628      	mov	r0, r5
 8011eee:	bd38      	pop	{r3, r4, r5, pc}
 8011ef0:	b118      	cbz	r0, 8011efa <_fflush_r+0x1a>
 8011ef2:	6a03      	ldr	r3, [r0, #32]
 8011ef4:	b90b      	cbnz	r3, 8011efa <_fflush_r+0x1a>
 8011ef6:	f7ff fa45 	bl	8011384 <__sinit>
 8011efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d0f3      	beq.n	8011eea <_fflush_r+0xa>
 8011f02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011f04:	07d0      	lsls	r0, r2, #31
 8011f06:	d404      	bmi.n	8011f12 <_fflush_r+0x32>
 8011f08:	0599      	lsls	r1, r3, #22
 8011f0a:	d402      	bmi.n	8011f12 <_fflush_r+0x32>
 8011f0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011f0e:	f7ff fb66 	bl	80115de <__retarget_lock_acquire_recursive>
 8011f12:	4628      	mov	r0, r5
 8011f14:	4621      	mov	r1, r4
 8011f16:	f7ff ff5f 	bl	8011dd8 <__sflush_r>
 8011f1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011f1c:	07da      	lsls	r2, r3, #31
 8011f1e:	4605      	mov	r5, r0
 8011f20:	d4e4      	bmi.n	8011eec <_fflush_r+0xc>
 8011f22:	89a3      	ldrh	r3, [r4, #12]
 8011f24:	059b      	lsls	r3, r3, #22
 8011f26:	d4e1      	bmi.n	8011eec <_fflush_r+0xc>
 8011f28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011f2a:	f7ff fb59 	bl	80115e0 <__retarget_lock_release_recursive>
 8011f2e:	e7dd      	b.n	8011eec <_fflush_r+0xc>

08011f30 <fiprintf>:
 8011f30:	b40e      	push	{r1, r2, r3}
 8011f32:	b503      	push	{r0, r1, lr}
 8011f34:	4601      	mov	r1, r0
 8011f36:	ab03      	add	r3, sp, #12
 8011f38:	4805      	ldr	r0, [pc, #20]	@ (8011f50 <fiprintf+0x20>)
 8011f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f3e:	6800      	ldr	r0, [r0, #0]
 8011f40:	9301      	str	r3, [sp, #4]
 8011f42:	f7ff fca5 	bl	8011890 <_vfiprintf_r>
 8011f46:	b002      	add	sp, #8
 8011f48:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f4c:	b003      	add	sp, #12
 8011f4e:	4770      	bx	lr
 8011f50:	20000038 	.word	0x20000038

08011f54 <__swbuf_r>:
 8011f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f56:	460e      	mov	r6, r1
 8011f58:	4614      	mov	r4, r2
 8011f5a:	4605      	mov	r5, r0
 8011f5c:	b118      	cbz	r0, 8011f66 <__swbuf_r+0x12>
 8011f5e:	6a03      	ldr	r3, [r0, #32]
 8011f60:	b90b      	cbnz	r3, 8011f66 <__swbuf_r+0x12>
 8011f62:	f7ff fa0f 	bl	8011384 <__sinit>
 8011f66:	69a3      	ldr	r3, [r4, #24]
 8011f68:	60a3      	str	r3, [r4, #8]
 8011f6a:	89a3      	ldrh	r3, [r4, #12]
 8011f6c:	071a      	lsls	r2, r3, #28
 8011f6e:	d501      	bpl.n	8011f74 <__swbuf_r+0x20>
 8011f70:	6923      	ldr	r3, [r4, #16]
 8011f72:	b943      	cbnz	r3, 8011f86 <__swbuf_r+0x32>
 8011f74:	4621      	mov	r1, r4
 8011f76:	4628      	mov	r0, r5
 8011f78:	f000 f82a 	bl	8011fd0 <__swsetup_r>
 8011f7c:	b118      	cbz	r0, 8011f86 <__swbuf_r+0x32>
 8011f7e:	f04f 37ff 	mov.w	r7, #4294967295
 8011f82:	4638      	mov	r0, r7
 8011f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f86:	6823      	ldr	r3, [r4, #0]
 8011f88:	6922      	ldr	r2, [r4, #16]
 8011f8a:	1a98      	subs	r0, r3, r2
 8011f8c:	6963      	ldr	r3, [r4, #20]
 8011f8e:	b2f6      	uxtb	r6, r6
 8011f90:	4283      	cmp	r3, r0
 8011f92:	4637      	mov	r7, r6
 8011f94:	dc05      	bgt.n	8011fa2 <__swbuf_r+0x4e>
 8011f96:	4621      	mov	r1, r4
 8011f98:	4628      	mov	r0, r5
 8011f9a:	f7ff ffa1 	bl	8011ee0 <_fflush_r>
 8011f9e:	2800      	cmp	r0, #0
 8011fa0:	d1ed      	bne.n	8011f7e <__swbuf_r+0x2a>
 8011fa2:	68a3      	ldr	r3, [r4, #8]
 8011fa4:	3b01      	subs	r3, #1
 8011fa6:	60a3      	str	r3, [r4, #8]
 8011fa8:	6823      	ldr	r3, [r4, #0]
 8011faa:	1c5a      	adds	r2, r3, #1
 8011fac:	6022      	str	r2, [r4, #0]
 8011fae:	701e      	strb	r6, [r3, #0]
 8011fb0:	6962      	ldr	r2, [r4, #20]
 8011fb2:	1c43      	adds	r3, r0, #1
 8011fb4:	429a      	cmp	r2, r3
 8011fb6:	d004      	beq.n	8011fc2 <__swbuf_r+0x6e>
 8011fb8:	89a3      	ldrh	r3, [r4, #12]
 8011fba:	07db      	lsls	r3, r3, #31
 8011fbc:	d5e1      	bpl.n	8011f82 <__swbuf_r+0x2e>
 8011fbe:	2e0a      	cmp	r6, #10
 8011fc0:	d1df      	bne.n	8011f82 <__swbuf_r+0x2e>
 8011fc2:	4621      	mov	r1, r4
 8011fc4:	4628      	mov	r0, r5
 8011fc6:	f7ff ff8b 	bl	8011ee0 <_fflush_r>
 8011fca:	2800      	cmp	r0, #0
 8011fcc:	d0d9      	beq.n	8011f82 <__swbuf_r+0x2e>
 8011fce:	e7d6      	b.n	8011f7e <__swbuf_r+0x2a>

08011fd0 <__swsetup_r>:
 8011fd0:	b538      	push	{r3, r4, r5, lr}
 8011fd2:	4b29      	ldr	r3, [pc, #164]	@ (8012078 <__swsetup_r+0xa8>)
 8011fd4:	4605      	mov	r5, r0
 8011fd6:	6818      	ldr	r0, [r3, #0]
 8011fd8:	460c      	mov	r4, r1
 8011fda:	b118      	cbz	r0, 8011fe4 <__swsetup_r+0x14>
 8011fdc:	6a03      	ldr	r3, [r0, #32]
 8011fde:	b90b      	cbnz	r3, 8011fe4 <__swsetup_r+0x14>
 8011fe0:	f7ff f9d0 	bl	8011384 <__sinit>
 8011fe4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fe8:	0719      	lsls	r1, r3, #28
 8011fea:	d422      	bmi.n	8012032 <__swsetup_r+0x62>
 8011fec:	06da      	lsls	r2, r3, #27
 8011fee:	d407      	bmi.n	8012000 <__swsetup_r+0x30>
 8011ff0:	2209      	movs	r2, #9
 8011ff2:	602a      	str	r2, [r5, #0]
 8011ff4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ff8:	81a3      	strh	r3, [r4, #12]
 8011ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8011ffe:	e033      	b.n	8012068 <__swsetup_r+0x98>
 8012000:	0758      	lsls	r0, r3, #29
 8012002:	d512      	bpl.n	801202a <__swsetup_r+0x5a>
 8012004:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012006:	b141      	cbz	r1, 801201a <__swsetup_r+0x4a>
 8012008:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801200c:	4299      	cmp	r1, r3
 801200e:	d002      	beq.n	8012016 <__swsetup_r+0x46>
 8012010:	4628      	mov	r0, r5
 8012012:	f7ff fb13 	bl	801163c <_free_r>
 8012016:	2300      	movs	r3, #0
 8012018:	6363      	str	r3, [r4, #52]	@ 0x34
 801201a:	89a3      	ldrh	r3, [r4, #12]
 801201c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012020:	81a3      	strh	r3, [r4, #12]
 8012022:	2300      	movs	r3, #0
 8012024:	6063      	str	r3, [r4, #4]
 8012026:	6923      	ldr	r3, [r4, #16]
 8012028:	6023      	str	r3, [r4, #0]
 801202a:	89a3      	ldrh	r3, [r4, #12]
 801202c:	f043 0308 	orr.w	r3, r3, #8
 8012030:	81a3      	strh	r3, [r4, #12]
 8012032:	6923      	ldr	r3, [r4, #16]
 8012034:	b94b      	cbnz	r3, 801204a <__swsetup_r+0x7a>
 8012036:	89a3      	ldrh	r3, [r4, #12]
 8012038:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801203c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012040:	d003      	beq.n	801204a <__swsetup_r+0x7a>
 8012042:	4621      	mov	r1, r4
 8012044:	4628      	mov	r0, r5
 8012046:	f000 f856 	bl	80120f6 <__smakebuf_r>
 801204a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801204e:	f013 0201 	ands.w	r2, r3, #1
 8012052:	d00a      	beq.n	801206a <__swsetup_r+0x9a>
 8012054:	2200      	movs	r2, #0
 8012056:	60a2      	str	r2, [r4, #8]
 8012058:	6962      	ldr	r2, [r4, #20]
 801205a:	4252      	negs	r2, r2
 801205c:	61a2      	str	r2, [r4, #24]
 801205e:	6922      	ldr	r2, [r4, #16]
 8012060:	b942      	cbnz	r2, 8012074 <__swsetup_r+0xa4>
 8012062:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012066:	d1c5      	bne.n	8011ff4 <__swsetup_r+0x24>
 8012068:	bd38      	pop	{r3, r4, r5, pc}
 801206a:	0799      	lsls	r1, r3, #30
 801206c:	bf58      	it	pl
 801206e:	6962      	ldrpl	r2, [r4, #20]
 8012070:	60a2      	str	r2, [r4, #8]
 8012072:	e7f4      	b.n	801205e <__swsetup_r+0x8e>
 8012074:	2000      	movs	r0, #0
 8012076:	e7f7      	b.n	8012068 <__swsetup_r+0x98>
 8012078:	20000038 	.word	0x20000038

0801207c <_sbrk_r>:
 801207c:	b538      	push	{r3, r4, r5, lr}
 801207e:	4d06      	ldr	r5, [pc, #24]	@ (8012098 <_sbrk_r+0x1c>)
 8012080:	2300      	movs	r3, #0
 8012082:	4604      	mov	r4, r0
 8012084:	4608      	mov	r0, r1
 8012086:	602b      	str	r3, [r5, #0]
 8012088:	f7ee fece 	bl	8000e28 <_sbrk>
 801208c:	1c43      	adds	r3, r0, #1
 801208e:	d102      	bne.n	8012096 <_sbrk_r+0x1a>
 8012090:	682b      	ldr	r3, [r5, #0]
 8012092:	b103      	cbz	r3, 8012096 <_sbrk_r+0x1a>
 8012094:	6023      	str	r3, [r4, #0]
 8012096:	bd38      	pop	{r3, r4, r5, pc}
 8012098:	20008840 	.word	0x20008840

0801209c <abort>:
 801209c:	b508      	push	{r3, lr}
 801209e:	2006      	movs	r0, #6
 80120a0:	f000 f88e 	bl	80121c0 <raise>
 80120a4:	2001      	movs	r0, #1
 80120a6:	f7ee fe47 	bl	8000d38 <_exit>

080120aa <__swhatbuf_r>:
 80120aa:	b570      	push	{r4, r5, r6, lr}
 80120ac:	460c      	mov	r4, r1
 80120ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120b2:	2900      	cmp	r1, #0
 80120b4:	b096      	sub	sp, #88	@ 0x58
 80120b6:	4615      	mov	r5, r2
 80120b8:	461e      	mov	r6, r3
 80120ba:	da0d      	bge.n	80120d8 <__swhatbuf_r+0x2e>
 80120bc:	89a3      	ldrh	r3, [r4, #12]
 80120be:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80120c2:	f04f 0100 	mov.w	r1, #0
 80120c6:	bf14      	ite	ne
 80120c8:	2340      	movne	r3, #64	@ 0x40
 80120ca:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80120ce:	2000      	movs	r0, #0
 80120d0:	6031      	str	r1, [r6, #0]
 80120d2:	602b      	str	r3, [r5, #0]
 80120d4:	b016      	add	sp, #88	@ 0x58
 80120d6:	bd70      	pop	{r4, r5, r6, pc}
 80120d8:	466a      	mov	r2, sp
 80120da:	f000 f879 	bl	80121d0 <_fstat_r>
 80120de:	2800      	cmp	r0, #0
 80120e0:	dbec      	blt.n	80120bc <__swhatbuf_r+0x12>
 80120e2:	9901      	ldr	r1, [sp, #4]
 80120e4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80120e8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80120ec:	4259      	negs	r1, r3
 80120ee:	4159      	adcs	r1, r3
 80120f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80120f4:	e7eb      	b.n	80120ce <__swhatbuf_r+0x24>

080120f6 <__smakebuf_r>:
 80120f6:	898b      	ldrh	r3, [r1, #12]
 80120f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80120fa:	079d      	lsls	r5, r3, #30
 80120fc:	4606      	mov	r6, r0
 80120fe:	460c      	mov	r4, r1
 8012100:	d507      	bpl.n	8012112 <__smakebuf_r+0x1c>
 8012102:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012106:	6023      	str	r3, [r4, #0]
 8012108:	6123      	str	r3, [r4, #16]
 801210a:	2301      	movs	r3, #1
 801210c:	6163      	str	r3, [r4, #20]
 801210e:	b003      	add	sp, #12
 8012110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012112:	ab01      	add	r3, sp, #4
 8012114:	466a      	mov	r2, sp
 8012116:	f7ff ffc8 	bl	80120aa <__swhatbuf_r>
 801211a:	9f00      	ldr	r7, [sp, #0]
 801211c:	4605      	mov	r5, r0
 801211e:	4639      	mov	r1, r7
 8012120:	4630      	mov	r0, r6
 8012122:	f7ff faff 	bl	8011724 <_malloc_r>
 8012126:	b948      	cbnz	r0, 801213c <__smakebuf_r+0x46>
 8012128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801212c:	059a      	lsls	r2, r3, #22
 801212e:	d4ee      	bmi.n	801210e <__smakebuf_r+0x18>
 8012130:	f023 0303 	bic.w	r3, r3, #3
 8012134:	f043 0302 	orr.w	r3, r3, #2
 8012138:	81a3      	strh	r3, [r4, #12]
 801213a:	e7e2      	b.n	8012102 <__smakebuf_r+0xc>
 801213c:	89a3      	ldrh	r3, [r4, #12]
 801213e:	6020      	str	r0, [r4, #0]
 8012140:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012144:	81a3      	strh	r3, [r4, #12]
 8012146:	9b01      	ldr	r3, [sp, #4]
 8012148:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801214c:	b15b      	cbz	r3, 8012166 <__smakebuf_r+0x70>
 801214e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012152:	4630      	mov	r0, r6
 8012154:	f000 f84e 	bl	80121f4 <_isatty_r>
 8012158:	b128      	cbz	r0, 8012166 <__smakebuf_r+0x70>
 801215a:	89a3      	ldrh	r3, [r4, #12]
 801215c:	f023 0303 	bic.w	r3, r3, #3
 8012160:	f043 0301 	orr.w	r3, r3, #1
 8012164:	81a3      	strh	r3, [r4, #12]
 8012166:	89a3      	ldrh	r3, [r4, #12]
 8012168:	431d      	orrs	r5, r3
 801216a:	81a5      	strh	r5, [r4, #12]
 801216c:	e7cf      	b.n	801210e <__smakebuf_r+0x18>

0801216e <_raise_r>:
 801216e:	291f      	cmp	r1, #31
 8012170:	b538      	push	{r3, r4, r5, lr}
 8012172:	4605      	mov	r5, r0
 8012174:	460c      	mov	r4, r1
 8012176:	d904      	bls.n	8012182 <_raise_r+0x14>
 8012178:	2316      	movs	r3, #22
 801217a:	6003      	str	r3, [r0, #0]
 801217c:	f04f 30ff 	mov.w	r0, #4294967295
 8012180:	bd38      	pop	{r3, r4, r5, pc}
 8012182:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012184:	b112      	cbz	r2, 801218c <_raise_r+0x1e>
 8012186:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801218a:	b94b      	cbnz	r3, 80121a0 <_raise_r+0x32>
 801218c:	4628      	mov	r0, r5
 801218e:	f000 f853 	bl	8012238 <_getpid_r>
 8012192:	4622      	mov	r2, r4
 8012194:	4601      	mov	r1, r0
 8012196:	4628      	mov	r0, r5
 8012198:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801219c:	f000 b83a 	b.w	8012214 <_kill_r>
 80121a0:	2b01      	cmp	r3, #1
 80121a2:	d00a      	beq.n	80121ba <_raise_r+0x4c>
 80121a4:	1c59      	adds	r1, r3, #1
 80121a6:	d103      	bne.n	80121b0 <_raise_r+0x42>
 80121a8:	2316      	movs	r3, #22
 80121aa:	6003      	str	r3, [r0, #0]
 80121ac:	2001      	movs	r0, #1
 80121ae:	e7e7      	b.n	8012180 <_raise_r+0x12>
 80121b0:	2100      	movs	r1, #0
 80121b2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80121b6:	4620      	mov	r0, r4
 80121b8:	4798      	blx	r3
 80121ba:	2000      	movs	r0, #0
 80121bc:	e7e0      	b.n	8012180 <_raise_r+0x12>
	...

080121c0 <raise>:
 80121c0:	4b02      	ldr	r3, [pc, #8]	@ (80121cc <raise+0xc>)
 80121c2:	4601      	mov	r1, r0
 80121c4:	6818      	ldr	r0, [r3, #0]
 80121c6:	f7ff bfd2 	b.w	801216e <_raise_r>
 80121ca:	bf00      	nop
 80121cc:	20000038 	.word	0x20000038

080121d0 <_fstat_r>:
 80121d0:	b538      	push	{r3, r4, r5, lr}
 80121d2:	4d07      	ldr	r5, [pc, #28]	@ (80121f0 <_fstat_r+0x20>)
 80121d4:	2300      	movs	r3, #0
 80121d6:	4604      	mov	r4, r0
 80121d8:	4608      	mov	r0, r1
 80121da:	4611      	mov	r1, r2
 80121dc:	602b      	str	r3, [r5, #0]
 80121de:	f7ee fdfb 	bl	8000dd8 <_fstat>
 80121e2:	1c43      	adds	r3, r0, #1
 80121e4:	d102      	bne.n	80121ec <_fstat_r+0x1c>
 80121e6:	682b      	ldr	r3, [r5, #0]
 80121e8:	b103      	cbz	r3, 80121ec <_fstat_r+0x1c>
 80121ea:	6023      	str	r3, [r4, #0]
 80121ec:	bd38      	pop	{r3, r4, r5, pc}
 80121ee:	bf00      	nop
 80121f0:	20008840 	.word	0x20008840

080121f4 <_isatty_r>:
 80121f4:	b538      	push	{r3, r4, r5, lr}
 80121f6:	4d06      	ldr	r5, [pc, #24]	@ (8012210 <_isatty_r+0x1c>)
 80121f8:	2300      	movs	r3, #0
 80121fa:	4604      	mov	r4, r0
 80121fc:	4608      	mov	r0, r1
 80121fe:	602b      	str	r3, [r5, #0]
 8012200:	f7ee fdfa 	bl	8000df8 <_isatty>
 8012204:	1c43      	adds	r3, r0, #1
 8012206:	d102      	bne.n	801220e <_isatty_r+0x1a>
 8012208:	682b      	ldr	r3, [r5, #0]
 801220a:	b103      	cbz	r3, 801220e <_isatty_r+0x1a>
 801220c:	6023      	str	r3, [r4, #0]
 801220e:	bd38      	pop	{r3, r4, r5, pc}
 8012210:	20008840 	.word	0x20008840

08012214 <_kill_r>:
 8012214:	b538      	push	{r3, r4, r5, lr}
 8012216:	4d07      	ldr	r5, [pc, #28]	@ (8012234 <_kill_r+0x20>)
 8012218:	2300      	movs	r3, #0
 801221a:	4604      	mov	r4, r0
 801221c:	4608      	mov	r0, r1
 801221e:	4611      	mov	r1, r2
 8012220:	602b      	str	r3, [r5, #0]
 8012222:	f7ee fd77 	bl	8000d14 <_kill>
 8012226:	1c43      	adds	r3, r0, #1
 8012228:	d102      	bne.n	8012230 <_kill_r+0x1c>
 801222a:	682b      	ldr	r3, [r5, #0]
 801222c:	b103      	cbz	r3, 8012230 <_kill_r+0x1c>
 801222e:	6023      	str	r3, [r4, #0]
 8012230:	bd38      	pop	{r3, r4, r5, pc}
 8012232:	bf00      	nop
 8012234:	20008840 	.word	0x20008840

08012238 <_getpid_r>:
 8012238:	f7ee bd64 	b.w	8000d04 <_getpid>

0801223c <_init>:
 801223c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801223e:	bf00      	nop
 8012240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012242:	bc08      	pop	{r3}
 8012244:	469e      	mov	lr, r3
 8012246:	4770      	bx	lr

08012248 <_fini>:
 8012248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801224a:	bf00      	nop
 801224c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801224e:	bc08      	pop	{r3}
 8012250:	469e      	mov	lr, r3
 8012252:	4770      	bx	lr
